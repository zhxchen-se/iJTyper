echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/Android08.java
Expect check=58
Cannot find matching typeVariable for: public class Android08 {
  private static final String TAG="TAG";
  public static void main(  String[] args){
    try {
      InetAddress server=Inet4Address.getByName("thehost");
      if (server.isReachable(5000)) {
        Log.d(TAG,"Ping!");
      }
      Socket clientsocket=new Socket(server,8080);
    }
 catch (    UnknownHostException e) {
      Log.e(TAG,"Server Not Found");
    }
catch (    IOException e) {
      Log.e(TAG,"Couldn't open socket");
    }
  }
}

Did not find solution for node: Android08 with type Type1
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
Cannot find matching typeVariable for: TAG="TAG"
For node: TAG="TAG" expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: TAG expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: "TAG" expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static void main(String[] args){
  try {
    InetAddress server=Inet4Address.getByName("thehost");
    if (server.isReachable(5000)) {
      Log.d(TAG,"Ping!");
    }
    Socket clientsocket=new Socket(server,8080);
  }
 catch (  UnknownHostException e) {
    Log.e(TAG,"Server Not Found");
  }
catch (  IOException e) {
    Log.e(TAG,"Couldn't open socket");
  }
}

Cannot find matching typeVariable for: public class Android08 {
  private static final String TAG="TAG";
  public static void main(  String[] args){
    try {
      InetAddress server=Inet4Address.getByName("thehost");
      if (server.isReachable(5000)) {
        Log.d(TAG,"Ping!");
      }
      Socket clientsocket=new Socket(server,8080);
    }
 catch (    UnknownHostException e) {
      Log.e(TAG,"Server Not Found");
    }
catch (    IOException e) {
      Log.e(TAG,"Couldn't open socket");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import android.util.Log;
public class Android08 {
  private static final String TAG="TAG";
  public static void main(  String[] args){
    try {
      InetAddress server=Inet4Address.getByName("thehost");
      if (server.isReachable(5000)) {
        Log.d(TAG,"Ping!");
      }
      Socket clientsocket=new Socket(server,8080);
    }
 catch (    UnknownHostException e) {
      Log.e(TAG,"Server Not Found");
    }
catch (    IOException e) {
      Log.e(TAG,"Couldn't open socket");
    }
  }
}

Cannot find matching typeVariable for: String[] args
For node: String[] args expected fqn: java.lang.String[] with type: Type5 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type5 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: args expected fqn: java.lang.String[] with type: Type5 got: java.lang.String[]
For node: InetAddress expected fqn: java.net.InetAddress with type: Type6 got: java.net.InetAddress
For node: InetAddress expected fqn: java.net.InetAddress with type: Type6 got: java.net.InetAddress
Cannot find matching typeVariable for: server=Inet4Address.getByName("thehost")
For node: server=Inet4Address.getByName("thehost") expected fqn: java.net.InetAddress with type: Type6 got: java.net.InetAddress
For node: server expected fqn: java.net.InetAddress with type: Type6 got: java.net.InetAddress
For node: Inet4Address.getByName("thehost") expected fqn: java.net.InetAddress with type: Type8 got: java.net.InetAddress
For node: Inet4Address expected fqn: java.net.Inet4Address with type: Type7 got: java.net.Inet4Address
Cannot find matching typeVariable for: getByName
For node: getByName expected fqn: java.net.InetAddress with type: Type8 got: java.net.InetAddress
For node: "thehost" expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: server.isReachable(5000) expected fqn: boolean with type: Type12 got: boolean
For node: server expected fqn: java.net.InetAddress with type: Type6 got: java.net.InetAddress
Cannot find matching typeVariable for: isReachable
For node: isReachable expected fqn: boolean with type: Type12 got: boolean
For node: 5000 expected fqn: int with type: Type11 got: short
For node: Log.d(TAG,"Ping!") expected fqn: int with type: Type16 got: int
For node: Log expected fqn: android.util.Log with type: Type15 got: android.util.Log
Cannot find matching typeVariable for: d
For node: d expected fqn: int with type: Type16 got: int
For node: TAG expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: "Ping!" expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: Socket expected fqn: java.net.Socket with type: Type20 got: java.net.Socket
For node: Socket expected fqn: java.net.Socket with type: Type20 got: java.net.Socket
Cannot find matching typeVariable for: clientsocket=new Socket(server,8080)
For node: clientsocket=new Socket(server,8080) expected fqn: java.net.Socket with type: Type20 got: java.net.Socket
For node: clientsocket expected fqn: java.net.Socket with type: Type20 got: java.net.Socket
For node: new Socket(server,8080) expected fqn: java.net.Socket with type: Type20 got: java.net.Socket
For node: Socket expected fqn: java.net.Socket with type: Type20 got: java.net.Socket
For node: Socket expected fqn: java.net.Socket with type: Type20 got: java.net.Socket
For node: server expected fqn: java.net.InetAddress with type: Type6 got: java.net.InetAddress
For node: 8080 expected fqn: int with type: Type11 got: short
Cannot find matching typeVariable for: UnknownHostException e
For node: UnknownHostException e expected fqn: java.net.UnknownHostException with type: Type24 got: java.net.UnknownHostException
For node: UnknownHostException expected fqn: java.net.UnknownHostException with type: Type24 got: java.net.UnknownHostException
For node: UnknownHostException expected fqn: java.net.UnknownHostException with type: Type24 got: java.net.UnknownHostException
For node: e expected fqn: java.net.UnknownHostException with type: Type24 got: java.net.UnknownHostException
For node: Log.e(TAG,"Server Not Found") expected fqn: int with type: Type25 got: int
For node: Log expected fqn: android.util.Log with type: Type15 got: android.util.Log
Cannot find matching typeVariable for: e
For node: e expected fqn: int with type: Type25 got: int
For node: TAG expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: "Server Not Found" expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: IOException e
For node: IOException e expected fqn: java.io.IOException with type: Type29 got: java.io.IOException
For node: IOException expected fqn: java.io.IOException with type: Type29 got: java.io.IOException
For node: IOException expected fqn: java.io.IOException with type: Type29 got: java.io.IOException
For node: e expected fqn: java.io.IOException with type: Type29 got: java.io.IOException
For node: Log.e(TAG,"Couldn't open socket") expected fqn: int with type: Type28 got: int
For node: Log expected fqn: android.util.Log with type: Type15 got: android.util.Log
Cannot find matching typeVariable for: e
For node: e expected fqn: int with type: Type28 got: int
For node: TAG expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: "Couldn't open socket" expected fqn: java.lang.String with type: Type4 got: java.lang.String
{Checked=56, Analyzed=55, Unsolved=1, Incorrect=2, Correct=53}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
android.=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
int=NumberLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
int=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SimpleName: {Checked=20, Analyzed=20, Unsolved=0, Incorrect=0, Correct=20}
java=SimpleType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
java=SingleVariableDeclaration: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
java=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=56, Analyzed=55, Unsolved=1, Incorrect=2, Correct=53}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
android.=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
int=NumberLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
int=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SimpleName: {Checked=20, Analyzed=20, Unsolved=0, Incorrect=0, Correct=20}
java=SimpleType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
java=SingleVariableDeclaration: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
java=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
,SimpleName,0,1,0,0,1
android.,SimpleName,3,3,3,0,0
boolean,MethodInvocation,1,1,1,0,0
boolean,SimpleName,1,1,1,0,0
int,MethodInvocation,3,3,3,0,0
int,NumberLiteral,2,2,0,2,0
int,SimpleName,3,3,3,0,0
java,ArrayType,1,1,1,0,0
java,ClassInstanceCreation,1,1,1,0,0
java,MethodInvocation,1,1,1,0,0
java,SimpleName,20,20,20,0,0
java,SimpleType,7,7,7,0,0
java,SingleVariableDeclaration,3,3,3,0,0
java,StringLiteral,5,5,5,0,0
java,VariableDeclarationFragment,3,3,3,0,0
void,PrimitiveType,1,1,1,0,0
