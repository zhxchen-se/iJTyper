echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/gwt_class_49.java
Expect check=103
Cannot find matching typeVariable for: public class gwt_class_49 {
  private void putElementLinkIDsInList(  BodyElement elt,  ArrayList list){
  }
  private void rewriteLinksIterative(){
    ArrayList links=new ArrayList();
    putElementLinkIDsInList(Document.get().getBody(),links);
    for (int i=0; i < links.size(); i++) {
      Element elt=DOM.getElementById((String)links.get(i));
      rewriteLink(elt,"www.example.com");
    }
  }
  /** 
 * Block all accesses out of the website that don't match 'sitename'
 * @param element An anchor link element
 * @param sitename name of the website to check. e.g. "www.example.com"
 */
  private void rewriteLink(  Element element,  String sitename){
    String href=DOM.getElementProperty(element,"href");
    if (null == href) {
      return;
    }
    if (href.startsWith("http://") && !href.startsWith("http://" + sitename + "/")) {
      DOM.setElementProperty(element,"href","http://" + sitename + "/Blocked.html");
    }
  }
}

Cannot find matching typeVariable for: gwt_class_49
Cannot find matching typeVariable for: public class gwt_class_49 {
  private void putElementLinkIDsInList(  BodyElement elt,  ArrayList list){
  }
  private void rewriteLinksIterative(){
    ArrayList links=new ArrayList();
    putElementLinkIDsInList(Document.get().getBody(),links);
    for (int i=0; i < links.size(); i++) {
      Element elt=DOM.getElementById((String)links.get(i));
      rewriteLink(elt,"www.example.com");
    }
  }
  /** 
 * Block all accesses out of the website that don't match 'sitename'
 * @param element An anchor link element
 * @param sitename name of the website to check. e.g. "www.example.com"
 */
  private void rewriteLink(  Element element,  String sitename){
    String href=DOM.getElementProperty(element,"href");
    if (null == href) {
      return;
    }
    if (href.startsWith("http://") && !href.startsWith("http://" + sitename + "/")) {
      DOM.setElementProperty(element,"href","http://" + sitename + "/Blocked.html");
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.google.gwt.dom.client.BodyElement;
import com.google.gwt.dom.client.Document;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.Element;
public class gwt_class_49 {
  private void putElementLinkIDsInList(  BodyElement elt,  ArrayList list){
  }
  private void rewriteLinksIterative(){
    ArrayList links=new ArrayList();
    putElementLinkIDsInList(Document.get().getBody(),links);
    for (int i=0; i < links.size(); i++) {
      Element elt=DOM.getElementById((String)links.get(i));
      rewriteLink(elt,"www.example.com");
    }
  }
  /** 
 * Block all accesses out of the website that don't match 'sitename'
 * @param element An anchor link element
 * @param sitename name of the website to check. e.g. "www.example.com"
 */
  private void rewriteLink(  Element element,  String sitename){
    String href=DOM.getElementProperty(element,"href");
    if (null == href) {
      return;
    }
    if (href.startsWith("http://") && !href.startsWith("http://" + sitename + "/")) {
      DOM.setElementProperty(element,"href","http://" + sitename + "/Blocked.html");
    }
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: putElementLinkIDsInList
Cannot find matching typeVariable for: private void putElementLinkIDsInList(BodyElement elt,ArrayList list){
}

Cannot find matching typeVariable for: public class gwt_class_49 {
  private void putElementLinkIDsInList(  BodyElement elt,  ArrayList list){
  }
  private void rewriteLinksIterative(){
    ArrayList links=new ArrayList();
    putElementLinkIDsInList(Document.get().getBody(),links);
    for (int i=0; i < links.size(); i++) {
      Element elt=DOM.getElementById((String)links.get(i));
      rewriteLink(elt,"www.example.com");
    }
  }
  /** 
 * Block all accesses out of the website that don't match 'sitename'
 * @param element An anchor link element
 * @param sitename name of the website to check. e.g. "www.example.com"
 */
  private void rewriteLink(  Element element,  String sitename){
    String href=DOM.getElementProperty(element,"href");
    if (null == href) {
      return;
    }
    if (href.startsWith("http://") && !href.startsWith("http://" + sitename + "/")) {
      DOM.setElementProperty(element,"href","http://" + sitename + "/Blocked.html");
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.google.gwt.dom.client.BodyElement;
import com.google.gwt.dom.client.Document;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.Element;
public class gwt_class_49 {
  private void putElementLinkIDsInList(  BodyElement elt,  ArrayList list){
  }
  private void rewriteLinksIterative(){
    ArrayList links=new ArrayList();
    putElementLinkIDsInList(Document.get().getBody(),links);
    for (int i=0; i < links.size(); i++) {
      Element elt=DOM.getElementById((String)links.get(i));
      rewriteLink(elt,"www.example.com");
    }
  }
  /** 
 * Block all accesses out of the website that don't match 'sitename'
 * @param element An anchor link element
 * @param sitename name of the website to check. e.g. "www.example.com"
 */
  private void rewriteLink(  Element element,  String sitename){
    String href=DOM.getElementProperty(element,"href");
    if (null == href) {
      return;
    }
    if (href.startsWith("http://") && !href.startsWith("http://" + sitename + "/")) {
      DOM.setElementProperty(element,"href","http://" + sitename + "/Blocked.html");
    }
  }
}

Cannot find matching typeVariable for: BodyElement elt
For node: BodyElement elt expected fqn: com.google.gwt.dom.client.BodyElement with type: Type3 got: com.google.gwt.dom.client.BodyElement
For node: BodyElement expected fqn: com.google.gwt.dom.client.BodyElement with type: Type3 got: com.google.gwt.dom.client.BodyElement
For node: BodyElement expected fqn: com.google.gwt.dom.client.BodyElement with type: Type3 got: com.google.gwt.dom.client.BodyElement
For node: elt expected fqn: com.google.gwt.dom.client.BodyElement with type: Type3 got: com.google.gwt.dom.client.BodyElement
Cannot find matching typeVariable for: ArrayList list
For node: ArrayList list expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
For node: list expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: rewriteLinksIterative
Cannot find matching typeVariable for: private void rewriteLinksIterative(){
  ArrayList links=new ArrayList();
  putElementLinkIDsInList(Document.get().getBody(),links);
  for (int i=0; i < links.size(); i++) {
    Element elt=DOM.getElementById((String)links.get(i));
    rewriteLink(elt,"www.example.com");
  }
}

Cannot find matching typeVariable for: public class gwt_class_49 {
  private void putElementLinkIDsInList(  BodyElement elt,  ArrayList list){
  }
  private void rewriteLinksIterative(){
    ArrayList links=new ArrayList();
    putElementLinkIDsInList(Document.get().getBody(),links);
    for (int i=0; i < links.size(); i++) {
      Element elt=DOM.getElementById((String)links.get(i));
      rewriteLink(elt,"www.example.com");
    }
  }
  /** 
 * Block all accesses out of the website that don't match 'sitename'
 * @param element An anchor link element
 * @param sitename name of the website to check. e.g. "www.example.com"
 */
  private void rewriteLink(  Element element,  String sitename){
    String href=DOM.getElementProperty(element,"href");
    if (null == href) {
      return;
    }
    if (href.startsWith("http://") && !href.startsWith("http://" + sitename + "/")) {
      DOM.setElementProperty(element,"href","http://" + sitename + "/Blocked.html");
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.google.gwt.dom.client.BodyElement;
import com.google.gwt.dom.client.Document;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.Element;
public class gwt_class_49 {
  private void putElementLinkIDsInList(  BodyElement elt,  ArrayList list){
  }
  private void rewriteLinksIterative(){
    ArrayList links=new ArrayList();
    putElementLinkIDsInList(Document.get().getBody(),links);
    for (int i=0; i < links.size(); i++) {
      Element elt=DOM.getElementById((String)links.get(i));
      rewriteLink(elt,"www.example.com");
    }
  }
  /** 
 * Block all accesses out of the website that don't match 'sitename'
 * @param element An anchor link element
 * @param sitename name of the website to check. e.g. "www.example.com"
 */
  private void rewriteLink(  Element element,  String sitename){
    String href=DOM.getElementProperty(element,"href");
    if (null == href) {
      return;
    }
    if (href.startsWith("http://") && !href.startsWith("http://" + sitename + "/")) {
      DOM.setElementProperty(element,"href","http://" + sitename + "/Blocked.html");
    }
  }
}

For node: ArrayList expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
Cannot find matching typeVariable for: links=new ArrayList()
For node: links=new ArrayList() expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
For node: links expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
For node: new ArrayList() expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
For node: putElementLinkIDsInList(Document.get().getBody(),links) expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: putElementLinkIDsInList
For node: putElementLinkIDsInList expected fqn: void with type: Type2 got: void
For node: Document.get().getBody() expected fqn: com.google.gwt.dom.client.BodyElement with type: Type9 got: com.google.gwt.dom.client.BodyElement
For node: Document.get() expected fqn: com.google.gwt.dom.client.Document with type: Type7 got: com.google.gwt.dom.client.Document
For node: Document expected fqn: com.google.gwt.dom.client.Document with type: Type6 got: com.google.gwt.dom.client.Document
Cannot find matching typeVariable for: get
For node: get expected fqn: com.google.gwt.dom.client.Document with type: Type7 got: com.google.gwt.dom.client.Document
Cannot find matching typeVariable for: getBody
For node: getBody expected fqn: com.google.gwt.dom.client.BodyElement with type: Type9 got: com.google.gwt.dom.client.BodyElement
Cannot find matching typeVariable for: links
For node: links expected fqn: java.util.ArrayList with type: Type2 got: void
Cannot find matching typeVariable for: int i=0
Did not find solution for node: int i=0 with type Type11
Did not find solution for node: int with type Type11
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type11
Did not find solution for node: i with type Type11
For node: 0 expected fqn: int with type: Type12 got: byte
For node: i < links.size() expected fqn: boolean with type: Type15 got: boolean
Did not find solution for node: i with type Type11
For node: links.size() expected fqn: int with type: Type13 got: int
For node: links expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
Cannot find matching typeVariable for: size
For node: size expected fqn: int with type: Type13 got: int
Did not find solution for node: i++ with type Type11
Did not find solution for node: i with type Type11
For node: Element expected fqn: com.google.gwt.user.client.Element with type: Type17 got: com.google.gwt.user.client.Element
For node: Element expected fqn: com.google.gwt.user.client.Element with type: Type17 got: com.google.gwt.user.client.Element
Cannot find matching typeVariable for: elt=DOM.getElementById((String)links.get(i))
For node: elt=DOM.getElementById((String)links.get(i)) expected fqn: com.google.gwt.user.client.Element with type: Type17 got: com.google.gwt.user.client.Element
For node: elt expected fqn: com.google.gwt.user.client.Element with type: Type17 got: com.google.gwt.user.client.Element
For node: DOM.getElementById((String)links.get(i)) expected fqn: com.google.gwt.user.client.Element with type: Type23 got: com.google.gwt.user.client.Element
For node: DOM expected fqn: com.google.gwt.user.client.DOM with type: Type22 got: com.google.gwt.user.client.DOM
Cannot find matching typeVariable for: getElementById
For node: getElementById expected fqn: com.google.gwt.user.client.Element with type: Type23 got: com.google.gwt.user.client.Element
For node: (String)links.get(i) expected fqn: java.lang.String with type: Type18 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type18 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type18 got: java.lang.String
For node: links.get(i) expected fqn: java.lang.Object with type: Type19 got: java.lang.String
For node: links expected fqn: java.util.ArrayList with type: Type4 got: java.util.ArrayList
Cannot find matching typeVariable for: get
For node: get expected fqn: java.lang.Object with type: Type19 got: java.lang.String
Did not find solution for node: i with type Type11
For node: rewriteLink(elt,"www.example.com") expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: rewriteLink
For node: rewriteLink expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: elt
For node: elt expected fqn: com.google.gwt.user.client.Element with type: Type2 got: void
For node: "www.example.com" expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: rewriteLink
Cannot find matching typeVariable for: /** 
 * Block all accesses out of the website that don't match 'sitename'
 * @param element An anchor link element
 * @param sitename name of the website to check. e.g. "www.example.com"
 */
private void rewriteLink(Element element,String sitename){
  String href=DOM.getElementProperty(element,"href");
  if (null == href) {
    return;
  }
  if (href.startsWith("http://") && !href.startsWith("http://" + sitename + "/")) {
    DOM.setElementProperty(element,"href","http://" + sitename + "/Blocked.html");
  }
}

Cannot find matching typeVariable for: public class gwt_class_49 {
  private void putElementLinkIDsInList(  BodyElement elt,  ArrayList list){
  }
  private void rewriteLinksIterative(){
    ArrayList links=new ArrayList();
    putElementLinkIDsInList(Document.get().getBody(),links);
    for (int i=0; i < links.size(); i++) {
      Element elt=DOM.getElementById((String)links.get(i));
      rewriteLink(elt,"www.example.com");
    }
  }
  /** 
 * Block all accesses out of the website that don't match 'sitename'
 * @param element An anchor link element
 * @param sitename name of the website to check. e.g. "www.example.com"
 */
  private void rewriteLink(  Element element,  String sitename){
    String href=DOM.getElementProperty(element,"href");
    if (null == href) {
      return;
    }
    if (href.startsWith("http://") && !href.startsWith("http://" + sitename + "/")) {
      DOM.setElementProperty(element,"href","http://" + sitename + "/Blocked.html");
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.google.gwt.dom.client.BodyElement;
import com.google.gwt.dom.client.Document;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.Element;
public class gwt_class_49 {
  private void putElementLinkIDsInList(  BodyElement elt,  ArrayList list){
  }
  private void rewriteLinksIterative(){
    ArrayList links=new ArrayList();
    putElementLinkIDsInList(Document.get().getBody(),links);
    for (int i=0; i < links.size(); i++) {
      Element elt=DOM.getElementById((String)links.get(i));
      rewriteLink(elt,"www.example.com");
    }
  }
  /** 
 * Block all accesses out of the website that don't match 'sitename'
 * @param element An anchor link element
 * @param sitename name of the website to check. e.g. "www.example.com"
 */
  private void rewriteLink(  Element element,  String sitename){
    String href=DOM.getElementProperty(element,"href");
    if (null == href) {
      return;
    }
    if (href.startsWith("http://") && !href.startsWith("http://" + sitename + "/")) {
      DOM.setElementProperty(element,"href","http://" + sitename + "/Blocked.html");
    }
  }
}

Cannot find matching typeVariable for: Element element
For node: Element element expected fqn: com.google.gwt.user.client.Element with type: Type17 got: com.google.gwt.user.client.Element
For node: Element expected fqn: com.google.gwt.user.client.Element with type: Type17 got: com.google.gwt.user.client.Element
For node: Element expected fqn: com.google.gwt.user.client.Element with type: Type17 got: com.google.gwt.user.client.Element
For node: element expected fqn: com.google.gwt.user.client.Element with type: Type17 got: com.google.gwt.user.client.Element
Cannot find matching typeVariable for: String sitename
For node: String sitename expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: sitename expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type26 got: java.lang.String
Cannot find matching typeVariable for: href=DOM.getElementProperty(element,"href")
For node: href=DOM.getElementProperty(element,"href") expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: href expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: DOM.getElementProperty(element,"href") expected fqn: java.lang.String with type: Type28 got: java.lang.String
For node: DOM expected fqn: com.google.gwt.user.client.DOM with type: Type27 got: com.google.gwt.user.client.DOM
Cannot find matching typeVariable for: getElementProperty
For node: getElementProperty expected fqn: java.lang.String with type: Type28 got: java.lang.String
For node: element expected fqn: com.google.gwt.user.client.Element with type: Type17 got: com.google.gwt.user.client.Element
For node: "href" expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: null == href expected fqn: boolean with type: Type15 got: boolean
Did not find solution for node: null with type Type32
For node: href expected fqn: java.lang.String with type: Type26 got: java.lang.String
Did not find solution for node: href.startsWith("http://") && !href.startsWith("http://" + sitename + "/") with type Type33
Did not find solution for node: href.startsWith("http://") with type Type33
For node: href expected fqn: java.lang.String with type: Type26 got: java.lang.String
Cannot find matching typeVariable for: startsWith
Did not find solution for node: startsWith with type Type33
For node: "http://" expected fqn: java.lang.String with type: Type26 got: java.lang.String
Did not find solution for node: !href.startsWith("http://" + sitename + "/") with type Type35
Did not find solution for node: href.startsWith("http://" + sitename + "/") with type Type35
For node: href expected fqn: java.lang.String with type: Type26 got: java.lang.String
Cannot find matching typeVariable for: startsWith
Did not find solution for node: startsWith with type Type35
For node: "http://" + sitename + "/" expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: "http://" expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: sitename expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: "/" expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: DOM.setElementProperty(element,"href","http://" + sitename + "/Blocked.html") expected fqn: void with type: Type36 got: void
For node: DOM expected fqn: com.google.gwt.user.client.DOM with type: Type27 got: com.google.gwt.user.client.DOM
Cannot find matching typeVariable for: setElementProperty
For node: setElementProperty expected fqn: void with type: Type36 got: void
For node: element expected fqn: com.google.gwt.user.client.Element with type: Type17 got: com.google.gwt.user.client.Element
For node: "href" expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: "http://" + sitename + "/Blocked.html" expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: "http://" expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: sitename expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: "/Blocked.html" expected fqn: java.lang.String with type: Type26 got: java.lang.String
{Checked=98, Analyzed=83, Unsolved=15, Incorrect=5, Correct=78}
boolean=InfixExpression: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
gwt.=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
gwt.=SimpleName: {Checked=16, Analyzed=16, Unsolved=0, Incorrect=1, Correct=15}
gwt.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
gwt.=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
gwt.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=PostfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=SimpleName: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=0, Correct=1}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
java=SimpleName: {Checked=20, Analyzed=20, Unsolved=0, Incorrect=2, Correct=18}
java=SimpleType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=StringLiteral: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
java=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
null=NullLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
Total stats
{Checked=98, Analyzed=83, Unsolved=15, Incorrect=5, Correct=78}
boolean=InfixExpression: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
gwt.=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
gwt.=SimpleName: {Checked=16, Analyzed=16, Unsolved=0, Incorrect=1, Correct=15}
gwt.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
gwt.=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
gwt.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=PostfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=SimpleName: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=0, Correct=1}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
java=SimpleName: {Checked=20, Analyzed=20, Unsolved=0, Incorrect=2, Correct=18}
java=SimpleType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=StringLiteral: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
java=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
null=NullLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
boolean,InfixExpression,2,3,2,0,1
boolean,MethodInvocation,0,2,0,0,2
boolean,PrefixExpression,0,1,0,0,1
boolean,SimpleName,0,2,0,0,2
gwt.,MethodInvocation,3,3,3,0,0
gwt.,SimpleName,16,16,15,1,0
gwt.,SimpleType,3,3,3,0,0
gwt.,SingleVariableDeclaration,2,2,2,0,0
gwt.,VariableDeclarationFragment,1,1,1,0,0
int,MethodInvocation,1,1,1,0,0
int,NumberLiteral,1,1,0,1,0
int,PostfixExpression,0,1,0,0,1
int,PrimitiveType,0,1,0,0,1
int,SimpleName,1,5,1,0,4
int,VariableDeclarationExpression,0,1,0,0,1
int,VariableDeclarationFragment,0,1,0,0,1
java,CastExpression,1,1,1,0,0
java,ClassInstanceCreation,1,1,1,0,0
java,InfixExpression,2,2,2,0,0
java,MethodInvocation,2,2,1,1,0
java,SimpleName,20,20,18,2,0
java,SimpleType,6,6,6,0,0
java,SingleVariableDeclaration,2,2,2,0,0
java,StringLiteral,8,8,8,0,0
java,VariableDeclarationFragment,2,2,2,0,0
null,NullLiteral,0,1,0,0,1
void,MethodInvocation,3,3,3,0,0
void,PrimitiveType,3,3,3,0,0
void,SimpleName,3,3,3,0,0
