echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_23.java
Expect check=86
Cannot find matching typeVariable for: public class xstream_class_23 {
@XStreamAlias("test") public class TestObject {
    private String foo;
    public String getFoo(){
      return foo.toLowerCase();
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
  }
  public void test() throws Exception {
    XStream x=new XStream(new XppDriver());
    x.autodetectAnnotations(true);
    x.processAnnotations(TestObject.class);
    x.registerConverter(new JavaBeanConverter(x.getMapper()));
    TestObject o=new TestObject();
    o.setFoo("BAR");
    String xml=x.toXML(o);
    System.out.println(xml);
  }
}

Cannot find matching typeVariable for: xstream_class_23
Cannot find matching typeVariable for: public class xstream_class_23 {
@XStreamAlias("test") public class TestObject {
    private String foo;
    public String getFoo(){
      return foo.toLowerCase();
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
  }
  public void test() throws Exception {
    XStream x=new XStream(new XppDriver());
    x.autodetectAnnotations(true);
    x.processAnnotations(TestObject.class);
    x.registerConverter(new JavaBeanConverter(x.getMapper()));
    TestObject o=new TestObject();
    o.setFoo("BAR");
    String xml=x.toXML(o);
    System.out.println(xml);
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.javabean.JavaBeanConverter;
import com.thoughtworks.xstream.io.xml.XppDriver;
public class xstream_class_23 {
@XStreamAlias("test") public class TestObject {
    private String foo;
    public String getFoo(){
      return foo.toLowerCase();
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
  }
  public void test() throws Exception {
    XStream x=new XStream(new XppDriver());
    x.autodetectAnnotations(true);
    x.processAnnotations(TestObject.class);
    x.registerConverter(new JavaBeanConverter(x.getMapper()));
    TestObject o=new TestObject();
    o.setFoo("BAR");
    String xml=x.toXML(o);
    System.out.println(xml);
  }
}

Cannot find matching typeVariable for: @XStreamAlias("test") public class TestObject {
  private String foo;
  public String getFoo(){
    return foo.toLowerCase();
  }
  public void setFoo(  String foo){
    this.foo=foo;
  }
}

For node: @XStreamAlias("test") expected fqn: com.thoughtworks.xstream.annotations.XStreamAlias with type: Type6 got: com.thoughtworks.xstream.annotations.XStreamAlias
For node: XStreamAlias expected fqn: com.thoughtworks.xstream.annotations.XStreamAlias with type: Type6 got: com.thoughtworks.xstream.annotations.XStreamAlias
For node: "test" expected fqn: java.lang.String with type: Type5 got: java.lang.String
Did not find solution for node: TestObject with type Type2
Did not find solution for node: String with type Type4
Did not find solution for node: String with type Type4
Cannot find matching typeVariable for: foo
Did not find solution for node: foo with type Type4
Cannot find matching typeVariable for: foo
Cannot find matching typeVariable for: private String foo;

Cannot find matching typeVariable for: @XStreamAlias("test") public class TestObject {
  private String foo;
  public String getFoo(){
    return foo.toLowerCase();
  }
  public void setFoo(  String foo){
    this.foo=foo;
  }
}

Cannot find matching typeVariable for: public class xstream_class_23 {
@XStreamAlias("test") public class TestObject {
    private String foo;
    public String getFoo(){
      return foo.toLowerCase();
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
  }
  public void test() throws Exception {
    XStream x=new XStream(new XppDriver());
    x.autodetectAnnotations(true);
    x.processAnnotations(TestObject.class);
    x.registerConverter(new JavaBeanConverter(x.getMapper()));
    TestObject o=new TestObject();
    o.setFoo("BAR");
    String xml=x.toXML(o);
    System.out.println(xml);
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.javabean.JavaBeanConverter;
import com.thoughtworks.xstream.io.xml.XppDriver;
public class xstream_class_23 {
@XStreamAlias("test") public class TestObject {
    private String foo;
    public String getFoo(){
      return foo.toLowerCase();
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
  }
  public void test() throws Exception {
    XStream x=new XStream(new XppDriver());
    x.autodetectAnnotations(true);
    x.processAnnotations(TestObject.class);
    x.registerConverter(new JavaBeanConverter(x.getMapper()));
    TestObject o=new TestObject();
    o.setFoo("BAR");
    String xml=x.toXML(o);
    System.out.println(xml);
  }
}

Did not find solution for node: String with type Type4
Did not find solution for node: String with type Type4
Cannot find matching typeVariable for: getFoo
Cannot find matching typeVariable for: public String getFoo(){
  return foo.toLowerCase();
}

Cannot find matching typeVariable for: @XStreamAlias("test") public class TestObject {
  private String foo;
  public String getFoo(){
    return foo.toLowerCase();
  }
  public void setFoo(  String foo){
    this.foo=foo;
  }
}

Cannot find matching typeVariable for: public class xstream_class_23 {
@XStreamAlias("test") public class TestObject {
    private String foo;
    public String getFoo(){
      return foo.toLowerCase();
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
  }
  public void test() throws Exception {
    XStream x=new XStream(new XppDriver());
    x.autodetectAnnotations(true);
    x.processAnnotations(TestObject.class);
    x.registerConverter(new JavaBeanConverter(x.getMapper()));
    TestObject o=new TestObject();
    o.setFoo("BAR");
    String xml=x.toXML(o);
    System.out.println(xml);
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.javabean.JavaBeanConverter;
import com.thoughtworks.xstream.io.xml.XppDriver;
public class xstream_class_23 {
@XStreamAlias("test") public class TestObject {
    private String foo;
    public String getFoo(){
      return foo.toLowerCase();
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
  }
  public void test() throws Exception {
    XStream x=new XStream(new XppDriver());
    x.autodetectAnnotations(true);
    x.processAnnotations(TestObject.class);
    x.registerConverter(new JavaBeanConverter(x.getMapper()));
    TestObject o=new TestObject();
    o.setFoo("BAR");
    String xml=x.toXML(o);
    System.out.println(xml);
  }
}

Did not find solution for node: foo.toLowerCase() with type Type7
Did not find solution for node: foo with type Type4
Cannot find matching typeVariable for: toLowerCase
Did not find solution for node: toLowerCase with type Type7
For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: setFoo
Cannot find matching typeVariable for: public void setFoo(String foo){
  this.foo=foo;
}

Cannot find matching typeVariable for: @XStreamAlias("test") public class TestObject {
  private String foo;
  public String getFoo(){
    return foo.toLowerCase();
  }
  public void setFoo(  String foo){
    this.foo=foo;
  }
}

Cannot find matching typeVariable for: public class xstream_class_23 {
@XStreamAlias("test") public class TestObject {
    private String foo;
    public String getFoo(){
      return foo.toLowerCase();
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
  }
  public void test() throws Exception {
    XStream x=new XStream(new XppDriver());
    x.autodetectAnnotations(true);
    x.processAnnotations(TestObject.class);
    x.registerConverter(new JavaBeanConverter(x.getMapper()));
    TestObject o=new TestObject();
    o.setFoo("BAR");
    String xml=x.toXML(o);
    System.out.println(xml);
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.javabean.JavaBeanConverter;
import com.thoughtworks.xstream.io.xml.XppDriver;
public class xstream_class_23 {
@XStreamAlias("test") public class TestObject {
    private String foo;
    public String getFoo(){
      return foo.toLowerCase();
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
  }
  public void test() throws Exception {
    XStream x=new XStream(new XppDriver());
    x.autodetectAnnotations(true);
    x.processAnnotations(TestObject.class);
    x.registerConverter(new JavaBeanConverter(x.getMapper()));
    TestObject o=new TestObject();
    o.setFoo("BAR");
    String xml=x.toXML(o);
    System.out.println(xml);
  }
}

Cannot find matching typeVariable for: String foo
For node: String foo expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: foo expected fqn: java.lang.String with type: Type5 got: java.lang.String
Did not find solution for node: this.foo=foo with type Type4
Did not find solution for node: this.foo with type Type4
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: foo
Did not find solution for node: foo with type Type4
Cannot find matching typeVariable for: foo
Did not find solution for node: foo with type Type4
For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: test
Cannot find matching typeVariable for: public void test() throws Exception {
  XStream x=new XStream(new XppDriver());
  x.autodetectAnnotations(true);
  x.processAnnotations(TestObject.class);
  x.registerConverter(new JavaBeanConverter(x.getMapper()));
  TestObject o=new TestObject();
  o.setFoo("BAR");
  String xml=x.toXML(o);
  System.out.println(xml);
}

Cannot find matching typeVariable for: public class xstream_class_23 {
@XStreamAlias("test") public class TestObject {
    private String foo;
    public String getFoo(){
      return foo.toLowerCase();
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
  }
  public void test() throws Exception {
    XStream x=new XStream(new XppDriver());
    x.autodetectAnnotations(true);
    x.processAnnotations(TestObject.class);
    x.registerConverter(new JavaBeanConverter(x.getMapper()));
    TestObject o=new TestObject();
    o.setFoo("BAR");
    String xml=x.toXML(o);
    System.out.println(xml);
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.javabean.JavaBeanConverter;
import com.thoughtworks.xstream.io.xml.XppDriver;
public class xstream_class_23 {
@XStreamAlias("test") public class TestObject {
    private String foo;
    public String getFoo(){
      return foo.toLowerCase();
    }
    public void setFoo(    String foo){
      this.foo=foo;
    }
  }
  public void test() throws Exception {
    XStream x=new XStream(new XppDriver());
    x.autodetectAnnotations(true);
    x.processAnnotations(TestObject.class);
    x.registerConverter(new JavaBeanConverter(x.getMapper()));
    TestObject o=new TestObject();
    o.setFoo("BAR");
    String xml=x.toXML(o);
    System.out.println(xml);
  }
}

For node: Exception expected fqn: java.lang.Exception with type: Type9 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type9 got: java.lang.Exception
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: x=new XStream(new XppDriver())
For node: x=new XStream(new XppDriver()) expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: x expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: new XStream(new XppDriver()) expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: new XppDriver() expected fqn: com.thoughtworks.xstream.io.xml.XppDriver with type: Type11 got: com.thoughtworks.xstream.io.xml.XppDriver
For node: XppDriver expected fqn: com.thoughtworks.xstream.io.xml.XppDriver with type: Type11 got: com.thoughtworks.xstream.io.xml.XppDriver
For node: XppDriver expected fqn: com.thoughtworks.xstream.io.xml.XppDriver with type: Type11 got: com.thoughtworks.xstream.io.xml.XppDriver
For node: x.autodetectAnnotations(true) expected fqn: void with type: Type16 got: void
For node: x expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: autodetectAnnotations
For node: autodetectAnnotations expected fqn: void with type: Type16 got: void
For node: true expected fqn: boolean with type: Type15 got: boolean
For node: x.processAnnotations(TestObject.class) expected fqn: void with type: Type20 got: void
For node: x expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: processAnnotations
For node: processAnnotations expected fqn: void with type: Type20 got: void
For node: TestObject.class expected fqn: java.lang.Class<xstream_class_23.TestObject> with type: Type19 got: java.lang.Class
Did not find solution for node: TestObject with type Type2
Did not find solution for node: TestObject with type Type2
For node: x.registerConverter(new JavaBeanConverter(x.getMapper())) expected fqn: void with type: Type28 got: void
For node: x expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: registerConverter
For node: registerConverter expected fqn: void with type: Type28 got: void
For node: new JavaBeanConverter(x.getMapper()) expected fqn: com.thoughtworks.xstream.converters.javabean.JavaBeanConverter with type: Type23 got: com.thoughtworks.xstream.converters.javabean.JavaBeanConverter
For node: JavaBeanConverter expected fqn: com.thoughtworks.xstream.converters.javabean.JavaBeanConverter with type: Type23 got: com.thoughtworks.xstream.converters.javabean.JavaBeanConverter
For node: JavaBeanConverter expected fqn: com.thoughtworks.xstream.converters.javabean.JavaBeanConverter with type: Type23 got: com.thoughtworks.xstream.converters.javabean.JavaBeanConverter
For node: x.getMapper() expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type24 got: com.thoughtworks.xstream.mapper.Mapper
For node: x expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: getMapper
For node: getMapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type24 got: com.thoughtworks.xstream.mapper.Mapper
Did not find solution for node: TestObject with type Type2
Did not find solution for node: TestObject with type Type2
Cannot find matching typeVariable for: o=new TestObject()
Did not find solution for node: o=new TestObject() with type Type2
Did not find solution for node: o with type Type2
Did not find solution for node: new TestObject() with type Type2
Did not find solution for node: TestObject with type Type2
Did not find solution for node: TestObject with type Type2
Did not find solution for node: o.setFoo("BAR") with type Type32
Did not find solution for node: o with type Type2
Cannot find matching typeVariable for: setFoo
Did not find solution for node: setFoo with type Type32
For node: "BAR" expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: xml=x.toXML(o)
For node: xml=x.toXML(o) expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: xml expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: x.toXML(o) expected fqn: java.lang.String with type: Type35 got: java.lang.String
For node: x expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: toXML
For node: toXML expected fqn: java.lang.String with type: Type35 got: java.lang.String
Did not find solution for node: o with type Type2
For node: System.out.println(xml) expected fqn: void with type: Type40 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type40 got: void
For node: System expected fqn: java.lang.System with type: Type38 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type39 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type40 got: void
For node: xml expected fqn: java.lang.String with type: Type5 got: java.lang.String
{Checked=79, Analyzed=52, Unsolved=27, Incorrect=2, Correct=50}
=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=7, Analyzed=0, Unsolved=7, Incorrect=0, Correct=0}
=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=ThisExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
com.thoughtworks.xstream.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
com.thoughtworks.xstream.=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=FieldAccess: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=SimpleName: {Checked=16, Analyzed=10, Unsolved=6, Incorrect=0, Correct=10}
java=SimpleType: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=0, Correct=4}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=TypeLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
void=MethodInvocation: {Checked=5, Analyzed=4, Unsolved=1, Incorrect=0, Correct=4}
void=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=SimpleName: {Checked=5, Analyzed=4, Unsolved=1, Incorrect=0, Correct=4}
Total stats
{Checked=79, Analyzed=52, Unsolved=27, Incorrect=2, Correct=50}
=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=7, Analyzed=0, Unsolved=7, Incorrect=0, Correct=0}
=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=ThisExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
com.thoughtworks.xstream.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
com.thoughtworks.xstream.=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=FieldAccess: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=SimpleName: {Checked=16, Analyzed=10, Unsolved=6, Incorrect=0, Correct=10}
java=SimpleType: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=0, Correct=4}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=TypeLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
void=MethodInvocation: {Checked=5, Analyzed=4, Unsolved=1, Incorrect=0, Correct=4}
void=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=SimpleName: {Checked=5, Analyzed=4, Unsolved=1, Incorrect=0, Correct=4}
,ClassInstanceCreation,0,1,0,0,1
,SimpleName,0,7,0,0,7
,SimpleType,0,3,0,0,3
,ThisExpression,0,1,0,0,1
,VariableDeclarationFragment,0,1,0,0,1
boolean,BooleanLiteral,1,1,1,0,0
com.thoughtworks.xstream.,ClassInstanceCreation,2,2,2,0,0
com.thoughtworks.xstream.,MethodInvocation,1,1,1,0,0
com.thoughtworks.xstream.,SimpleName,11,11,11,0,0
com.thoughtworks.xstream.,SimpleType,3,3,3,0,0
com.thoughtworks.xstream.,SingleMemberAnnotation,1,1,1,0,0
com.thoughtworks.xstream.,VariableDeclarationFragment,1,1,1,0,0
java,Assignment,0,1,0,0,1
java,ClassInstanceCreation,1,1,1,0,0
java,FieldAccess,0,1,0,0,1
java,MethodInvocation,1,2,1,0,1
java,QualifiedName,1,1,0,1,0
java,SimpleName,10,16,10,0,6
java,SimpleType,4,6,4,0,2
java,SingleVariableDeclaration,1,1,1,0,0
java,StringLiteral,2,2,2,0,0
java,TypeLiteral,1,1,0,1,0
java,VariableDeclarationFragment,1,2,1,0,1
void,MethodInvocation,4,5,4,0,1
void,PrimitiveType,2,2,2,0,0
void,SimpleName,4,5,4,0,1
