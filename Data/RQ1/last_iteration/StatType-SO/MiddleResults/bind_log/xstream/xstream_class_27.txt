echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_27.java
Expect check=84
Cannot find matching typeVariable for: public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: xstream_class_27
Cannot find matching typeVariable for: public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: import org.apache.commons.lang.WordUtils;
import org.apache.http.client.fluent.Content;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: private class ObjectContentConverter implements Converter {
  XStream xStream;
  private ObjectContentConverter(  XStream xStream){
    this.xStream=xStream;
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
    xStream.aliasField(className,Content.class,"objectContent");
    xStream.marshal(source,writer);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    return null;
  }
  @Override public boolean canConvert(  Class type){
    return true;
  }
}

Did not find solution for node: ObjectContentConverter with type Type1
For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type2 got: com.thoughtworks.xstream.converters.Converter
For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type2 got: com.thoughtworks.xstream.converters.Converter
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: xStream
For node: xStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: xStream
Cannot find matching typeVariable for: XStream xStream;

Cannot find matching typeVariable for: private class ObjectContentConverter implements Converter {
  XStream xStream;
  private ObjectContentConverter(  XStream xStream){
    this.xStream=xStream;
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
    xStream.aliasField(className,Content.class,"objectContent");
    xStream.marshal(source,writer);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    return null;
  }
  @Override public boolean canConvert(  Class type){
    return true;
  }
}

Cannot find matching typeVariable for: public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: import org.apache.commons.lang.WordUtils;
import org.apache.http.client.fluent.Content;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: ObjectContentConverter
Cannot find matching typeVariable for: private ObjectContentConverter(XStream xStream){
  this.xStream=xStream;
}

Cannot find matching typeVariable for: private class ObjectContentConverter implements Converter {
  XStream xStream;
  private ObjectContentConverter(  XStream xStream){
    this.xStream=xStream;
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
    xStream.aliasField(className,Content.class,"objectContent");
    xStream.marshal(source,writer);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    return null;
  }
  @Override public boolean canConvert(  Class type){
    return true;
  }
}

Cannot find matching typeVariable for: public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: import org.apache.commons.lang.WordUtils;
import org.apache.http.client.fluent.Content;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: XStream xStream
For node: XStream xStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
For node: xStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
For node: this.xStream=xStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
For node: this.xStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: xStream
For node: xStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: xStream
For node: xStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
For node: @Override expected fqn: java.lang.Override with type: Type19 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type19 got: java.lang.Override
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: marshal
Cannot find matching typeVariable for: @Override public void marshal(Object source,HierarchicalStreamWriter writer,MarshallingContext context){
  String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
  xStream.aliasField(className,Content.class,"objectContent");
  xStream.marshal(source,writer);
}

Cannot find matching typeVariable for: private class ObjectContentConverter implements Converter {
  XStream xStream;
  private ObjectContentConverter(  XStream xStream){
    this.xStream=xStream;
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
    xStream.aliasField(className,Content.class,"objectContent");
    xStream.marshal(source,writer);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    return null;
  }
  @Override public boolean canConvert(  Class type){
    return true;
  }
}

Cannot find matching typeVariable for: public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: import org.apache.commons.lang.WordUtils;
import org.apache.http.client.fluent.Content;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: Object source
For node: Object source expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: source expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
Cannot find matching typeVariable for: HierarchicalStreamWriter writer
For node: HierarchicalStreamWriter writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type20 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type20 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type20 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type20 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: MarshallingContext context
For node: MarshallingContext context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type21 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type21 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type21 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type21 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: String expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type22 got: java.lang.String
Cannot find matching typeVariable for: className=WordUtils.uncapitalize(source.getClass().getSimpleName())
For node: className=WordUtils.uncapitalize(source.getClass().getSimpleName()) expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: className expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: WordUtils.uncapitalize(source.getClass().getSimpleName()) expected fqn: java.lang.String with type: Type28 got: java.lang.String
For node: WordUtils expected fqn: org.apache.commons.lang.WordUtils with type: Type27 got: org.apache.commons.lang.WordUtils
Cannot find matching typeVariable for: uncapitalize
For node: uncapitalize expected fqn: java.lang.String with type: Type28 got: java.lang.String
For node: source.getClass().getSimpleName() expected fqn: java.lang.String with type: Type25 got: java.lang.String
For node: source.getClass() expected fqn: java.lang.Class<> with type: Type23 got: java.lang.Class
For node: source expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
Cannot find matching typeVariable for: getClass
For node: getClass expected fqn: java.lang.Class<? extends java.lang.Object> with type: Type23 got: java.lang.Class
Cannot find matching typeVariable for: getSimpleName
For node: getSimpleName expected fqn: java.lang.String with type: Type25 got: java.lang.String
For node: xStream.aliasField(className,Content.class,"objectContent") expected fqn: void with type: Type34 got: void
For node: xStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: aliasField
For node: aliasField expected fqn: void with type: Type34 got: void
For node: className expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: Content.class expected fqn: java.lang.Class<org.apache.http.client.fluent.Content> with type: Type32 got: java.lang.Class
Did not find solution for node: Content with type Type31
Did not find solution for node: Content with type Type31
For node: "objectContent" expected fqn: java.lang.String with type: Type33 got: java.lang.String
For node: xStream.marshal(source,writer) expected fqn: void with type: Type39 got: void
For node: xStream expected fqn: com.thoughtworks.xstream.XStream with type: Type18 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: marshal
For node: marshal expected fqn: void with type: Type39 got: void
For node: source expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type20 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: @Override expected fqn: java.lang.Override with type: Type19 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type19 got: java.lang.Override
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
Cannot find matching typeVariable for: unmarshal
Cannot find matching typeVariable for: @Override public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context){
  return null;
}

Cannot find matching typeVariable for: private class ObjectContentConverter implements Converter {
  XStream xStream;
  private ObjectContentConverter(  XStream xStream){
    this.xStream=xStream;
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
    xStream.aliasField(className,Content.class,"objectContent");
    xStream.marshal(source,writer);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    return null;
  }
  @Override public boolean canConvert(  Class type){
    return true;
  }
}

Cannot find matching typeVariable for: public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: import org.apache.commons.lang.WordUtils;
import org.apache.http.client.fluent.Content;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: HierarchicalStreamReader reader
For node: HierarchicalStreamReader reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type43 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type43 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type43 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type43 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: UnmarshallingContext context
For node: UnmarshallingContext context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type44 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type44 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type44 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type44 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: null expected fqn: null with type: Type45 got: java.lang.Object
For node: @Override expected fqn: java.lang.Override with type: Type19 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type19 got: java.lang.Override
For node: boolean expected fqn: boolean with type: Type5 got: boolean
Cannot find matching typeVariable for: canConvert
Cannot find matching typeVariable for: @Override public boolean canConvert(Class type){
  return true;
}

Cannot find matching typeVariable for: private class ObjectContentConverter implements Converter {
  XStream xStream;
  private ObjectContentConverter(  XStream xStream){
    this.xStream=xStream;
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
    xStream.aliasField(className,Content.class,"objectContent");
    xStream.marshal(source,writer);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    return null;
  }
  @Override public boolean canConvert(  Class type){
    return true;
  }
}

Cannot find matching typeVariable for: public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: import org.apache.commons.lang.WordUtils;
import org.apache.http.client.fluent.Content;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_27 {
private class ObjectContentConverter implements Converter {
    XStream xStream;
    private ObjectContentConverter(    XStream xStream){
      this.xStream=xStream;
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      String className=WordUtils.uncapitalize(source.getClass().getSimpleName());
      xStream.aliasField(className,Content.class,"objectContent");
      xStream.marshal(source,writer);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return null;
    }
    @Override public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: Class type
For node: Class type expected fqn: java.lang.Class with type: Type32 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type32 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type32 got: java.lang.Class
For node: type expected fqn: java.lang.Class with type: Type32 got: java.lang.Class
For node: true expected fqn: boolean with type: Type5 got: boolean
{Checked=76, Analyzed=72, Unsolved=4, Incorrect=4, Correct=68}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=FieldAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=17, Analyzed=17, Unsolved=0, Incorrect=0, Correct=17}
com.thoughtworks.xstream.=SimpleType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=1, Correct=2}
java=SimpleName: {Checked=16, Analyzed=16, Unsolved=0, Incorrect=1, Correct=15}
java=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=TypeLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
org.apache.=SimpleName: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
org.apache.=SimpleType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
Total stats
{Checked=76, Analyzed=72, Unsolved=4, Incorrect=4, Correct=68}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=FieldAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=17, Analyzed=17, Unsolved=0, Incorrect=0, Correct=17}
com.thoughtworks.xstream.=SimpleType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=1, Correct=2}
java=SimpleName: {Checked=16, Analyzed=16, Unsolved=0, Incorrect=1, Correct=15}
java=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=TypeLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
org.apache.=SimpleName: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
org.apache.=SimpleType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
,SimpleName,0,1,0,0,1
,ThisExpression,0,1,0,0,1
boolean,BooleanLiteral,1,1,1,0,0
boolean,PrimitiveType,1,1,1,0,0
com.thoughtworks.xstream.,Assignment,1,1,1,0,0
com.thoughtworks.xstream.,FieldAccess,1,1,1,0,0
com.thoughtworks.xstream.,SimpleName,17,17,17,0,0
com.thoughtworks.xstream.,SimpleType,7,7,7,0,0
com.thoughtworks.xstream.,SingleVariableDeclaration,5,5,5,0,0
com.thoughtworks.xstream.,VariableDeclarationFragment,1,1,1,0,0
java,MarkerAnnotation,3,3,3,0,0
java,MethodInvocation,3,3,2,1,0
java,SimpleName,16,16,15,1,0
java,SimpleType,4,4,4,0,0
java,SingleVariableDeclaration,2,2,2,0,0
java,StringLiteral,1,1,1,0,0
java,TypeLiteral,1,1,0,1,0
java,VariableDeclarationFragment,1,1,1,0,0
null,NullLiteral,1,1,0,1,0
org.apache.,SimpleName,1,2,1,0,1
org.apache.,SimpleType,0,1,0,0,1
void,MethodInvocation,2,2,2,0,0
void,PrimitiveType,1,1,1,0,0
void,SimpleName,2,2,2,0,0
