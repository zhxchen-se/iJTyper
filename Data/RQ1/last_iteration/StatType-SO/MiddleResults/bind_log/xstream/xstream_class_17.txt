echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_17.java
Expect check=330
Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: xstream_class_17
Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static void main(String[] args){
  XStream xstream=new XStream();
  xstream.autodetectAnnotations(true);
  xstream.registerConverter(new PositionConverter());
  final Position position=new Position();
  position.setTitle("The Title");
  position.setStartDate("The Start Date");
  position.setEndDate("The End Date");
  final String xml=xstream.toXML(position);
  System.out.println("Generated XML:");
  System.out.println(xml);
  final Position genPosition=(Position)xstream.fromXML(xml);
  System.out.println("Generated Position:");
  System.out.println("\tTitle: " + genPosition.getTitle());
  System.out.println("\tStart Date: " + genPosition.getStartDate());
  System.out.println("\tEnd Date: " + genPosition.getEndDate());
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: String[] args
For node: String[] args expected fqn: java.lang.String[] with type: Type9 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type9 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: args expected fqn: java.lang.String[] with type: Type9 got: java.lang.String[]
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: xstream=new XStream()
For node: xstream=new XStream() expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: new XStream() expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
For node: xstream.autodetectAnnotations(true) expected fqn: void with type: Type12 got: void
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: autodetectAnnotations
For node: autodetectAnnotations expected fqn: void with type: Type12 got: void
For node: true expected fqn: boolean with type: Type8 got: boolean
For node: xstream.registerConverter(new PositionConverter()) expected fqn: void with type: Type16 got: void
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: registerConverter
For node: registerConverter expected fqn: void with type: Type16 got: void
Did not find solution for node: new PositionConverter() with type Type3
Did not find solution for node: PositionConverter with type Type3
Did not find solution for node: PositionConverter with type Type3
Did not find solution for node: Position with type Type2
Did not find solution for node: Position with type Type2
Cannot find matching typeVariable for: position=new Position()
Did not find solution for node: position=new Position() with type Type2
Did not find solution for node: position with type Type2
Did not find solution for node: new Position() with type Type2
Did not find solution for node: Position with type Type2
Did not find solution for node: Position with type Type2
Did not find solution for node: position.setTitle("The Title") with type Type21
Did not find solution for node: position with type Type2
Cannot find matching typeVariable for: setTitle
Did not find solution for node: setTitle with type Type21
For node: "The Title" expected fqn: java.lang.String with type: Type20 got: java.lang.String
Did not find solution for node: position.setStartDate("The Start Date") with type Type24
Did not find solution for node: position with type Type2
Cannot find matching typeVariable for: setStartDate
Did not find solution for node: setStartDate with type Type24
For node: "The Start Date" expected fqn: java.lang.String with type: Type20 got: java.lang.String
Did not find solution for node: position.setEndDate("The End Date") with type Type27
Did not find solution for node: position with type Type2
Cannot find matching typeVariable for: setEndDate
Did not find solution for node: setEndDate with type Type27
For node: "The End Date" expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: xml=xstream.toXML(position)
For node: xml=xstream.toXML(position) expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: xml expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: xstream.toXML(position) expected fqn: java.lang.String with type: Type30 got: java.lang.String
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: toXML
For node: toXML expected fqn: java.lang.String with type: Type30 got: java.lang.String
Did not find solution for node: position with type Type2
For node: System.out.println("Generated XML:") expected fqn: void with type: Type35 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type35 got: void
For node: System expected fqn: java.lang.System with type: Type33 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type34 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type35 got: void
For node: "Generated XML:" expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: System.out.println(xml) expected fqn: void with type: Type37 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type37 got: void
For node: System expected fqn: java.lang.System with type: Type33 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type34 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type37 got: void
For node: xml expected fqn: java.lang.String with type: Type20 got: java.lang.String
Did not find solution for node: Position with type Type2
Did not find solution for node: Position with type Type2
Cannot find matching typeVariable for: genPosition=(Position)xstream.fromXML(xml)
Did not find solution for node: genPosition=(Position)xstream.fromXML(xml) with type Type2
Did not find solution for node: genPosition with type Type2
Did not find solution for node: (Position)xstream.fromXML(xml) with type Type2
Did not find solution for node: Position with type Type2
Did not find solution for node: Position with type Type2
For node: xstream.fromXML(xml) expected fqn: java.lang.Object with type: Type38 got: java.lang.Object
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type10 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: fromXML
For node: fromXML expected fqn: java.lang.Object with type: Type38 got: java.lang.Object
For node: xml expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: System.out.println("Generated Position:") expected fqn: void with type: Type37 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type37 got: void
For node: System expected fqn: java.lang.System with type: Type33 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type34 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type37 got: void
For node: "Generated Position:" expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: System.out.println("\tTitle: " + genPosition.getTitle()) expected fqn: void with type: Type37 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type37 got: void
For node: System expected fqn: java.lang.System with type: Type33 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type34 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type37 got: void
For node: "\tTitle: " + genPosition.getTitle() expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: "\tTitle: " expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: genPosition.getTitle() expected fqn: java.lang.String with type: Type41 got: java.lang.String
Did not find solution for node: genPosition with type Type2
Cannot find matching typeVariable for: getTitle
For node: getTitle expected fqn: java.lang.String with type: Type41 got: java.lang.String
For node: System.out.println("\tStart Date: " + genPosition.getStartDate()) expected fqn: void with type: Type37 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type37 got: void
For node: System expected fqn: java.lang.System with type: Type33 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type34 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type37 got: void
For node: "\tStart Date: " + genPosition.getStartDate() expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: "\tStart Date: " expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: genPosition.getStartDate() expected fqn: java.lang.String with type: Type43 got: java.lang.String
Did not find solution for node: genPosition with type Type2
Cannot find matching typeVariable for: getStartDate
For node: getStartDate expected fqn: java.lang.String with type: Type43 got: java.lang.String
For node: System.out.println("\tEnd Date: " + genPosition.getEndDate()) expected fqn: void with type: Type37 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type37 got: void
For node: System expected fqn: java.lang.System with type: Type33 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type34 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type37 got: void
For node: "\tEnd Date: " + genPosition.getEndDate() expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: "\tEnd Date: " expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: genPosition.getEndDate() expected fqn: java.lang.String with type: Type45 got: java.lang.String
Did not find solution for node: genPosition with type Type2
Cannot find matching typeVariable for: getEndDate
For node: getEndDate expected fqn: java.lang.String with type: Type45 got: java.lang.String
Cannot find matching typeVariable for: @XStreamAlias("Position") private static class Position {
  public String getEndDate(){
    return endDate;
  }
  public void setEndDate(  String endDate){
    this.endDate=endDate;
  }
  public String getStartDate(){
    return startDate;
  }
  public void setStartDate(  String startDate){
    this.startDate=startDate;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  private String title;
  private String startDate;
  private String endDate;
}

For node: @XStreamAlias("Position") expected fqn: com.thoughtworks.xstream.annotations.XStreamAlias with type: Type47 got: com.thoughtworks.xstream.annotations.XStreamAlias
For node: XStreamAlias expected fqn: com.thoughtworks.xstream.annotations.XStreamAlias with type: Type47 got: com.thoughtworks.xstream.annotations.XStreamAlias
For node: "Position" expected fqn: java.lang.String with type: Type20 got: java.lang.String
Did not find solution for node: Position with type Type2
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getEndDate
Cannot find matching typeVariable for: public String getEndDate(){
  return endDate;
}

Cannot find matching typeVariable for: @XStreamAlias("Position") private static class Position {
  public String getEndDate(){
    return endDate;
  }
  public void setEndDate(  String endDate){
    this.endDate=endDate;
  }
  public String getStartDate(){
    return startDate;
  }
  public void setStartDate(  String startDate){
    this.startDate=startDate;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  private String title;
  private String startDate;
  private String endDate;
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

For node: endDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: setEndDate
Cannot find matching typeVariable for: public void setEndDate(String endDate){
  this.endDate=endDate;
}

Cannot find matching typeVariable for: @XStreamAlias("Position") private static class Position {
  public String getEndDate(){
    return endDate;
  }
  public void setEndDate(  String endDate){
    this.endDate=endDate;
  }
  public String getStartDate(){
    return startDate;
  }
  public void setStartDate(  String startDate){
    this.startDate=startDate;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  private String title;
  private String startDate;
  private String endDate;
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: String endDate
For node: String endDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: endDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: this.endDate=endDate expected fqn: java.lang.String with type: Type48 got: java.lang.String
For node: this.endDate expected fqn: java.lang.String with type: Type48 got: java.lang.String
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: endDate
For node: endDate expected fqn: java.lang.String with type: Type48 got: java.lang.String
Cannot find matching typeVariable for: endDate
For node: endDate expected fqn: java.lang.String with type: Type48 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getStartDate
Cannot find matching typeVariable for: public String getStartDate(){
  return startDate;
}

Cannot find matching typeVariable for: @XStreamAlias("Position") private static class Position {
  public String getEndDate(){
    return endDate;
  }
  public void setEndDate(  String endDate){
    this.endDate=endDate;
  }
  public String getStartDate(){
    return startDate;
  }
  public void setStartDate(  String startDate){
    this.startDate=startDate;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  private String title;
  private String startDate;
  private String endDate;
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

For node: startDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: setStartDate
Cannot find matching typeVariable for: public void setStartDate(String startDate){
  this.startDate=startDate;
}

Cannot find matching typeVariable for: @XStreamAlias("Position") private static class Position {
  public String getEndDate(){
    return endDate;
  }
  public void setEndDate(  String endDate){
    this.endDate=endDate;
  }
  public String getStartDate(){
    return startDate;
  }
  public void setStartDate(  String startDate){
    this.startDate=startDate;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  private String title;
  private String startDate;
  private String endDate;
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: String startDate
For node: String startDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: startDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: this.startDate=startDate expected fqn: java.lang.String with type: Type49 got: java.lang.String
For node: this.startDate expected fqn: java.lang.String with type: Type49 got: java.lang.String
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: startDate
For node: startDate expected fqn: java.lang.String with type: Type49 got: java.lang.String
Cannot find matching typeVariable for: startDate
For node: startDate expected fqn: java.lang.String with type: Type49 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getTitle
Cannot find matching typeVariable for: public String getTitle(){
  return title;
}

Cannot find matching typeVariable for: @XStreamAlias("Position") private static class Position {
  public String getEndDate(){
    return endDate;
  }
  public void setEndDate(  String endDate){
    this.endDate=endDate;
  }
  public String getStartDate(){
    return startDate;
  }
  public void setStartDate(  String startDate){
    this.startDate=startDate;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  private String title;
  private String startDate;
  private String endDate;
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

For node: title expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: setTitle
Cannot find matching typeVariable for: public void setTitle(String title){
  this.title=title;
}

Cannot find matching typeVariable for: @XStreamAlias("Position") private static class Position {
  public String getEndDate(){
    return endDate;
  }
  public void setEndDate(  String endDate){
    this.endDate=endDate;
  }
  public String getStartDate(){
    return startDate;
  }
  public void setStartDate(  String startDate){
    this.startDate=startDate;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  private String title;
  private String startDate;
  private String endDate;
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: String title
For node: String title expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: title expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: this.title=title expected fqn: java.lang.String with type: Type50 got: java.lang.String
For node: this.title expected fqn: java.lang.String with type: Type50 got: java.lang.String
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: title
For node: title expected fqn: java.lang.String with type: Type50 got: java.lang.String
Cannot find matching typeVariable for: title
For node: title expected fqn: java.lang.String with type: Type50 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: title
For node: title expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: title
Cannot find matching typeVariable for: private String title;

Cannot find matching typeVariable for: @XStreamAlias("Position") private static class Position {
  public String getEndDate(){
    return endDate;
  }
  public void setEndDate(  String endDate){
    this.endDate=endDate;
  }
  public String getStartDate(){
    return startDate;
  }
  public void setStartDate(  String startDate){
    this.startDate=startDate;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  private String title;
  private String startDate;
  private String endDate;
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: startDate
For node: startDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: startDate
Cannot find matching typeVariable for: private String startDate;

Cannot find matching typeVariable for: @XStreamAlias("Position") private static class Position {
  public String getEndDate(){
    return endDate;
  }
  public void setEndDate(  String endDate){
    this.endDate=endDate;
  }
  public String getStartDate(){
    return startDate;
  }
  public void setStartDate(  String startDate){
    this.startDate=startDate;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  private String title;
  private String startDate;
  private String endDate;
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: endDate
For node: endDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: endDate
Cannot find matching typeVariable for: private String endDate;

Cannot find matching typeVariable for: @XStreamAlias("Position") private static class Position {
  public String getEndDate(){
    return endDate;
  }
  public void setEndDate(  String endDate){
    this.endDate=endDate;
  }
  public String getStartDate(){
    return startDate;
  }
  public void setStartDate(  String startDate){
    this.startDate=startDate;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  private String title;
  private String startDate;
  private String endDate;
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: private static class PositionConverter implements Converter {
  public boolean canConvert(  Class clazz){
    return Position.class == clazz;
  }
  public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    Position position=(Position)value;
    writer.startNode("PositionBorder");
    writer.startNode("Title");
    writer.setValue(position.getTitle());
    writer.endNode();
    writer.startNode("StartDate");
    writer.setValue(position.getStartDate());
    writer.endNode();
    writer.startNode("EndDate");
    writer.setValue(position.getEndDate());
    writer.endNode();
    writer.endNode();
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Position position=new Position();
    reader.moveDown();
    reader.moveDown();
    String title=reader.getValue();
    position.setTitle(title);
    reader.moveUp();
    reader.moveDown();
    String startDate=reader.getValue();
    position.setStartDate(startDate);
    reader.moveUp();
    reader.moveDown();
    String endDate=reader.getValue();
    position.setEndDate(endDate);
    reader.moveUp();
    return position;
  }
}

Cannot find matching typeVariable for: PositionConverter
Cannot find matching typeVariable for: private static class PositionConverter implements Converter {
  public boolean canConvert(  Class clazz){
    return Position.class == clazz;
  }
  public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    Position position=(Position)value;
    writer.startNode("PositionBorder");
    writer.startNode("Title");
    writer.setValue(position.getTitle());
    writer.endNode();
    writer.startNode("StartDate");
    writer.setValue(position.getStartDate());
    writer.endNode();
    writer.startNode("EndDate");
    writer.setValue(position.getEndDate());
    writer.endNode();
    writer.endNode();
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Position position=new Position();
    reader.moveDown();
    reader.moveDown();
    String title=reader.getValue();
    position.setTitle(title);
    reader.moveUp();
    reader.moveDown();
    String startDate=reader.getValue();
    position.setStartDate(startDate);
    reader.moveUp();
    reader.moveDown();
    String endDate=reader.getValue();
    position.setEndDate(endDate);
    reader.moveUp();
    return position;
  }
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type4 got: com.thoughtworks.xstream.converters.Converter
For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type4 got: com.thoughtworks.xstream.converters.Converter
For node: boolean expected fqn: boolean with type: Type8 got: boolean
Cannot find matching typeVariable for: canConvert
Cannot find matching typeVariable for: public boolean canConvert(Class clazz){
  return Position.class == clazz;
}

Cannot find matching typeVariable for: private static class PositionConverter implements Converter {
  public boolean canConvert(  Class clazz){
    return Position.class == clazz;
  }
  public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    Position position=(Position)value;
    writer.startNode("PositionBorder");
    writer.startNode("Title");
    writer.setValue(position.getTitle());
    writer.endNode();
    writer.startNode("StartDate");
    writer.setValue(position.getStartDate());
    writer.endNode();
    writer.startNode("EndDate");
    writer.setValue(position.getEndDate());
    writer.endNode();
    writer.endNode();
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Position position=new Position();
    reader.moveDown();
    reader.moveDown();
    String title=reader.getValue();
    position.setTitle(title);
    reader.moveUp();
    reader.moveDown();
    String startDate=reader.getValue();
    position.setStartDate(startDate);
    reader.moveUp();
    reader.moveDown();
    String endDate=reader.getValue();
    position.setEndDate(endDate);
    reader.moveUp();
    return position;
  }
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: Class clazz
For node: Class clazz expected fqn: java.lang.Class with type: Type51 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type51 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type51 got: java.lang.Class
For node: clazz expected fqn: java.lang.Class with type: Type51 got: java.lang.Class
For node: Position.class == clazz expected fqn: boolean with type: Type8 got: boolean
For node: Position.class expected fqn: java.lang.Class<xstream_class_17.Position> with type: Type52 got: java.lang.Class
Did not find solution for node: Position with type Type2
Did not find solution for node: Position with type Type2
For node: clazz expected fqn: java.lang.Class with type: Type51 got: java.lang.Class
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: marshal
Cannot find matching typeVariable for: public void marshal(Object value,HierarchicalStreamWriter writer,MarshallingContext context){
  Position position=(Position)value;
  writer.startNode("PositionBorder");
  writer.startNode("Title");
  writer.setValue(position.getTitle());
  writer.endNode();
  writer.startNode("StartDate");
  writer.setValue(position.getStartDate());
  writer.endNode();
  writer.startNode("EndDate");
  writer.setValue(position.getEndDate());
  writer.endNode();
  writer.endNode();
}

Cannot find matching typeVariable for: private static class PositionConverter implements Converter {
  public boolean canConvert(  Class clazz){
    return Position.class == clazz;
  }
  public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    Position position=(Position)value;
    writer.startNode("PositionBorder");
    writer.startNode("Title");
    writer.setValue(position.getTitle());
    writer.endNode();
    writer.startNode("StartDate");
    writer.setValue(position.getStartDate());
    writer.endNode();
    writer.startNode("EndDate");
    writer.setValue(position.getEndDate());
    writer.endNode();
    writer.endNode();
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Position position=new Position();
    reader.moveDown();
    reader.moveDown();
    String title=reader.getValue();
    position.setTitle(title);
    reader.moveUp();
    reader.moveDown();
    String startDate=reader.getValue();
    position.setStartDate(startDate);
    reader.moveUp();
    reader.moveDown();
    String endDate=reader.getValue();
    position.setEndDate(endDate);
    reader.moveUp();
    return position;
  }
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: Object value
For node: Object value expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
For node: value expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: HierarchicalStreamWriter writer
For node: HierarchicalStreamWriter writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: MarshallingContext context
For node: MarshallingContext context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type54 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type54 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type54 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type54 got: com.thoughtworks.xstream.converters.MarshallingContext
Did not find solution for node: Position with type Type2
Did not find solution for node: Position with type Type2
Cannot find matching typeVariable for: position=(Position)value
Did not find solution for node: position=(Position)value with type Type2
Did not find solution for node: position with type Type2
Did not find solution for node: (Position)value with type Type2
Did not find solution for node: Position with type Type2
Did not find solution for node: Position with type Type2
For node: value expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
For node: writer.startNode("PositionBorder") expected fqn: void with type: Type55 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: startNode
For node: startNode expected fqn: void with type: Type55 got: void
For node: "PositionBorder" expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: writer.startNode("Title") expected fqn: void with type: Type57 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: startNode
For node: startNode expected fqn: void with type: Type57 got: void
For node: "Title" expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: writer.setValue(position.getTitle()) expected fqn: void with type: Type58 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: setValue
For node: setValue expected fqn: void with type: Type58 got: void
Did not find solution for node: position.getTitle() with type Type42
Did not find solution for node: position with type Type2
Cannot find matching typeVariable for: getTitle
Did not find solution for node: getTitle with type Type42
For node: writer.endNode() expected fqn: void with type: Type61 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: endNode
For node: endNode expected fqn: void with type: Type61 got: void
For node: writer.startNode("StartDate") expected fqn: void with type: Type57 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: startNode
For node: startNode expected fqn: void with type: Type57 got: void
For node: "StartDate" expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: writer.setValue(position.getStartDate()) expected fqn: void with type: Type63 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: setValue
For node: setValue expected fqn: void with type: Type63 got: void
Did not find solution for node: position.getStartDate() with type Type44
Did not find solution for node: position with type Type2
Cannot find matching typeVariable for: getStartDate
Did not find solution for node: getStartDate with type Type44
For node: writer.endNode() expected fqn: void with type: Type62 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: endNode
For node: endNode expected fqn: void with type: Type62 got: void
For node: writer.startNode("EndDate") expected fqn: void with type: Type57 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: startNode
For node: startNode expected fqn: void with type: Type57 got: void
For node: "EndDate" expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: writer.setValue(position.getEndDate()) expected fqn: void with type: Type66 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: setValue
For node: setValue expected fqn: void with type: Type66 got: void
Did not find solution for node: position.getEndDate() with type Type46
Did not find solution for node: position with type Type2
Cannot find matching typeVariable for: getEndDate
Did not find solution for node: getEndDate with type Type46
For node: writer.endNode() expected fqn: void with type: Type62 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: endNode
For node: endNode expected fqn: void with type: Type62 got: void
For node: writer.endNode() expected fqn: void with type: Type62 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type53 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: endNode
For node: endNode expected fqn: void with type: Type62 got: void
For node: Object expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: unmarshal
Cannot find matching typeVariable for: public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context){
  Position position=new Position();
  reader.moveDown();
  reader.moveDown();
  String title=reader.getValue();
  position.setTitle(title);
  reader.moveUp();
  reader.moveDown();
  String startDate=reader.getValue();
  position.setStartDate(startDate);
  reader.moveUp();
  reader.moveDown();
  String endDate=reader.getValue();
  position.setEndDate(endDate);
  reader.moveUp();
  return position;
}

Cannot find matching typeVariable for: private static class PositionConverter implements Converter {
  public boolean canConvert(  Class clazz){
    return Position.class == clazz;
  }
  public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    Position position=(Position)value;
    writer.startNode("PositionBorder");
    writer.startNode("Title");
    writer.setValue(position.getTitle());
    writer.endNode();
    writer.startNode("StartDate");
    writer.setValue(position.getStartDate());
    writer.endNode();
    writer.startNode("EndDate");
    writer.setValue(position.getEndDate());
    writer.endNode();
    writer.endNode();
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Position position=new Position();
    reader.moveDown();
    reader.moveDown();
    String title=reader.getValue();
    position.setTitle(title);
    reader.moveUp();
    reader.moveDown();
    String startDate=reader.getValue();
    position.setStartDate(startDate);
    reader.moveUp();
    reader.moveDown();
    String endDate=reader.getValue();
    position.setEndDate(endDate);
    reader.moveUp();
    return position;
  }
}

Cannot find matching typeVariable for: public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public final class xstream_class_17 {
  public static void main(  String[] args){
    XStream xstream=new XStream();
    xstream.autodetectAnnotations(true);
    xstream.registerConverter(new PositionConverter());
    final Position position=new Position();
    position.setTitle("The Title");
    position.setStartDate("The Start Date");
    position.setEndDate("The End Date");
    final String xml=xstream.toXML(position);
    System.out.println("Generated XML:");
    System.out.println(xml);
    final Position genPosition=(Position)xstream.fromXML(xml);
    System.out.println("Generated Position:");
    System.out.println("\tTitle: " + genPosition.getTitle());
    System.out.println("\tStart Date: " + genPosition.getStartDate());
    System.out.println("\tEnd Date: " + genPosition.getEndDate());
  }
@XStreamAlias("Position") private static class Position {
    public String getEndDate(){
      return endDate;
    }
    public void setEndDate(    String endDate){
      this.endDate=endDate;
    }
    public String getStartDate(){
      return startDate;
    }
    public void setStartDate(    String startDate){
      this.startDate=startDate;
    }
    public String getTitle(){
      return title;
    }
    public void setTitle(    String title){
      this.title=title;
    }
    private String title;
    private String startDate;
    private String endDate;
  }
private static class PositionConverter implements Converter {
    public boolean canConvert(    Class clazz){
      return Position.class == clazz;
    }
    public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Position position=(Position)value;
      writer.startNode("PositionBorder");
      writer.startNode("Title");
      writer.setValue(position.getTitle());
      writer.endNode();
      writer.startNode("StartDate");
      writer.setValue(position.getStartDate());
      writer.endNode();
      writer.startNode("EndDate");
      writer.setValue(position.getEndDate());
      writer.endNode();
      writer.endNode();
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Position position=new Position();
      reader.moveDown();
      reader.moveDown();
      String title=reader.getValue();
      position.setTitle(title);
      reader.moveUp();
      reader.moveDown();
      String startDate=reader.getValue();
      position.setStartDate(startDate);
      reader.moveUp();
      reader.moveDown();
      String endDate=reader.getValue();
      position.setEndDate(endDate);
      reader.moveUp();
      return position;
    }
  }
}

Cannot find matching typeVariable for: HierarchicalStreamReader reader
For node: HierarchicalStreamReader reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: UnmarshallingContext context
For node: UnmarshallingContext context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type70 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type70 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type70 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type70 got: com.thoughtworks.xstream.converters.UnmarshallingContext
Did not find solution for node: Position with type Type2
Did not find solution for node: Position with type Type2
Cannot find matching typeVariable for: position=new Position()
Did not find solution for node: position=new Position() with type Type2
Did not find solution for node: position with type Type2
Did not find solution for node: new Position() with type Type2
Did not find solution for node: Position with type Type2
Did not find solution for node: Position with type Type2
For node: reader.moveDown() expected fqn: void with type: Type71 got: void
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: moveDown
For node: moveDown expected fqn: void with type: Type71 got: void
For node: reader.moveDown() expected fqn: void with type: Type72 got: void
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: moveDown
For node: moveDown expected fqn: void with type: Type72 got: void
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: title=reader.getValue()
For node: title=reader.getValue() expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: title expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: reader.getValue() expected fqn: java.lang.String with type: Type73 got: java.lang.String
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: getValue
For node: getValue expected fqn: java.lang.String with type: Type73 got: java.lang.String
Did not find solution for node: position.setTitle(title) with type Type23
Did not find solution for node: position with type Type2
Cannot find matching typeVariable for: setTitle
Did not find solution for node: setTitle with type Type23
For node: title expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: reader.moveUp() expected fqn: void with type: Type75 got: void
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: moveUp
For node: moveUp expected fqn: void with type: Type75 got: void
For node: reader.moveDown() expected fqn: void with type: Type72 got: void
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: moveDown
For node: moveDown expected fqn: void with type: Type72 got: void
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: startDate=reader.getValue()
For node: startDate=reader.getValue() expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: startDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: reader.getValue() expected fqn: java.lang.String with type: Type74 got: java.lang.String
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: getValue
For node: getValue expected fqn: java.lang.String with type: Type74 got: java.lang.String
Did not find solution for node: position.setStartDate(startDate) with type Type26
Did not find solution for node: position with type Type2
Cannot find matching typeVariable for: setStartDate
Did not find solution for node: setStartDate with type Type26
For node: startDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: reader.moveUp() expected fqn: void with type: Type76 got: void
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: moveUp
For node: moveUp expected fqn: void with type: Type76 got: void
For node: reader.moveDown() expected fqn: void with type: Type72 got: void
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: moveDown
For node: moveDown expected fqn: void with type: Type72 got: void
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: endDate=reader.getValue()
For node: endDate=reader.getValue() expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: endDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: reader.getValue() expected fqn: java.lang.String with type: Type74 got: java.lang.String
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: getValue
For node: getValue expected fqn: java.lang.String with type: Type74 got: java.lang.String
Did not find solution for node: position.setEndDate(endDate) with type Type29
Did not find solution for node: position with type Type2
Cannot find matching typeVariable for: setEndDate
Did not find solution for node: setEndDate with type Type29
For node: endDate expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: reader.moveUp() expected fqn: void with type: Type76 got: void
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type69 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: moveUp
For node: moveUp expected fqn: void with type: Type76 got: void
Did not find solution for node: position with type Type2
{Checked=312, Analyzed=243, Unsolved=69, Incorrect=7, Correct=236}
=CastExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=SimpleName: {Checked=29, Analyzed=0, Unsolved=29, Incorrect=0, Correct=0}
=SimpleType: {Checked=10, Analyzed=0, Unsolved=10, Incorrect=0, Correct=0}
=ThisExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=38, Analyzed=38, Unsolved=0, Incorrect=0, Correct=38}
com.thoughtworks.xstream.=SimpleType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
com.thoughtworks.xstream.=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=FieldAccess: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=InfixExpression: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=11, Analyzed=8, Unsolved=3, Incorrect=0, Correct=8}
java=QualifiedName: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=6, Correct=0}
java=SimpleName: {Checked=66, Analyzed=63, Unsolved=3, Incorrect=0, Correct=63}
java=SimpleType: {Checked=17, Analyzed=17, Unsolved=0, Incorrect=0, Correct=17}
java=SingleVariableDeclaration: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=StringLiteral: {Checked=13, Analyzed=13, Unsolved=0, Incorrect=0, Correct=13}
java=TypeLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=VariableDeclarationFragment: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
void=MethodInvocation: {Checked=32, Analyzed=26, Unsolved=6, Incorrect=0, Correct=26}
void=PrimitiveType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
void=SimpleName: {Checked=32, Analyzed=26, Unsolved=6, Incorrect=0, Correct=26}
Total stats
{Checked=312, Analyzed=243, Unsolved=69, Incorrect=7, Correct=236}
=CastExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=SimpleName: {Checked=29, Analyzed=0, Unsolved=29, Incorrect=0, Correct=0}
=SimpleType: {Checked=10, Analyzed=0, Unsolved=10, Incorrect=0, Correct=0}
=ThisExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=38, Analyzed=38, Unsolved=0, Incorrect=0, Correct=38}
com.thoughtworks.xstream.=SimpleType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
com.thoughtworks.xstream.=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=FieldAccess: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=InfixExpression: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=11, Analyzed=8, Unsolved=3, Incorrect=0, Correct=8}
java=QualifiedName: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=6, Correct=0}
java=SimpleName: {Checked=66, Analyzed=63, Unsolved=3, Incorrect=0, Correct=63}
java=SimpleType: {Checked=17, Analyzed=17, Unsolved=0, Incorrect=0, Correct=17}
java=SingleVariableDeclaration: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=StringLiteral: {Checked=13, Analyzed=13, Unsolved=0, Incorrect=0, Correct=13}
java=TypeLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=VariableDeclarationFragment: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
void=MethodInvocation: {Checked=32, Analyzed=26, Unsolved=6, Incorrect=0, Correct=26}
void=PrimitiveType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
void=SimpleName: {Checked=32, Analyzed=26, Unsolved=6, Incorrect=0, Correct=26}
,CastExpression,0,2,0,0,2
,ClassInstanceCreation,0,3,0,0,3
,SimpleName,0,29,0,0,29
,SimpleType,0,10,0,0,10
,ThisExpression,0,3,0,0,3
,VariableDeclarationFragment,0,4,0,0,4
boolean,BooleanLiteral,1,1,1,0,0
boolean,InfixExpression,1,1,1,0,0
boolean,PrimitiveType,1,1,1,0,0
com.thoughtworks.xstream.,ClassInstanceCreation,1,1,1,0,0
com.thoughtworks.xstream.,SimpleName,38,38,38,0,0
com.thoughtworks.xstream.,SimpleType,7,7,7,0,0
com.thoughtworks.xstream.,SingleMemberAnnotation,1,1,1,0,0
com.thoughtworks.xstream.,SingleVariableDeclaration,4,4,4,0,0
com.thoughtworks.xstream.,VariableDeclarationFragment,1,1,1,0,0
java,ArrayType,1,1,1,0,0
java,Assignment,3,3,3,0,0
java,FieldAccess,3,3,3,0,0
java,InfixExpression,3,3,3,0,0
java,MethodInvocation,8,11,8,0,3
java,QualifiedName,6,6,0,6,0
java,SimpleName,63,66,63,0,3
java,SimpleType,17,17,17,0,0
java,SingleVariableDeclaration,6,6,6,0,0
java,StringLiteral,13,13,13,0,0
java,TypeLiteral,1,1,0,1,0
java,VariableDeclarationFragment,7,7,7,0,0
void,MethodInvocation,26,32,26,0,6
void,PrimitiveType,5,5,5,0,0
void,SimpleName,26,32,26,0,6
