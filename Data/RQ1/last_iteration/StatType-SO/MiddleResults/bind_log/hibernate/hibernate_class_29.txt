echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/hibernate_class_29.java
Expect check=147
Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Did not find solution for node: hibernate_class_29 with type Type1
Cannot find matching typeVariable for: T
Cannot find matching typeVariable for: T
Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

For node: Class<T> expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
For node: Class expected fqn: java.lang.Class<T> with type: Type29 got: java.lang.Class
For node: Class expected fqn: java.lang.Class<T> with type: Type29 got: java.lang.Class
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: domainClass
For node: domainClass expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
Cannot find matching typeVariable for: domainClass
Cannot find matching typeVariable for: private Class<T> domainClass;

Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: sf
For node: sf expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: sf
Cannot find matching typeVariable for: private SessionFactory sf;

Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: hibernate_class_29
Cannot find matching typeVariable for: public hibernate_class_29(Class<T> domainClass){
  this.domainClass=domainClass;
}

Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: Class<T> domainClass
For node: Class<T> domainClass expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
For node: Class<T> expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
For node: Class expected fqn: java.lang.Class<T> with type: Type29 got: java.lang.Class
For node: Class expected fqn: java.lang.Class<T> with type: Type29 got: java.lang.Class
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: domainClass expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
For node: this.domainClass=domainClass expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
For node: this.domainClass expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: domainClass
For node: domainClass expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
Cannot find matching typeVariable for: domainClass
For node: domainClass expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: getSessionFactory
Cannot find matching typeVariable for: public SessionFactory getSessionFactory(){
  return sf;
}

Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

For node: sf expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
For node: void expected fqn: void with type: Type5 got: void
Cannot find matching typeVariable for: setSessionFactory
Cannot find matching typeVariable for: public void setSessionFactory(SessionFactory sf){
  this.sf=sf;
}

Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: SessionFactory sf
For node: SessionFactory sf expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
For node: sf expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
For node: this.sf=sf expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
For node: this.sf expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: sf
For node: sf expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: sf
For node: sf expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
For node: void expected fqn: void with type: Type5 got: void
Cannot find matching typeVariable for: delete
Cannot find matching typeVariable for: public void delete(T object){
  getSession().delete(object);
}

Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: T object
For node: T object expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: object expected fqn: T with type: Type3 got: java.lang.Object
For node: getSession().delete(object) expected fqn: void with type: Type31 got: int
For node: getSession() expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: getSession
For node: getSession expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: delete
For node: delete expected fqn: void with type: Type31 got: int
For node: object expected fqn: T with type: Type3 got: java.lang.Object
For node: @SuppressWarnings("unchecked") expected fqn: java.lang.SuppressWarnings with type: Type35 got: java.lang.SuppressWarnings
For node: SuppressWarnings expected fqn: java.lang.SuppressWarnings with type: Type35 got: java.lang.SuppressWarnings
For node: "unchecked" expected fqn: java.lang.String with type: Type34 got: java.lang.String
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: load
Cannot find matching typeVariable for: @SuppressWarnings("unchecked") public T load(long id){
  return (T)getSession().get(domainClass,id);
}

Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: long id
Did not find solution for node: long id with type Type36
Did not find solution for node: long with type Type36
Did not find solution for node: id with type Type36
For node: (T)getSession().get(domainClass,id) expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: getSession().get(domainClass,id) expected fqn: T with type: Type37 got: java.lang.Object
For node: getSession() expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: getSession
For node: getSession expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: get
For node: get expected fqn: T with type: Type37 got: java.lang.Object
For node: domainClass expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
Did not find solution for node: id with type Type36
For node: void expected fqn: void with type: Type5 got: void
Cannot find matching typeVariable for: save
Cannot find matching typeVariable for: public void save(T object){
  getSession().saveOrUpdate(object);
}

Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: T object
For node: T object expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: object expected fqn: T with type: Type3 got: java.lang.Object
For node: getSession().saveOrUpdate(object) expected fqn: void with type: Type41 got: void
For node: getSession() expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: getSession
For node: getSession expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: saveOrUpdate
For node: saveOrUpdate expected fqn: void with type: Type41 got: void
For node: object expected fqn: T with type: Type3 got: java.lang.Object
For node: @SuppressWarnings("unchecked") expected fqn: java.lang.SuppressWarnings with type: Type35 got: java.lang.SuppressWarnings
For node: SuppressWarnings expected fqn: java.lang.SuppressWarnings with type: Type35 got: java.lang.SuppressWarnings
For node: "unchecked" expected fqn: java.lang.String with type: Type34 got: java.lang.String
For node: List<T> expected fqn: java.util.List<T> with type: Type7=Type6<Type3> got: java.util.List<java.lang.Object>
For node: List expected fqn: java.util.List<T> with type: Type6 got: java.util.List
For node: List expected fqn: java.util.List<T> with type: Type6 got: java.util.List
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: findAll
Cannot find matching typeVariable for: @SuppressWarnings("unchecked") public List<T> findAll(){
  Criteria criteria=getSession().createCriteria(domainClass);
  List<T> r=(List<T>)criteria.list();
  return r;
}

Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

For node: Criteria expected fqn: org.hibernate.Criteria with type: Type44 got: org.hibernate.Criteria
For node: Criteria expected fqn: org.hibernate.Criteria with type: Type44 got: org.hibernate.Criteria
Cannot find matching typeVariable for: criteria=getSession().createCriteria(domainClass)
For node: criteria=getSession().createCriteria(domainClass) expected fqn: org.hibernate.Criteria with type: Type44 got: org.hibernate.Criteria
For node: criteria expected fqn: org.hibernate.Criteria with type: Type44 got: org.hibernate.Criteria
For node: getSession().createCriteria(domainClass) expected fqn: org.hibernate.Criteria with type: Type45 got: org.hibernate.Criteria
For node: getSession() expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: getSession
For node: getSession expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: createCriteria
For node: createCriteria expected fqn: org.hibernate.Criteria with type: Type45 got: org.hibernate.Criteria
For node: domainClass expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
For node: List<T> expected fqn: java.util.List<T> with type: Type7=Type6<Type3> got: java.util.List<java.lang.Object>
For node: List expected fqn: java.util.List<T> with type: Type6 got: java.util.List
For node: List expected fqn: java.util.List<T> with type: Type6 got: java.util.List
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: r=(List<T>)criteria.list()
For node: r=(List<T>)criteria.list() expected fqn: java.util.List<T> with type: Type7=Type6<Type3> got: java.util.List<java.lang.Object>
For node: r expected fqn: java.util.List<T> with type: Type7=Type6<Type3> got: java.util.List<java.lang.Object>
For node: (List<T>)criteria.list() expected fqn: java.util.List<T> with type: Type7=Type6<Type3> got: java.util.List<java.lang.Object>
For node: List<T> expected fqn: java.util.List<T> with type: Type7=Type6<Type3> got: java.util.List<java.lang.Object>
For node: List expected fqn: java.util.List<T> with type: Type6 got: java.util.List
For node: List expected fqn: java.util.List<T> with type: Type6 got: java.util.List
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Did not find solution for node: criteria.list() with type Type48
For node: criteria expected fqn: org.hibernate.Criteria with type: Type44 got: org.hibernate.Criteria
Cannot find matching typeVariable for: list
Did not find solution for node: list with type Type48
For node: r expected fqn: java.util.List<T> with type: Type7=Type6<Type3> got: java.util.List<java.lang.Object>
Did not find solution for node: int with type Type2
Cannot find matching typeVariable for: countAll
Cannot find matching typeVariable for: public int countAll(){
  Criteria criteria=getSession().createCriteria(domainClass);
  criteria.setProjection(Projections.rowCount());
  return (Integer)criteria.uniqueResult();
}

Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

For node: Criteria expected fqn: org.hibernate.Criteria with type: Type44 got: org.hibernate.Criteria
For node: Criteria expected fqn: org.hibernate.Criteria with type: Type44 got: org.hibernate.Criteria
Cannot find matching typeVariable for: criteria=getSession().createCriteria(domainClass)
For node: criteria=getSession().createCriteria(domainClass) expected fqn: org.hibernate.Criteria with type: Type44 got: org.hibernate.Criteria
For node: criteria expected fqn: org.hibernate.Criteria with type: Type44 got: org.hibernate.Criteria
For node: getSession().createCriteria(domainClass) expected fqn: org.hibernate.Criteria with type: Type47 got: org.hibernate.Criteria
For node: getSession() expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: getSession
For node: getSession expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: createCriteria
For node: createCriteria expected fqn: org.hibernate.Criteria with type: Type47 got: org.hibernate.Criteria
For node: domainClass expected fqn: java.lang.Class<T> with type: Type30=Type29<Type3> got: java.lang.Class<java.lang.Object>
For node: criteria.setProjection(Projections.rowCount()) expected fqn: org.hibernate.Criteria with type: Type53 got: org.hibernate.Criteria
For node: criteria expected fqn: org.hibernate.Criteria with type: Type44 got: org.hibernate.Criteria
Cannot find matching typeVariable for: setProjection
For node: setProjection expected fqn: org.hibernate.Criteria with type: Type53 got: org.hibernate.Criteria
For node: Projections.rowCount() expected fqn: org.hibernate.criterion.Projection with type: Type51 got: org.hibernate.criterion.Projection
For node: Projections expected fqn: org.hibernate.criterion.Projections with type: Type50 got: org.hibernate.criterion.Projections
Cannot find matching typeVariable for: rowCount
For node: rowCount expected fqn: org.hibernate.criterion.Projection with type: Type51 got: org.hibernate.criterion.Projection
Did not find solution for node: (Integer)criteria.uniqueResult() with type Type56
Did not find solution for node: Integer with type Type56
Did not find solution for node: Integer with type Type56
Did not find solution for node: criteria.uniqueResult() with type Type57
For node: criteria expected fqn: org.hibernate.Criteria with type: Type44 got: org.hibernate.Criteria
Cannot find matching typeVariable for: uniqueResult
Did not find solution for node: uniqueResult with type Type57
For node: Session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: Session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: getSession
Cannot find matching typeVariable for: public Session getSession(){
  return sf.getCurrentSession();
}

Cannot find matching typeVariable for: public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
public abstract class hibernate_class_29<T> {
  private Class<T> domainClass;
  private SessionFactory sf;
  public hibernate_class_29(  Class<T> domainClass){
    this.domainClass=domainClass;
  }
  public SessionFactory getSessionFactory(){
    return sf;
  }
  public void setSessionFactory(  SessionFactory sf){
    this.sf=sf;
  }
  public void delete(  T object){
    getSession().delete(object);
  }
  @SuppressWarnings("unchecked") public T load(  long id){
    return (T)getSession().get(domainClass,id);
  }
  public void save(  T object){
    getSession().saveOrUpdate(object);
  }
  @SuppressWarnings("unchecked") public List<T> findAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    List<T> r=(List<T>)criteria.list();
    return r;
  }
  public int countAll(){
    Criteria criteria=getSession().createCriteria(domainClass);
    criteria.setProjection(Projections.rowCount());
    return (Integer)criteria.uniqueResult();
  }
  public Session getSession(){
    return sf.getCurrentSession();
  }
}

For node: sf.getCurrentSession() expected fqn: org.hibernate.Session with type: Type59 got: org.hibernate.Session
For node: sf expected fqn: org.hibernate.SessionFactory with type: Type9 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: getCurrentSession
For node: getCurrentSession expected fqn: org.hibernate.Session with type: Type59 got: org.hibernate.Session
{Checked=133, Analyzed=118, Unsolved=15, Incorrect=58, Correct=60}
=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
=SimpleName: {Checked=15, Analyzed=14, Unsolved=1, Incorrect=14, Correct=0}
=SimpleType: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=9, Correct=0}
=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
=ThisExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=CastExpression: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
java=FieldAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ParameterizedType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=5, Correct=0}
java=SimpleName: {Checked=18, Analyzed=15, Unsolved=3, Incorrect=13, Correct=2}
java=SimpleType: {Checked=6, Analyzed=5, Unsolved=1, Incorrect=5, Correct=0}
java=SingleMemberAnnotation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
long=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
long=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
long=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=FieldAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=MethodInvocation: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
org.hibernate.=SimpleName: {Checked=27, Analyzed=27, Unsolved=0, Incorrect=0, Correct=27}
org.hibernate.=SimpleType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
org.hibernate.=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
void=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
Total stats
{Checked=133, Analyzed=118, Unsolved=15, Incorrect=58, Correct=60}
=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
=SimpleName: {Checked=15, Analyzed=14, Unsolved=1, Incorrect=14, Correct=0}
=SimpleType: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=9, Correct=0}
=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
=ThisExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=CastExpression: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
java=FieldAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ParameterizedType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=5, Correct=0}
java=SimpleName: {Checked=18, Analyzed=15, Unsolved=3, Incorrect=13, Correct=2}
java=SimpleType: {Checked=6, Analyzed=5, Unsolved=1, Incorrect=5, Correct=0}
java=SingleMemberAnnotation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
long=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
long=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
long=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=FieldAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=MethodInvocation: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
org.hibernate.=SimpleName: {Checked=27, Analyzed=27, Unsolved=0, Incorrect=0, Correct=27}
org.hibernate.=SimpleType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
org.hibernate.=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
void=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
,CastExpression,1,1,0,1,0
,MethodInvocation,1,1,0,1,0
,SimpleName,14,15,0,14,1
,SimpleType,9,9,0,9,0
,SingleVariableDeclaration,2,2,0,2,0
,ThisExpression,0,2,0,0,2
int,PrimitiveType,0,1,0,0,1
java,Assignment,1,1,0,1,0
java,CastExpression,1,2,0,1,1
java,FieldAccess,1,1,0,1,0
java,MethodInvocation,0,2,0,0,2
java,ParameterizedType,5,5,0,5,0
java,SimpleName,15,18,2,13,3
java,SimpleType,5,6,0,5,1
java,SingleMemberAnnotation,2,2,2,0,0
java,SingleVariableDeclaration,1,1,0,1,0
java,StringLiteral,2,2,2,0,0
java,VariableDeclarationFragment,2,2,0,2,0
long,PrimitiveType,0,1,0,0,1
long,SimpleName,0,2,0,0,2
long,SingleVariableDeclaration,0,1,0,0,1
org.hibernate.,Assignment,1,1,1,0,0
org.hibernate.,FieldAccess,1,1,1,0,0
org.hibernate.,MethodInvocation,10,10,10,0,0
org.hibernate.,SimpleName,27,27,27,0,0
org.hibernate.,SimpleType,6,6,6,0,0
org.hibernate.,SingleVariableDeclaration,1,1,1,0,0
org.hibernate.,VariableDeclarationFragment,3,3,3,0,0
void,MethodInvocation,2,2,1,1,0
void,PrimitiveType,3,3,3,0,0
void,SimpleName,2,2,1,1,0
