echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/jt9.java
Expect check=30
Cannot find matching typeVariable for: public class jt9 {
  public static void h1(){
    LocalDate today=LocalDate.now();
    ZonedDateTime zdt=today.atStartOfDay().atZone(ZoneId.systemDefault());
    OffsetDateTime odt=zdt.toOffsetDateTime();
  }
}

Cannot find matching typeVariable for: jt9
Cannot find matching typeVariable for: public class jt9 {
  public static void h1(){
    LocalDate today=LocalDate.now();
    ZonedDateTime zdt=today.atStartOfDay().atZone(ZoneId.systemDefault());
    OffsetDateTime odt=zdt.toOffsetDateTime();
  }
}

Cannot find matching typeVariable for: package java.joda_time;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
public class jt9 {
  public static void h1(){
    LocalDate today=LocalDate.now();
    ZonedDateTime zdt=today.atStartOfDay().atZone(ZoneId.systemDefault());
    OffsetDateTime odt=zdt.toOffsetDateTime();
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: h1
Cannot find matching typeVariable for: public static void h1(){
  LocalDate today=LocalDate.now();
  ZonedDateTime zdt=today.atStartOfDay().atZone(ZoneId.systemDefault());
  OffsetDateTime odt=zdt.toOffsetDateTime();
}

Cannot find matching typeVariable for: public class jt9 {
  public static void h1(){
    LocalDate today=LocalDate.now();
    ZonedDateTime zdt=today.atStartOfDay().atZone(ZoneId.systemDefault());
    OffsetDateTime odt=zdt.toOffsetDateTime();
  }
}

Cannot find matching typeVariable for: package java.joda_time;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
public class jt9 {
  public static void h1(){
    LocalDate today=LocalDate.now();
    ZonedDateTime zdt=today.atStartOfDay().atZone(ZoneId.systemDefault());
    OffsetDateTime odt=zdt.toOffsetDateTime();
  }
}

For node: LocalDate expected fqn: java.time.LocalDate with type: Type3 got: java.time.LocalDate
For node: LocalDate expected fqn: java.time.LocalDate with type: Type3 got: java.time.LocalDate
Cannot find matching typeVariable for: today=LocalDate.now()
For node: today=LocalDate.now() expected fqn: java.time.LocalDate with type: Type3 got: java.time.LocalDate
For node: today expected fqn: java.time.LocalDate with type: Type3 got: java.time.LocalDate
For node: LocalDate.now() expected fqn: java.time.LocalDate with type: Type4 got: java.time.LocalDate
For node: LocalDate expected fqn: java.time.LocalDate with type: Type3 got: java.time.LocalDate
Cannot find matching typeVariable for: now
For node: now expected fqn: java.time.LocalDate with type: Type4 got: java.time.LocalDate
For node: ZonedDateTime expected fqn: java.time.ZonedDateTime with type: Type6 got: java.time.ZonedDateTime
For node: ZonedDateTime expected fqn: java.time.ZonedDateTime with type: Type6 got: java.time.ZonedDateTime
Cannot find matching typeVariable for: zdt=today.atStartOfDay().atZone(ZoneId.systemDefault())
For node: zdt=today.atStartOfDay().atZone(ZoneId.systemDefault()) expected fqn: java.time.ZonedDateTime with type: Type6 got: java.time.ZonedDateTime
For node: zdt expected fqn: java.time.ZonedDateTime with type: Type6 got: java.time.ZonedDateTime
For node: today.atStartOfDay().atZone(ZoneId.systemDefault()) expected fqn: java.time.ZonedDateTime with type: Type12 got: java.time.ZonedDateTime
For node: today.atStartOfDay() expected fqn: java.time.LocalDateTime with type: Type7 got: java.time.LocalDateTime
For node: today expected fqn: java.time.LocalDate with type: Type3 got: java.time.LocalDate
Cannot find matching typeVariable for: atStartOfDay
For node: atStartOfDay expected fqn: java.time.LocalDateTime with type: Type7 got: java.time.LocalDateTime
Cannot find matching typeVariable for: atZone
For node: atZone expected fqn: java.time.ZonedDateTime with type: Type12 got: java.time.ZonedDateTime
For node: ZoneId.systemDefault() expected fqn: java.time.ZoneId with type: Type10 got: java.time.ZoneId
For node: ZoneId expected fqn: java.time.ZoneId with type: Type9 got: java.time.ZoneId
Cannot find matching typeVariable for: systemDefault
For node: systemDefault expected fqn: java.time.ZoneId with type: Type10 got: java.time.ZoneId
For node: OffsetDateTime expected fqn: java.time.OffsetDateTime with type: Type15 got: java.time.OffsetDateTime
For node: OffsetDateTime expected fqn: java.time.OffsetDateTime with type: Type15 got: java.time.OffsetDateTime
Cannot find matching typeVariable for: odt=zdt.toOffsetDateTime()
For node: odt=zdt.toOffsetDateTime() expected fqn: java.time.OffsetDateTime with type: Type15 got: java.time.OffsetDateTime
For node: odt expected fqn: java.time.OffsetDateTime with type: Type15 got: java.time.OffsetDateTime
For node: zdt.toOffsetDateTime() expected fqn: java.time.OffsetDateTime with type: Type16 got: java.time.OffsetDateTime
For node: zdt expected fqn: java.time.ZonedDateTime with type: Type6 got: java.time.ZonedDateTime
Cannot find matching typeVariable for: toOffsetDateTime
For node: toOffsetDateTime expected fqn: java.time.OffsetDateTime with type: Type16 got: java.time.OffsetDateTime
{Checked=27, Analyzed=27, Unsolved=0, Incorrect=0, Correct=27}
java=MethodInvocation: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
java=SimpleName: {Checked=15, Analyzed=15, Unsolved=0, Incorrect=0, Correct=15}
java=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=27, Analyzed=27, Unsolved=0, Incorrect=0, Correct=27}
java=MethodInvocation: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
java=SimpleName: {Checked=15, Analyzed=15, Unsolved=0, Incorrect=0, Correct=15}
java=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java,MethodInvocation,5,5,5,0,0
java,SimpleName,15,15,15,0,0
java,SimpleType,3,3,3,0,0
java,VariableDeclarationFragment,3,3,3,0,0
void,PrimitiveType,1,1,1,0,0
