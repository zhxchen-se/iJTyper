echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/Class_10.java
Expect check=374
Cannot find matching typeVariable for: /** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Did not find solution for node: Class_10 with type Type1
Did not find solution for node: NumberFormat with type Type4
Did not find solution for node: NumberFormat with type Type4
Cannot find matching typeVariable for: nf=NumberFormat.getNumberInstance(Locale.US)
Did not find solution for node: nf=NumberFormat.getNumberInstance(Locale.US) with type Type4
Did not find solution for node: nf with type Type4
Did not find solution for node: NumberFormat.getNumberInstance(Locale.US) with type Type7
Did not find solution for node: NumberFormat with type Type4
Cannot find matching typeVariable for: getNumberInstance
Did not find solution for node: getNumberInstance with type Type7
Cannot find matching typeVariable for: Locale.US
Did not find solution for node: Locale.US with type Type7
For node: Locale expected fqn: java.util.Locale with type: Type5 got: java.util.Locale
For node: US expected fqn: java.util.Locale with type: Type6 got: java.util.Locale
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static final void main(String[] tryCount_inParamIdx0){
  int testCount;
  try {
    testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
  }
 catch (  ArrayIndexOutOfBoundsException|NumberFormatException x) {
    throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
  }
  int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
  long lStart=System.nanoTime();
  for (int i=0; i < testCount; i++) {
    testIterator(intArray);
  }
  long lADuration=outputGetNanoDuration("A",lStart);
  lStart=System.nanoTime();
  for (int i=0; i < testCount; i++) {
    testFor(intArray);
  }
  long lBDuration=outputGetNanoDuration("B",lStart);
  outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
}

Cannot find matching typeVariable for: /** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.text.NumberFormat;
import java.util.Locale;
/** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: String[] tryCount_inParamIdx0
For node: String[] tryCount_inParamIdx0 expected fqn: java.lang.String[] with type: Type11 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type11 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: tryCount_inParamIdx0 expected fqn: java.lang.String[] with type: Type11 got: java.lang.String[]
Did not find solution for node: int with type Type12
Cannot find matching typeVariable for: testCount
Did not find solution for node: testCount with type Type12
Cannot find matching typeVariable for: testCount
Cannot find matching typeVariable for: int testCount;

Cannot find matching typeVariable for: {
  int testCount;
  try {
    testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
  }
 catch (  ArrayIndexOutOfBoundsException|NumberFormatException x) {
    throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
  }
  int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
  long lStart=System.nanoTime();
  for (int i=0; i < testCount; i++) {
    testIterator(intArray);
  }
  long lADuration=outputGetNanoDuration("A",lStart);
  lStart=System.nanoTime();
  for (int i=0; i < testCount; i++) {
    testFor(intArray);
  }
  long lBDuration=outputGetNanoDuration("B",lStart);
  outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
}

Cannot find matching typeVariable for: public static final void main(String[] tryCount_inParamIdx0){
  int testCount;
  try {
    testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
  }
 catch (  ArrayIndexOutOfBoundsException|NumberFormatException x) {
    throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
  }
  int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
  long lStart=System.nanoTime();
  for (int i=0; i < testCount; i++) {
    testIterator(intArray);
  }
  long lADuration=outputGetNanoDuration("A",lStart);
  lStart=System.nanoTime();
  for (int i=0; i < testCount; i++) {
    testFor(intArray);
  }
  long lBDuration=outputGetNanoDuration("B",lStart);
  outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
}

Cannot find matching typeVariable for: /** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.text.NumberFormat;
import java.util.Locale;
/** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Did not find solution for node: testCount=Integer.parseInt(tryCount_inParamIdx0[0]) with type Type12
Did not find solution for node: testCount with type Type12
For node: Integer.parseInt(tryCount_inParamIdx0[0]) expected fqn: int with type: Type15 got: int
For node: Integer expected fqn: java.lang.Integer with type: Type14 got: java.lang.Integer
Cannot find matching typeVariable for: parseInt
For node: parseInt expected fqn: int with type: Type15 got: int
For node: tryCount_inParamIdx0[0] expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: tryCount_inParamIdx0 expected fqn: java.lang.String[] with type: Type11 got: java.lang.String[]
Did not find solution for node: 0 with type Type13
Cannot find matching typeVariable for: ArrayIndexOutOfBoundsException|NumberFormatException x
Did not find solution for node: ArrayIndexOutOfBoundsException|NumberFormatException x with type Type20
Did not find solution for node: ArrayIndexOutOfBoundsException|NumberFormatException with type Type20
For node: ArrayIndexOutOfBoundsException expected fqn: java.lang.ArrayIndexOutOfBoundsException with type: Type18 got: java.lang.ArrayIndexOutOfBoundsException
For node: ArrayIndexOutOfBoundsException expected fqn: java.lang.ArrayIndexOutOfBoundsException with type: Type18 got: java.lang.ArrayIndexOutOfBoundsException
For node: NumberFormatException expected fqn: java.lang.NumberFormatException with type: Type19 got: java.lang.NumberFormatException
For node: NumberFormatException expected fqn: java.lang.NumberFormatException with type: Type19 got: java.lang.NumberFormatException
Did not find solution for node: x with type Type20
Did not find solution for node: new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x) with type Type21
Did not find solution for node: IllegalArgumentException with type Type21
Did not find solution for node: IllegalArgumentException with type Type21
Did not find solution for node: "Missing or invalid command line parameter: The number of testCount for each test. " + x with type Type22
Did not find solution for node: "Missing or invalid command line parameter: The number of testCount for each test. " with type Type22
Did not find solution for node: x with type Type20
For node: int[] expected fqn: int[] with type: Type25 got: int[]
Did not find solution for node: int with type Type12
Cannot find matching typeVariable for: intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100}
For node: intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100} expected fqn: int[] with type: Type25 got: int[]
For node: intArray expected fqn: int[] with type: Type25 got: int[]
For node: new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100} expected fqn: int[] with type: Type25 got: int[]
For node: int[] expected fqn: int[] with type: Type25 got: int[]
Did not find solution for node: int with type Type12
Did not find solution for node: {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100} with type Type26
Did not find solution for node: 1 with type Type13
Did not find solution for node: 2 with type Type13
Did not find solution for node: 3 with type Type13
Did not find solution for node: 4 with type Type13
Did not find solution for node: 5 with type Type13
Did not find solution for node: 6 with type Type13
Did not find solution for node: 7 with type Type13
Did not find solution for node: 8 with type Type13
Did not find solution for node: 9 with type Type13
Did not find solution for node: 10 with type Type13
Did not find solution for node: 11 with type Type13
Did not find solution for node: 12 with type Type13
Did not find solution for node: 13 with type Type13
Did not find solution for node: 14 with type Type13
Did not find solution for node: 15 with type Type13
Did not find solution for node: 16 with type Type13
Did not find solution for node: 17 with type Type13
Did not find solution for node: 18 with type Type13
Did not find solution for node: 19 with type Type13
Did not find solution for node: 20 with type Type13
Did not find solution for node: 21 with type Type13
Did not find solution for node: 22 with type Type13
Did not find solution for node: 23 with type Type13
Did not find solution for node: 24 with type Type13
Did not find solution for node: 25 with type Type13
Did not find solution for node: 26 with type Type13
Did not find solution for node: 27 with type Type13
Did not find solution for node: 28 with type Type13
Did not find solution for node: 29 with type Type13
Did not find solution for node: 30 with type Type13
Did not find solution for node: 31 with type Type13
Did not find solution for node: 32 with type Type13
Did not find solution for node: 33 with type Type13
Did not find solution for node: 34 with type Type13
Did not find solution for node: 35 with type Type13
Did not find solution for node: 36 with type Type13
Did not find solution for node: 37 with type Type13
Did not find solution for node: 38 with type Type13
Did not find solution for node: 39 with type Type13
Did not find solution for node: 40 with type Type13
Did not find solution for node: 41 with type Type13
Did not find solution for node: 42 with type Type13
Did not find solution for node: 43 with type Type13
Did not find solution for node: 44 with type Type13
Did not find solution for node: 45 with type Type13
Did not find solution for node: 46 with type Type13
Did not find solution for node: 47 with type Type13
Did not find solution for node: 48 with type Type13
Did not find solution for node: 49 with type Type13
Did not find solution for node: 50 with type Type13
Did not find solution for node: 51 with type Type13
Did not find solution for node: 52 with type Type13
Did not find solution for node: 53 with type Type13
Did not find solution for node: 54 with type Type13
Did not find solution for node: 55 with type Type13
Did not find solution for node: 56 with type Type13
Did not find solution for node: 57 with type Type13
Did not find solution for node: 58 with type Type13
Did not find solution for node: 59 with type Type13
Did not find solution for node: 60 with type Type13
Did not find solution for node: 61 with type Type13
Did not find solution for node: 62 with type Type13
Did not find solution for node: 63 with type Type13
Did not find solution for node: 64 with type Type13
Did not find solution for node: 65 with type Type13
Did not find solution for node: 66 with type Type13
Did not find solution for node: 67 with type Type13
Did not find solution for node: 68 with type Type13
Did not find solution for node: 69 with type Type13
Did not find solution for node: 70 with type Type13
Did not find solution for node: 71 with type Type13
Did not find solution for node: 72 with type Type13
Did not find solution for node: 73 with type Type13
Did not find solution for node: 74 with type Type13
Did not find solution for node: 75 with type Type13
Did not find solution for node: 76 with type Type13
Did not find solution for node: 77 with type Type13
Did not find solution for node: 78 with type Type13
Did not find solution for node: 79 with type Type13
Did not find solution for node: 80 with type Type13
Did not find solution for node: 81 with type Type13
Did not find solution for node: 82 with type Type13
Did not find solution for node: 83 with type Type13
Did not find solution for node: 84 with type Type13
Did not find solution for node: 85 with type Type13
Did not find solution for node: 86 with type Type13
Did not find solution for node: 87 with type Type13
Did not find solution for node: 88 with type Type13
Did not find solution for node: 89 with type Type13
Did not find solution for node: 90 with type Type13
Did not find solution for node: 91 with type Type13
Did not find solution for node: 92 with type Type13
Did not find solution for node: 93 with type Type13
Did not find solution for node: 94 with type Type13
Did not find solution for node: 95 with type Type13
Did not find solution for node: 96 with type Type13
Did not find solution for node: 97 with type Type13
Did not find solution for node: 98 with type Type13
Did not find solution for node: 99 with type Type13
Did not find solution for node: 100 with type Type13
Did not find solution for node: long with type Type3
Cannot find matching typeVariable for: lStart=System.nanoTime()
Did not find solution for node: lStart=System.nanoTime() with type Type3
Did not find solution for node: lStart with type Type3
For node: System.nanoTime() expected fqn: long with type: Type29 got: long
For node: System expected fqn: java.lang.System with type: Type28 got: java.lang.System
Cannot find matching typeVariable for: nanoTime
For node: nanoTime expected fqn: long with type: Type29 got: long
Cannot find matching typeVariable for: int i=0
Did not find solution for node: int i=0 with type Type12
Did not find solution for node: int with type Type12
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type12
Did not find solution for node: i with type Type12
Did not find solution for node: 0 with type Type13
For node: i < testCount expected fqn: boolean with type: Type31 got: boolean
Did not find solution for node: i with type Type12
Did not find solution for node: testCount with type Type12
Did not find solution for node: i++ with type Type12
Did not find solution for node: i with type Type12
For node: testIterator(intArray) expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: testIterator
For node: testIterator expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: intArray
For node: intArray expected fqn: int[] with type: Type2 got: void
Did not find solution for node: long with type Type3
Cannot find matching typeVariable for: lADuration=outputGetNanoDuration("A",lStart)
Did not find solution for node: lADuration=outputGetNanoDuration("A",lStart) with type Type3
Did not find solution for node: lADuration with type Type3
Did not find solution for node: outputGetNanoDuration("A",lStart) with type Type3
Cannot find matching typeVariable for: outputGetNanoDuration
Did not find solution for node: outputGetNanoDuration with type Type3
Did not find solution for node: "A" with type Type22
Cannot find matching typeVariable for: lStart
Did not find solution for node: lStart with type Type3
Did not find solution for node: lStart=System.nanoTime() with type Type3
Did not find solution for node: lStart with type Type3
For node: System.nanoTime() expected fqn: long with type: Type30 got: long
For node: System expected fqn: java.lang.System with type: Type28 got: java.lang.System
Cannot find matching typeVariable for: nanoTime
For node: nanoTime expected fqn: long with type: Type30 got: long
Cannot find matching typeVariable for: int i=0
Did not find solution for node: int i=0 with type Type12
Did not find solution for node: int with type Type12
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type12
Did not find solution for node: i with type Type12
Did not find solution for node: 0 with type Type13
For node: i < testCount expected fqn: boolean with type: Type31 got: boolean
Did not find solution for node: i with type Type12
Did not find solution for node: testCount with type Type12
Did not find solution for node: i++ with type Type12
Did not find solution for node: i with type Type12
For node: testFor(intArray) expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: testFor
For node: testFor expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: intArray
For node: intArray expected fqn: int[] with type: Type2 got: void
Did not find solution for node: long with type Type3
Cannot find matching typeVariable for: lBDuration=outputGetNanoDuration("B",lStart)
Did not find solution for node: lBDuration=outputGetNanoDuration("B",lStart) with type Type3
Did not find solution for node: lBDuration with type Type3
Did not find solution for node: outputGetNanoDuration("B",lStart) with type Type3
Cannot find matching typeVariable for: outputGetNanoDuration
Did not find solution for node: outputGetNanoDuration with type Type3
Did not find solution for node: "B" with type Type22
Cannot find matching typeVariable for: lStart
Did not find solution for node: lStart with type Type3
Did not find solution for node: outputGetABTestNanoDifference(lADuration,lBDuration,"A","B") with type Type3
Cannot find matching typeVariable for: outputGetABTestNanoDifference
Did not find solution for node: outputGetABTestNanoDifference with type Type3
Cannot find matching typeVariable for: lADuration
Did not find solution for node: lADuration with type Type3
Cannot find matching typeVariable for: lBDuration
Did not find solution for node: lBDuration with type Type3
Did not find solution for node: "A" with type Type22
Did not find solution for node: "B" with type Type22
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: testIterator
Cannot find matching typeVariable for: private static final void testIterator(int[] int_array){
  int total=0;
  for (int i=0; i < int_array.length; i++) {
    total+=int_array[i];
  }
}

Cannot find matching typeVariable for: /** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.text.NumberFormat;
import java.util.Locale;
/** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: int[] int_array
For node: int[] int_array expected fqn: int[] with type: Type25 got: int[]
For node: int[] expected fqn: int[] with type: Type25 got: int[]
Did not find solution for node: int with type Type12
For node: int_array expected fqn: int[] with type: Type25 got: int[]
Did not find solution for node: int with type Type12
Cannot find matching typeVariable for: total=0
Did not find solution for node: total=0 with type Type12
Did not find solution for node: total with type Type12
Did not find solution for node: 0 with type Type13
Cannot find matching typeVariable for: int i=0
Did not find solution for node: int i=0 with type Type12
Did not find solution for node: int with type Type12
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type12
Did not find solution for node: i with type Type12
Did not find solution for node: 0 with type Type13
For node: i < int_array.length expected fqn: boolean with type: Type31 got: boolean
Did not find solution for node: i with type Type12
Cannot find matching typeVariable for: int_array.length
For node: int_array.length expected fqn: int with type: Type31 got: boolean
For node: int_array expected fqn: int[] with type: Type25 got: int[]
For node: length expected fqn: int with type: Type33 got: int
Did not find solution for node: i++ with type Type12
Did not find solution for node: i with type Type12
Did not find solution for node: total+=int_array[i] with type Type12
Did not find solution for node: total with type Type12
Did not find solution for node: int_array[i] with type Type12
For node: int_array expected fqn: int[] with type: Type25 got: int[]
Cannot find matching typeVariable for: i
Did not find solution for node: i with type Type12
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: testFor
Cannot find matching typeVariable for: private static final void testFor(int[] int_array){
  int total=0;
  for (  int i : int_array) {
    total+=i;
  }
}

Cannot find matching typeVariable for: /** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.text.NumberFormat;
import java.util.Locale;
/** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: int[] int_array
For node: int[] int_array expected fqn: int[] with type: Type25 got: int[]
For node: int[] expected fqn: int[] with type: Type25 got: int[]
Did not find solution for node: int with type Type12
For node: int_array expected fqn: int[] with type: Type25 got: int[]
Did not find solution for node: int with type Type12
Cannot find matching typeVariable for: total=0
Did not find solution for node: total=0 with type Type12
Did not find solution for node: total with type Type12
Did not find solution for node: 0 with type Type13
Cannot find matching typeVariable for: int i
Did not find solution for node: int i with type Type12
Did not find solution for node: int with type Type12
Did not find solution for node: i with type Type12
Cannot find matching typeVariable for: int_array
Cannot find matching typeVariable for: for (int i : int_array) {
  total+=i;
}

Cannot find matching typeVariable for: {
  int total=0;
  for (  int i : int_array) {
    total+=i;
  }
}

Cannot find matching typeVariable for: private static final void testFor(int[] int_array){
  int total=0;
  for (  int i : int_array) {
    total+=i;
  }
}

Cannot find matching typeVariable for: /** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.text.NumberFormat;
import java.util.Locale;
/** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Did not find solution for node: total+=i with type Type12
Did not find solution for node: total with type Type12
Did not find solution for node: i with type Type12
Did not find solution for node: long with type Type3
Cannot find matching typeVariable for: outputGetNanoDuration
Cannot find matching typeVariable for: public static final long outputGetNanoDuration(String s_testName,long l_nanoStart){
  long lDuration=System.nanoTime() - l_nanoStart;
  System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
  return lDuration;
}

Cannot find matching typeVariable for: /** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.text.NumberFormat;
import java.util.Locale;
/** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: String s_testName
Did not find solution for node: String s_testName with type Type22
Did not find solution for node: String with type Type22
Did not find solution for node: String with type Type22
Did not find solution for node: s_testName with type Type22
Cannot find matching typeVariable for: long l_nanoStart
Did not find solution for node: long l_nanoStart with type Type3
Did not find solution for node: long with type Type3
Did not find solution for node: l_nanoStart with type Type3
Did not find solution for node: long with type Type3
Cannot find matching typeVariable for: lDuration=System.nanoTime() - l_nanoStart
Did not find solution for node: lDuration=System.nanoTime() - l_nanoStart with type Type3
Did not find solution for node: lDuration with type Type3
Did not find solution for node: System.nanoTime() - l_nanoStart with type Type35
Did not find solution for node: System.nanoTime() with type Type35
For node: System expected fqn: java.lang.System with type: Type34 got: java.lang.System
Cannot find matching typeVariable for: nanoTime
Did not find solution for node: nanoTime with type Type35
Did not find solution for node: l_nanoStart with type Type3
For node: System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds") expected fqn: void with type: Type41 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type41 got: void
For node: System expected fqn: java.lang.System with type: Type34 got: java.lang.System
Did not find solution for node: out with type Type40
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type41 got: void
Did not find solution for node: "Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds" with type Type22
Did not find solution for node: "Test " with type Type22
Did not find solution for node: s_testName with type Type22
Did not find solution for node: ": " with type Type22
For node: nf.format(lDuration) expected fqn: java.lang.String with type: Type37 got: java.lang.String
Did not find solution for node: nf with type Type4
Cannot find matching typeVariable for: format
For node: format expected fqn: java.lang.String with type: Type37 got: java.lang.String
Did not find solution for node: lDuration with type Type3
Did not find solution for node: " nanoseconds" with type Type22
Did not find solution for node: lDuration with type Type3
Did not find solution for node: long with type Type3
Cannot find matching typeVariable for: outputGetABTestNanoDifference
Cannot find matching typeVariable for: public static final long outputGetABTestNanoDifference(long l_aDuration,long l_bDuration,String s_aTestName,String s_bTestName){
  long lDiff=-1;
  double dPct=-1.0;
  String sFaster=null;
  if (l_aDuration > l_bDuration) {
    lDiff=l_aDuration - l_bDuration;
    dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
    sFaster="B";
  }
 else {
    lDiff=l_bDuration - l_aDuration;
    dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
    sFaster="A";
  }
  System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
  return lDiff;
}

Cannot find matching typeVariable for: /** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.text.NumberFormat;
import java.util.Locale;
/** 
 * &lt;P&gt; {@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;
 * @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 */
public class Class_10 {
  public static final NumberFormat nf=NumberFormat.getNumberInstance(Locale.US);
  public static final void main(  String[] tryCount_inParamIdx0){
    int testCount;
    try {
      testCount=Integer.parseInt(tryCount_inParamIdx0[0]);
    }
 catch (    ArrayIndexOutOfBoundsException|NumberFormatException x) {
      throw new IllegalArgumentException("Missing or invalid command line parameter: The number of testCount for each test. " + x);
    }
    int[] intArray=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    long lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testIterator(intArray);
    }
    long lADuration=outputGetNanoDuration("A",lStart);
    lStart=System.nanoTime();
    for (int i=0; i < testCount; i++) {
      testFor(intArray);
    }
    long lBDuration=outputGetNanoDuration("B",lStart);
    outputGetABTestNanoDifference(lADuration,lBDuration,"A","B");
  }
  private static final void testIterator(  int[] int_array){
    int total=0;
    for (int i=0; i < int_array.length; i++) {
      total+=int_array[i];
    }
  }
  private static final void testFor(  int[] int_array){
    int total=0;
    for (    int i : int_array) {
      total+=i;
    }
  }
  public static final long outputGetNanoDuration(  String s_testName,  long l_nanoStart){
    long lDuration=System.nanoTime() - l_nanoStart;
    System.out.println("Test " + s_testName + ": "+ nf.format(lDuration)+ " nanoseconds");
    return lDuration;
  }
  public static final long outputGetABTestNanoDifference(  long l_aDuration,  long l_bDuration,  String s_aTestName,  String s_bTestName){
    long lDiff=-1;
    double dPct=-1.0;
    String sFaster=null;
    if (l_aDuration > l_bDuration) {
      lDiff=l_aDuration - l_bDuration;
      dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
      sFaster="B";
    }
 else {
      lDiff=l_bDuration - l_aDuration;
      dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
      sFaster="A";
    }
    System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)");
    return lDiff;
  }
}

Cannot find matching typeVariable for: long l_aDuration
Did not find solution for node: long l_aDuration with type Type3
Did not find solution for node: long with type Type3
Did not find solution for node: l_aDuration with type Type3
Cannot find matching typeVariable for: long l_bDuration
Did not find solution for node: long l_bDuration with type Type3
Did not find solution for node: long with type Type3
Did not find solution for node: l_bDuration with type Type3
Cannot find matching typeVariable for: String s_aTestName
Did not find solution for node: String s_aTestName with type Type22
Did not find solution for node: String with type Type22
Did not find solution for node: String with type Type22
Did not find solution for node: s_aTestName with type Type22
Cannot find matching typeVariable for: String s_bTestName
Did not find solution for node: String s_bTestName with type Type22
Did not find solution for node: String with type Type22
Did not find solution for node: String with type Type22
Did not find solution for node: s_bTestName with type Type22
Did not find solution for node: long with type Type3
Cannot find matching typeVariable for: lDiff=-1
Did not find solution for node: lDiff=-1 with type Type3
Did not find solution for node: lDiff with type Type3
Did not find solution for node: -1 with type Type13
Did not find solution for node: 1 with type Type13
Did not find solution for node: double with type Type44
Cannot find matching typeVariable for: dPct=-1.0
Did not find solution for node: dPct=-1.0 with type Type44
Did not find solution for node: dPct with type Type44
Did not find solution for node: -1.0 with type Type45
Did not find solution for node: 1.0 with type Type45
Did not find solution for node: String with type Type22
Did not find solution for node: String with type Type22
Cannot find matching typeVariable for: sFaster=null
Did not find solution for node: sFaster=null with type Type22
Did not find solution for node: sFaster with type Type22
Did not find solution for node: null with type Type46
For node: l_aDuration > l_bDuration expected fqn: boolean with type: Type31 got: boolean
Did not find solution for node: l_aDuration with type Type3
Did not find solution for node: l_bDuration with type Type3
Did not find solution for node: lDiff=l_aDuration - l_bDuration with type Type3
Did not find solution for node: lDiff with type Type3
Did not find solution for node: l_aDuration - l_bDuration with type Type3
Did not find solution for node: l_aDuration with type Type3
Did not find solution for node: l_bDuration with type Type3
Did not find solution for node: dPct=100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5) with type Type44
Did not find solution for node: dPct with type Type44
Did not find solution for node: 100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5) with type Type45
Did not find solution for node: 100.00 with type Type45
Did not find solution for node: (l_bDuration * 100.0 / l_aDuration + 0.5) with type Type3
Did not find solution for node: l_bDuration * 100.0 / l_aDuration + 0.5 with type Type3
Did not find solution for node: l_bDuration * 100.0 / l_aDuration with type Type3
Did not find solution for node: l_bDuration * 100.0 with type Type3
Did not find solution for node: l_bDuration with type Type3
Did not find solution for node: 100.0 with type Type45
Did not find solution for node: l_aDuration with type Type3
Did not find solution for node: 0.5 with type Type45
Did not find solution for node: sFaster="B" with type Type22
Did not find solution for node: sFaster with type Type22
Did not find solution for node: "B" with type Type22
Did not find solution for node: lDiff=l_bDuration - l_aDuration with type Type3
Did not find solution for node: lDiff with type Type3
Did not find solution for node: l_bDuration - l_aDuration with type Type3
Did not find solution for node: l_bDuration with type Type3
Did not find solution for node: l_aDuration with type Type3
Did not find solution for node: dPct=100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5) with type Type44
Did not find solution for node: dPct with type Type44
Did not find solution for node: 100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5) with type Type45
Did not find solution for node: 100.00 with type Type45
Did not find solution for node: (l_aDuration * 100.0 / l_bDuration + 0.5) with type Type3
Did not find solution for node: l_aDuration * 100.0 / l_bDuration + 0.5 with type Type3
Did not find solution for node: l_aDuration * 100.0 / l_bDuration with type Type3
Did not find solution for node: l_aDuration * 100.0 with type Type3
Did not find solution for node: l_aDuration with type Type3
Did not find solution for node: 100.0 with type Type45
Did not find solution for node: l_bDuration with type Type3
Did not find solution for node: 0.5 with type Type45
Did not find solution for node: sFaster="A" with type Type22
Did not find solution for node: sFaster with type Type22
Did not find solution for node: "A" with type Type22
For node: System.out.println(sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)") expected fqn: void with type: Type49 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type49 got: void
For node: System expected fqn: java.lang.System with type: Type47 got: java.lang.System
Did not find solution for node: out with type Type48
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type49 got: void
Did not find solution for node: sFaster + " faster by " + nf.format(lDiff)+ " nanoseconds ("+ dPct+ "% faster)" with type Type22
Did not find solution for node: sFaster with type Type22
Did not find solution for node: " faster by " with type Type22
Did not find solution for node: nf.format(lDiff) with type Type39
Did not find solution for node: nf with type Type4
Cannot find matching typeVariable for: format
Did not find solution for node: format with type Type39
Did not find solution for node: lDiff with type Type3
Did not find solution for node: " nanoseconds (" with type Type22
Cannot find matching typeVariable for: dPct
Did not find solution for node: dPct with type Type22
Did not find solution for node: "% faster)" with type Type22
Did not find solution for node: lDiff with type Type3
{Checked=366, Analyzed=61, Unsolved=305, Incorrect=5, Correct=56}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
double=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
double=InfixExpression: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
double=NumberLiteral: {Checked=7, Analyzed=0, Unsolved=7, Incorrect=0, Correct=0}
double=ParenthesizedExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
double=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
double=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
double=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
double=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=ArrayAccess: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=ArrayCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=ArrayInitializer: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=ArrayType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
int=Assignment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=107, Analyzed=0, Unsolved=107, Incorrect=0, Correct=0}
int=PostfixExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=11, Analyzed=0, Unsolved=11, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=28, Analyzed=9, Unsolved=19, Incorrect=2, Correct=7}
int=SingleVariableDeclaration: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
int=VariableDeclarationExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=7, Analyzed=1, Unsolved=6, Incorrect=0, Correct=1}
java=ArrayAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=InfixExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=2, Correct=0}
java=SimpleName: {Checked=38, Analyzed=14, Unsolved=24, Incorrect=0, Correct=14}
java=SimpleType: {Checked=9, Analyzed=3, Unsolved=6, Incorrect=0, Correct=3}
java=SingleVariableDeclaration: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=13, Analyzed=0, Unsolved=13, Incorrect=0, Correct=0}
java=UnionType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
long=Assignment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
long=InfixExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
long=MethodInvocation: {Checked=6, Analyzed=2, Unsolved=4, Incorrect=0, Correct=2}
long=PrimitiveType: {Checked=10, Analyzed=0, Unsolved=10, Incorrect=0, Correct=0}
long=SimpleName: {Checked=36, Analyzed=2, Unsolved=34, Incorrect=0, Correct=2}
long=SingleVariableDeclaration: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
long=VariableDeclarationFragment: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
null=NullLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
void=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
Total stats
{Checked=366, Analyzed=61, Unsolved=305, Incorrect=5, Correct=56}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
double=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
double=InfixExpression: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
double=NumberLiteral: {Checked=7, Analyzed=0, Unsolved=7, Incorrect=0, Correct=0}
double=ParenthesizedExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
double=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
double=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
double=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
double=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=ArrayAccess: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=ArrayCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=ArrayInitializer: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=ArrayType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
int=Assignment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=107, Analyzed=0, Unsolved=107, Incorrect=0, Correct=0}
int=PostfixExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=11, Analyzed=0, Unsolved=11, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=28, Analyzed=9, Unsolved=19, Incorrect=2, Correct=7}
int=SingleVariableDeclaration: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
int=VariableDeclarationExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=7, Analyzed=1, Unsolved=6, Incorrect=0, Correct=1}
java=ArrayAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=InfixExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=2, Correct=0}
java=SimpleName: {Checked=38, Analyzed=14, Unsolved=24, Incorrect=0, Correct=14}
java=SimpleType: {Checked=9, Analyzed=3, Unsolved=6, Incorrect=0, Correct=3}
java=SingleVariableDeclaration: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=13, Analyzed=0, Unsolved=13, Incorrect=0, Correct=0}
java=UnionType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
long=Assignment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
long=InfixExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
long=MethodInvocation: {Checked=6, Analyzed=2, Unsolved=4, Incorrect=0, Correct=2}
long=PrimitiveType: {Checked=10, Analyzed=0, Unsolved=10, Incorrect=0, Correct=0}
long=SimpleName: {Checked=36, Analyzed=2, Unsolved=34, Incorrect=0, Correct=2}
long=SingleVariableDeclaration: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
long=VariableDeclarationFragment: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
null=NullLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
void=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
,SimpleName,0,1,0,0,1
boolean,InfixExpression,4,4,4,0,0
double,Assignment,0,2,0,0,2
double,InfixExpression,0,8,0,0,8
double,NumberLiteral,0,7,0,0,7
double,ParenthesizedExpression,0,2,0,0,2
double,PrefixExpression,0,1,0,0,1
double,PrimitiveType,0,1,0,0,1
double,SimpleName,0,4,0,0,4
double,VariableDeclarationFragment,0,1,0,0,1
int,ArrayAccess,0,1,0,0,1
int,ArrayCreation,1,1,1,0,0
int,ArrayInitializer,0,1,0,0,1
int,ArrayType,4,4,4,0,0
int,Assignment,0,3,0,0,3
int,MethodInvocation,1,1,1,0,0
int,NumberLiteral,0,107,0,0,107
int,PostfixExpression,0,3,0,0,3
int,PrefixExpression,0,1,0,0,1
int,PrimitiveType,0,11,0,0,11
int,QualifiedName,1,1,0,1,0
int,SimpleName,9,28,7,2,19
int,SingleVariableDeclaration,2,3,2,0,1
int,VariableDeclarationExpression,0,3,0,0,3
int,VariableDeclarationFragment,1,7,1,0,6
java,ArrayAccess,1,1,1,0,0
java,ArrayType,1,1,1,0,0
java,Assignment,0,2,0,0,2
java,ClassInstanceCreation,0,1,0,0,1
java,InfixExpression,0,3,0,0,3
java,MethodInvocation,1,3,1,0,2
java,QualifiedName,2,3,0,2,1
java,SimpleName,14,38,14,0,24
java,SimpleType,3,9,3,0,6
java,SingleVariableDeclaration,1,5,1,0,4
java,StringLiteral,0,13,0,0,13
java,UnionType,0,1,0,0,1
java,VariableDeclarationFragment,0,2,0,0,2
long,Assignment,0,3,0,0,3
long,InfixExpression,0,3,0,0,3
long,MethodInvocation,2,6,2,0,4
long,PrimitiveType,0,10,0,0,10
long,SimpleName,2,36,2,0,34
long,SingleVariableDeclaration,0,3,0,0,3
long,VariableDeclarationFragment,0,5,0,0,5
null,NullLiteral,0,1,0,0,1
void,MethodInvocation,4,4,4,0,0
void,PrimitiveType,3,3,3,0,0
void,SimpleName,4,4,4,0,0
