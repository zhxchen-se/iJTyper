echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/JodaTime09.java
Expect check=32
Cannot find matching typeVariable for: public class JodaTime09 {
  public static void main(  String[] args){
    final String string_from_3rd_party="GMT+08:00";
    System.out.println(TimeZone.getTimeZone(string_from_3rd_party));
    System.out.println(DateTimeZone.forID(string_from_3rd_party));
  }
}

Cannot find matching typeVariable for: JodaTime09
Cannot find matching typeVariable for: public class JodaTime09 {
  public static void main(  String[] args){
    final String string_from_3rd_party="GMT+08:00";
    System.out.println(TimeZone.getTimeZone(string_from_3rd_party));
    System.out.println(DateTimeZone.forID(string_from_3rd_party));
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.util.TimeZone;
import org.joda.time.DateTimeZone;
public class JodaTime09 {
  public static void main(  String[] args){
    final String string_from_3rd_party="GMT+08:00";
    System.out.println(TimeZone.getTimeZone(string_from_3rd_party));
    System.out.println(DateTimeZone.forID(string_from_3rd_party));
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static void main(String[] args){
  final String string_from_3rd_party="GMT+08:00";
  System.out.println(TimeZone.getTimeZone(string_from_3rd_party));
  System.out.println(DateTimeZone.forID(string_from_3rd_party));
}

Cannot find matching typeVariable for: public class JodaTime09 {
  public static void main(  String[] args){
    final String string_from_3rd_party="GMT+08:00";
    System.out.println(TimeZone.getTimeZone(string_from_3rd_party));
    System.out.println(DateTimeZone.forID(string_from_3rd_party));
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.util.TimeZone;
import org.joda.time.DateTimeZone;
public class JodaTime09 {
  public static void main(  String[] args){
    final String string_from_3rd_party="GMT+08:00";
    System.out.println(TimeZone.getTimeZone(string_from_3rd_party));
    System.out.println(DateTimeZone.forID(string_from_3rd_party));
  }
}

Cannot find matching typeVariable for: String[] args
For node: String[] args expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: args expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
Cannot find matching typeVariable for: string_from_3rd_party="GMT+08:00"
For node: string_from_3rd_party="GMT+08:00" expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: string_from_3rd_party expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: "GMT+08:00" expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: System.out.println(TimeZone.getTimeZone(string_from_3rd_party)) expected fqn: void with type: Type12 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type12 got: void
For node: System expected fqn: java.lang.System with type: Type10 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type11 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type12 got: void
Did not find solution for node: TimeZone.getTimeZone(string_from_3rd_party) with type Type7
Did not find solution for node: TimeZone with type Type6
Cannot find matching typeVariable for: getTimeZone
Did not find solution for node: getTimeZone with type Type7
For node: string_from_3rd_party expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: System.out.println(DateTimeZone.forID(string_from_3rd_party)) expected fqn: void with type: Type19 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type19 got: void
For node: System expected fqn: java.lang.System with type: Type10 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type11 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type19 got: void
Did not find solution for node: DateTimeZone.forID(string_from_3rd_party) with type Type16
Did not find solution for node: DateTimeZone with type Type15
Cannot find matching typeVariable for: forID
Did not find solution for node: forID with type Type16
For node: string_from_3rd_party expected fqn: java.lang.String with type: Type3 got: java.lang.String
{Checked=29, Analyzed=23, Unsolved=6, Incorrect=2, Correct=21}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
java=SimpleName: {Checked=12, Analyzed=10, Unsolved=2, Incorrect=0, Correct=10}
java=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
Total stats
{Checked=29, Analyzed=23, Unsolved=6, Incorrect=2, Correct=21}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
java=SimpleName: {Checked=12, Analyzed=10, Unsolved=2, Incorrect=0, Correct=10}
java=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java,ArrayType,1,1,1,0,0
java,MethodInvocation,0,1,0,0,1
java,QualifiedName,2,2,0,2,0
java,SimpleName,10,12,10,0,2
java,SimpleType,2,2,2,0,0
java,SingleVariableDeclaration,1,1,1,0,0
java,StringLiteral,1,1,1,0,0
java,VariableDeclarationFragment,1,1,1,0,0
org.joda.time.,MethodInvocation,0,1,0,0,1
org.joda.time.,SimpleName,0,2,0,0,2
void,MethodInvocation,2,2,2,0,0
void,PrimitiveType,1,1,1,0,0
void,SimpleName,2,2,2,0,0
