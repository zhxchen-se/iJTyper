echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/hibernate_class_15.java
Expect check=260
Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Did not find solution for node: hibernate_class_15 with type Type1
For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
Cannot find matching typeVariable for: id
For node: id expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
Cannot find matching typeVariable for: id
Cannot find matching typeVariable for: private Long id;

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: Date expected fqn: java.util.Date with type: Type3 got: java.util.Date
For node: Date expected fqn: java.util.Date with type: Type3 got: java.util.Date
Cannot find matching typeVariable for: creationTimeStamp
For node: creationTimeStamp expected fqn: java.util.Date with type: Type3 got: java.util.Date
Cannot find matching typeVariable for: creationTimeStamp
Cannot find matching typeVariable for: private Date creationTimeStamp;

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: name
For node: name expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: name
Cannot find matching typeVariable for: private String name;

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: type
For node: type expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: type
Cannot find matching typeVariable for: private String type;

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: description
For node: description expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: description
Cannot find matching typeVariable for: private String description;

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
Cannot find matching typeVariable for: length
For node: length expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
Cannot find matching typeVariable for: length
Cannot find matching typeVariable for: private Long length;

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: byte[] expected fqn: byte[] with type: Type6 got: byte[]
Did not find solution for node: byte with type Type5
Cannot find matching typeVariable for: content
For node: content expected fqn: byte[] with type: Type6 got: byte[]
Cannot find matching typeVariable for: content
Cannot find matching typeVariable for: private byte[] content;

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: setContentBlob
Cannot find matching typeVariable for: /** 
 * Don't invoke this. Used by Hibernate only. 
 */
public void setContentBlob(Blob imageBlob){
  this.content=this.toByteArray(imageBlob);
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: Blob imageBlob
Did not find solution for node: Blob imageBlob with type Type8
Did not find solution for node: Blob with type Type8
Did not find solution for node: Blob with type Type8
Did not find solution for node: imageBlob with type Type8
For node: this.content=this.toByteArray(imageBlob) expected fqn: byte[] with type: Type6 got: byte[]
For node: this.content expected fqn: byte[] with type: Type6 got: byte[]
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: content
For node: content expected fqn: byte[] with type: Type6 got: byte[]
For node: this.toByteArray(imageBlob) expected fqn: byte[] with type: Type9 got: byte[]
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: toByteArray
For node: toByteArray expected fqn: byte[] with type: Type9 got: byte[]
Did not find solution for node: imageBlob with type Type8
Did not find solution for node: Blob with type Type8
Did not find solution for node: Blob with type Type8
Cannot find matching typeVariable for: getContentBlob
Cannot find matching typeVariable for: /** 
 * Don't invoke this. Used by Hibernate only. 
 */
public Blob getContentBlob(){
  return Hibernate.createBlob(this.content);
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

No match for actual type MethodInvocation: Hibernate.createBlob(this.content) and also not find solution for: Type13
Did not find solution for node: Hibernate with type Type12
For node: this.content expected fqn: byte[] with type: Type6 got: byte[]
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: content
For node: content expected fqn: byte[] with type: Type6 got: byte[]
For node: byte[] expected fqn: byte[] with type: Type6 got: byte[]
Did not find solution for node: byte with type Type5
Cannot find matching typeVariable for: toByteArray
Cannot find matching typeVariable for: private byte[] toByteArray(Blob fromBlob){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try {
    return toByteArrayImpl(fromBlob,baos);
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (baos != null) {
      try {
        baos.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: Blob fromBlob
Did not find solution for node: Blob fromBlob with type Type8
Did not find solution for node: Blob with type Type8
Did not find solution for node: Blob with type Type8
Did not find solution for node: fromBlob with type Type8
Did not find solution for node: ByteArrayOutputStream with type Type16
Did not find solution for node: ByteArrayOutputStream with type Type16
Cannot find matching typeVariable for: baos=new ByteArrayOutputStream()
Did not find solution for node: baos=new ByteArrayOutputStream() with type Type16
Did not find solution for node: baos with type Type16
Did not find solution for node: new ByteArrayOutputStream() with type Type16
Did not find solution for node: ByteArrayOutputStream with type Type16
Did not find solution for node: ByteArrayOutputStream with type Type16
For node: toByteArrayImpl(fromBlob,baos) expected fqn: byte[] with type: Type6 got: byte[]
Cannot find matching typeVariable for: toByteArrayImpl
For node: toByteArrayImpl expected fqn: byte[] with type: Type6 got: byte[]
Cannot find matching typeVariable for: fromBlob
For node: fromBlob expected fqn: java.sql.Blob with type: Type6 got: byte[]
Cannot find matching typeVariable for: baos
For node: baos expected fqn: java.io.ByteArrayOutputStream with type: Type6 got: byte[]
Cannot find matching typeVariable for: SQLException e
For node: SQLException e expected fqn: java.sql.SQLException with type: Type18 got: java.sql.SQLException
For node: SQLException expected fqn: java.sql.SQLException with type: Type18 got: java.sql.SQLException
For node: SQLException expected fqn: java.sql.SQLException with type: Type18 got: java.sql.SQLException
For node: e expected fqn: java.sql.SQLException with type: Type18 got: java.sql.SQLException
For node: new RuntimeException(e) expected fqn: java.lang.RuntimeException with type: Type19 got: java.lang.RuntimeException
For node: RuntimeException expected fqn: java.lang.RuntimeException with type: Type19 got: java.lang.RuntimeException
For node: RuntimeException expected fqn: java.lang.RuntimeException with type: Type19 got: java.lang.RuntimeException
For node: e expected fqn: java.sql.SQLException with type: Type18 got: java.sql.SQLException
Cannot find matching typeVariable for: IOException e
For node: IOException e expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: IOException expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: IOException expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: e expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: new RuntimeException(e) expected fqn: java.lang.RuntimeException with type: Type19 got: java.lang.RuntimeException
For node: RuntimeException expected fqn: java.lang.RuntimeException with type: Type19 got: java.lang.RuntimeException
For node: RuntimeException expected fqn: java.lang.RuntimeException with type: Type19 got: java.lang.RuntimeException
For node: e expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: baos != null expected fqn: boolean with type: Type26 got: boolean
Did not find solution for node: baos with type Type16
Did not find solution for node: null with type Type25
Did not find solution for node: baos.close() with type Type27
Did not find solution for node: baos with type Type16
Cannot find matching typeVariable for: close
Did not find solution for node: close with type Type27
Cannot find matching typeVariable for: IOException ex
For node: IOException ex expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: IOException expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: IOException expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: ex expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: byte[] expected fqn: byte[] with type: Type6 got: byte[]
Did not find solution for node: byte with type Type5
Cannot find matching typeVariable for: toByteArrayImpl
Cannot find matching typeVariable for: private byte[] toByteArrayImpl(Blob fromBlob,ByteArrayOutputStream baos) throws SQLException, IOException {
  byte[] buf=new byte[4000];
  InputStream is=fromBlob.getBinaryStream();
  try {
    for (; ; ) {
      int dataSize=is.read(buf);
      if (dataSize == -1)       break;
      baos.write(buf,0,dataSize);
    }
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException ex) {
      }
    }
  }
  return baos.toByteArray();
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: Blob fromBlob
Did not find solution for node: Blob fromBlob with type Type8
Did not find solution for node: Blob with type Type8
Did not find solution for node: Blob with type Type8
Did not find solution for node: fromBlob with type Type8
Cannot find matching typeVariable for: ByteArrayOutputStream baos
Did not find solution for node: ByteArrayOutputStream baos with type Type16
Did not find solution for node: ByteArrayOutputStream with type Type16
Did not find solution for node: ByteArrayOutputStream with type Type16
Did not find solution for node: baos with type Type16
For node: SQLException expected fqn: java.sql.SQLException with type: Type18 got: java.sql.SQLException
For node: SQLException expected fqn: java.sql.SQLException with type: Type18 got: java.sql.SQLException
For node: IOException expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: IOException expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: byte[] expected fqn: byte[] with type: Type6 got: byte[]
Did not find solution for node: byte with type Type5
Cannot find matching typeVariable for: buf=new byte[4000]
For node: buf=new byte[4000] expected fqn: byte[] with type: Type6 got: byte[]
For node: buf expected fqn: byte[] with type: Type6 got: byte[]
For node: new byte[4000] expected fqn: byte[] with type: Type6 got: byte[]
For node: byte[] expected fqn: byte[] with type: Type6 got: byte[]
Did not find solution for node: byte with type Type5
Did not find solution for node: 4000 with type Type29
Did not find solution for node: InputStream with type Type31
Did not find solution for node: InputStream with type Type31
Cannot find matching typeVariable for: is=fromBlob.getBinaryStream()
Did not find solution for node: is=fromBlob.getBinaryStream() with type Type31
Did not find solution for node: is with type Type31
For node: fromBlob.getBinaryStream() expected fqn: java.io.InputStream with type: Type32 got: java.io.InputStream
Did not find solution for node: fromBlob with type Type8
Cannot find matching typeVariable for: getBinaryStream
For node: getBinaryStream expected fqn: java.io.InputStream with type: Type32 got: java.io.InputStream
Did not find solution for node: int with type Type30
Cannot find matching typeVariable for: dataSize=is.read(buf)
Did not find solution for node: dataSize=is.read(buf) with type Type30
Did not find solution for node: dataSize with type Type30
Did not find solution for node: is.read(buf) with type Type34
Did not find solution for node: is with type Type31
Cannot find matching typeVariable for: read
Did not find solution for node: read with type Type34
For node: buf expected fqn: byte[] with type: Type6 got: byte[]
For node: dataSize == -1 expected fqn: boolean with type: Type26 got: boolean
Did not find solution for node: dataSize with type Type30
Did not find solution for node: -1 with type Type5
Did not find solution for node: 1 with type Type5
Did not find solution for node: baos.write(buf,0,dataSize) with type Type38
Did not find solution for node: baos with type Type16
Cannot find matching typeVariable for: write
Did not find solution for node: write with type Type38
For node: buf expected fqn: byte[] with type: Type6 got: byte[]
Did not find solution for node: 0 with type Type5
Did not find solution for node: dataSize with type Type30
For node: is != null expected fqn: boolean with type: Type26 got: boolean
Did not find solution for node: is with type Type31
Did not find solution for node: null with type Type43
Did not find solution for node: is.close() with type Type44
Did not find solution for node: is with type Type31
Cannot find matching typeVariable for: close
Did not find solution for node: close with type Type44
Cannot find matching typeVariable for: IOException ex
For node: IOException ex expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: IOException expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: IOException expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: ex expected fqn: java.io.IOException with type: Type22 got: java.io.IOException
For node: baos.toByteArray() expected fqn: byte[] with type: Type46 got: byte[]
Did not find solution for node: baos with type Type16
Cannot find matching typeVariable for: toByteArray
For node: toByteArray expected fqn: byte[] with type: Type46 got: byte[]
For node: Date expected fqn: java.util.Date with type: Type3 got: java.util.Date
For node: Date expected fqn: java.util.Date with type: Type3 got: java.util.Date
Cannot find matching typeVariable for: getCreationTimeStamp
Cannot find matching typeVariable for: /** 
 * @return Returns the creationTimeStamp.
 */
public Date getCreationTimeStamp(){
  return creationTimeStamp;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: creationTimeStamp expected fqn: java.util.Date with type: Type3 got: java.util.Date
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: setCreationTimeStamp
Cannot find matching typeVariable for: /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
public void setCreationTimeStamp(Date creationTimeStamp){
  this.creationTimeStamp=creationTimeStamp;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: Date creationTimeStamp
For node: Date creationTimeStamp expected fqn: java.util.Date with type: Type3 got: java.util.Date
For node: Date expected fqn: java.util.Date with type: Type3 got: java.util.Date
For node: Date expected fqn: java.util.Date with type: Type3 got: java.util.Date
For node: creationTimeStamp expected fqn: java.util.Date with type: Type3 got: java.util.Date
For node: this.creationTimeStamp=creationTimeStamp expected fqn: java.util.Date with type: Type3 got: java.util.Date
For node: this.creationTimeStamp expected fqn: java.util.Date with type: Type3 got: java.util.Date
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: creationTimeStamp
For node: creationTimeStamp expected fqn: java.util.Date with type: Type3 got: java.util.Date
Cannot find matching typeVariable for: creationTimeStamp
For node: creationTimeStamp expected fqn: java.util.Date with type: Type3 got: java.util.Date
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: getDescription
Cannot find matching typeVariable for: /** 
 * @return Returns the description.
 */
public String getDescription(){
  return description;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: description expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: setDescription
Cannot find matching typeVariable for: /** 
 * @param description The description to set.
 */
public void setDescription(String description){
  this.description=description;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: String description
For node: String description expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: description expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: this.description=description expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: this.description expected fqn: java.lang.String with type: Type4 got: java.lang.String
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: description
For node: description expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: description
For node: description expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
Cannot find matching typeVariable for: getId
Cannot find matching typeVariable for: /** 
 * @return Returns the id.
 */
public Long getId(){
  return id;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: id expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: setId
Cannot find matching typeVariable for: /** 
 * @param id The id to set.
 */
public void setId(Long id){
  this.id=id;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: Long id
For node: Long id expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: id expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: this.id=id expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: this.id expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: id
For node: id expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
Cannot find matching typeVariable for: id
For node: id expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
Cannot find matching typeVariable for: getLength
Cannot find matching typeVariable for: /** 
 * @return Returns the length.
 */
public Long getLength(){
  return length;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: length expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: setLength
Cannot find matching typeVariable for: /** 
 * @param length The length to set.
 */
public void setLength(Long length){
  this.length=length;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: Long length
For node: Long length expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: Long expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: length expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: this.length=length expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: this.length expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: length
For node: length expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
Cannot find matching typeVariable for: length
For node: length expected fqn: java.lang.Long with type: Type7 got: java.lang.Long
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: getName
Cannot find matching typeVariable for: /** 
 * @return Returns the name.
 */
public String getName(){
  return name;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: name expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: setName
Cannot find matching typeVariable for: /** 
 * @param name The name to set.
 */
public void setName(String name){
  this.name=name;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: String name
For node: String name expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: name expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: this.name=name expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: this.name expected fqn: java.lang.String with type: Type4 got: java.lang.String
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: name
For node: name expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: name
For node: name expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: getType
Cannot find matching typeVariable for: /** 
 * @return Returns the type.
 */
public String getType(){
  return type;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: type expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: setType
Cannot find matching typeVariable for: /** 
 * @param type The type to set.
 */
public void setType(String type){
  this.type=type;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: String type
For node: String type expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: type expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: this.type=type expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: this.type expected fqn: java.lang.String with type: Type4 got: java.lang.String
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: type
For node: type expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: type
For node: type expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: byte[] expected fqn: byte[] with type: Type6 got: byte[]
Did not find solution for node: byte with type Type5
Cannot find matching typeVariable for: getContent
Cannot find matching typeVariable for: /** 
 * @return Returns the content.
 */
public byte[] getContent(){
  return content;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

For node: content expected fqn: byte[] with type: Type6 got: byte[]
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: setContent
Cannot find matching typeVariable for: /** 
 * @param content The content to set.
 */
public void setContent(byte[] content){
  this.content=content;
}

Cannot find matching typeVariable for: /** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Date;
import org.hibernate.Hibernate;
/** 
 * @author dudekta
 */
public class hibernate_class_15 {
  private Long id;
  private Date creationTimeStamp;
  private String name;
  private String type;
  private String description;
  private Long length;
  private byte[] content;
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public void setContentBlob(  Blob imageBlob){
    this.content=this.toByteArray(imageBlob);
  }
  /** 
 * Don't invoke this. Used by Hibernate only. 
 */
  public Blob getContentBlob(){
    return Hibernate.createBlob(this.content);
  }
  private byte[] toByteArray(  Blob fromBlob){
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      return toByteArrayImpl(fromBlob,baos);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  private byte[] toByteArrayImpl(  Blob fromBlob,  ByteArrayOutputStream baos) throws SQLException, IOException {
    byte[] buf=new byte[4000];
    InputStream is=fromBlob.getBinaryStream();
    try {
      for (; ; ) {
        int dataSize=is.read(buf);
        if (dataSize == -1)         break;
        baos.write(buf,0,dataSize);
      }
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    return baos.toByteArray();
  }
  /** 
 * @return Returns the creationTimeStamp.
 */
  public Date getCreationTimeStamp(){
    return creationTimeStamp;
  }
  /** 
 * @param creationTimeStamp The creationTimeStamp to set.
 */
  public void setCreationTimeStamp(  Date creationTimeStamp){
    this.creationTimeStamp=creationTimeStamp;
  }
  /** 
 * @return Returns the description.
 */
  public String getDescription(){
    return description;
  }
  /** 
 * @param description The description to set.
 */
  public void setDescription(  String description){
    this.description=description;
  }
  /** 
 * @return Returns the id.
 */
  public Long getId(){
    return id;
  }
  /** 
 * @param id The id to set.
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return Returns the length.
 */
  public Long getLength(){
    return length;
  }
  /** 
 * @param length The length to set.
 */
  public void setLength(  Long length){
    this.length=length;
  }
  /** 
 * @return Returns the name.
 */
  public String getName(){
    return name;
  }
  /** 
 * @param name The name to set.
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * @return Returns the type.
 */
  public String getType(){
    return type;
  }
  /** 
 * @param type The type to set.
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * @return Returns the content.
 */
  public byte[] getContent(){
    return content;
  }
  /** 
 * @param content The content to set.
 */
  public void setContent(  byte[] content){
    this.content=content;
  }
}

Cannot find matching typeVariable for: byte[] content
For node: byte[] content expected fqn: byte[] with type: Type6 got: byte[]
For node: byte[] expected fqn: byte[] with type: Type6 got: byte[]
Did not find solution for node: byte with type Type5
For node: content expected fqn: byte[] with type: Type6 got: byte[]
For node: this.content=content expected fqn: byte[] with type: Type6 got: byte[]
For node: this.content expected fqn: byte[] with type: Type6 got: byte[]
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: content
For node: content expected fqn: byte[] with type: Type6 got: byte[]
Cannot find matching typeVariable for: content
For node: content expected fqn: byte[] with type: Type6 got: byte[]
{Checked=234, Analyzed=158, Unsolved=76, Incorrect=2, Correct=156}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=10, Analyzed=0, Unsolved=10, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
byte=ArrayCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
byte=ArrayType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
byte=Assignment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
byte=FieldAccess: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
byte=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
byte=PrimitiveType: {Checked=7, Analyzed=0, Unsolved=7, Incorrect=0, Correct=0}
byte=SimpleName: {Checked=12, Analyzed=12, Unsolved=0, Incorrect=0, Correct=12}
byte=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
byte=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=ClassInstanceCreation: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=FieldAccess: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SimpleName: {Checked=82, Analyzed=59, Unsolved=23, Incorrect=2, Correct=57}
java=SimpleType: {Checked=34, Analyzed=26, Unsolved=8, Incorrect=0, Correct=26}
java=SingleVariableDeclaration: {Checked=14, Analyzed=10, Unsolved=4, Incorrect=0, Correct=10}
java=VariableDeclarationFragment: {Checked=8, Analyzed=6, Unsolved=2, Incorrect=0, Correct=6}
null=NullLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
void=SimpleName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
Total stats
{Checked=234, Analyzed=158, Unsolved=76, Incorrect=2, Correct=156}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=10, Analyzed=0, Unsolved=10, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
byte=ArrayCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
byte=ArrayType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
byte=Assignment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
byte=FieldAccess: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
byte=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
byte=PrimitiveType: {Checked=7, Analyzed=0, Unsolved=7, Incorrect=0, Correct=0}
byte=SimpleName: {Checked=12, Analyzed=12, Unsolved=0, Incorrect=0, Correct=12}
byte=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
byte=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=ClassInstanceCreation: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=FieldAccess: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SimpleName: {Checked=82, Analyzed=59, Unsolved=23, Incorrect=2, Correct=57}
java=SimpleType: {Checked=34, Analyzed=26, Unsolved=8, Incorrect=0, Correct=26}
java=SingleVariableDeclaration: {Checked=14, Analyzed=10, Unsolved=4, Incorrect=0, Correct=10}
java=VariableDeclarationFragment: {Checked=8, Analyzed=6, Unsolved=2, Incorrect=0, Correct=6}
null=NullLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
void=SimpleName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
,SimpleName,0,1,0,0,1
,ThisExpression,0,10,0,0,10
boolean,InfixExpression,3,3,3,0,0
byte,ArrayCreation,1,1,1,0,0
byte,ArrayType,7,7,7,0,0
byte,Assignment,2,2,2,0,0
byte,FieldAccess,3,3,3,0,0
byte,MethodInvocation,3,3,3,0,0
byte,PrimitiveType,0,7,0,0,7
byte,SimpleName,12,12,12,0,0
byte,SingleVariableDeclaration,1,1,1,0,0
byte,VariableDeclarationFragment,2,2,2,0,0
int,MethodInvocation,0,1,0,0,1
int,NumberLiteral,0,3,0,0,3
int,PrefixExpression,0,1,0,0,1
int,PrimitiveType,0,1,0,0,1
int,SimpleName,0,4,0,0,4
int,VariableDeclarationFragment,0,1,0,0,1
java,Assignment,6,6,6,0,0
java,ClassInstanceCreation,2,3,2,0,1
java,FieldAccess,6,6,6,0,0
java,MethodInvocation,1,1,1,0,0
java,SimpleName,59,82,57,2,23
java,SimpleType,26,34,26,0,8
java,SingleVariableDeclaration,10,14,10,0,4
java,VariableDeclarationFragment,6,8,6,0,2
null,NullLiteral,0,2,0,0,2
org.hibernate.,SimpleName,0,1,0,0,1
void,MethodInvocation,0,3,0,0,3
void,PrimitiveType,8,8,8,0,0
void,SimpleName,0,3,0,0,3
