echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/gwt_class_24.java
Expect check=94
Cannot find matching typeVariable for: public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: gwt_class_24
Cannot find matching typeVariable for: public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Widget;
public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
  protected abstract String getUniqueId();
  @Override public HandlerRegistration addClickHandler(  ClickHandler handler){
    return addDomHandler(handler,ClickEvent.getType());
  }
  @Override public void onClick(  ClickEvent event){
    doClick(getUniqueId());
  }
  protected native void doClick(  String name);
}

Did not find solution for node: AbstractNotificationWidget with type Type1
For node: Composite expected fqn: com.google.gwt.user.client.ui.Composite with type: Type2 got: com.google.gwt.user.client.ui.Composite
For node: Composite expected fqn: com.google.gwt.user.client.ui.Composite with type: Type2 got: com.google.gwt.user.client.ui.Composite
For node: ClickHandler expected fqn: com.google.gwt.event.dom.client.ClickHandler with type: Type3 got: com.google.gwt.event.dom.client.ClickHandler
For node: ClickHandler expected fqn: com.google.gwt.event.dom.client.ClickHandler with type: Type3 got: com.google.gwt.event.dom.client.ClickHandler
For node: HasClickHandlers expected fqn: com.google.gwt.event.dom.client.HasClickHandlers with type: Type4 got: com.google.gwt.event.dom.client.HasClickHandlers
For node: HasClickHandlers expected fqn: com.google.gwt.event.dom.client.HasClickHandlers with type: Type4 got: com.google.gwt.event.dom.client.HasClickHandlers
Did not find solution for node: String with type Type10
Did not find solution for node: String with type Type10
Cannot find matching typeVariable for: getUniqueId
Cannot find matching typeVariable for: protected abstract String getUniqueId();

Cannot find matching typeVariable for: public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
  protected abstract String getUniqueId();
  @Override public HandlerRegistration addClickHandler(  ClickHandler handler){
    return addDomHandler(handler,ClickEvent.getType());
  }
  @Override public void onClick(  ClickEvent event){
    doClick(getUniqueId());
  }
  protected native void doClick(  String name);
}

Cannot find matching typeVariable for: public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Widget;
public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

For node: @Override expected fqn: java.lang.Override with type: Type24 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type24 got: java.lang.Override
For node: HandlerRegistration expected fqn: com.google.gwt.event.shared.HandlerRegistration with type: Type8 got: com.google.gwt.event.shared.HandlerRegistration
For node: HandlerRegistration expected fqn: com.google.gwt.event.shared.HandlerRegistration with type: Type8 got: com.google.gwt.event.shared.HandlerRegistration
Cannot find matching typeVariable for: addClickHandler
Cannot find matching typeVariable for: @Override public HandlerRegistration addClickHandler(ClickHandler handler){
  return addDomHandler(handler,ClickEvent.getType());
}

Cannot find matching typeVariable for: public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
  protected abstract String getUniqueId();
  @Override public HandlerRegistration addClickHandler(  ClickHandler handler){
    return addDomHandler(handler,ClickEvent.getType());
  }
  @Override public void onClick(  ClickEvent event){
    doClick(getUniqueId());
  }
  protected native void doClick(  String name);
}

Cannot find matching typeVariable for: public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Widget;
public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: ClickHandler handler
For node: ClickHandler handler expected fqn: com.google.gwt.event.dom.client.ClickHandler with type: Type3 got: com.google.gwt.event.dom.client.ClickHandler
For node: ClickHandler expected fqn: com.google.gwt.event.dom.client.ClickHandler with type: Type3 got: com.google.gwt.event.dom.client.ClickHandler
For node: ClickHandler expected fqn: com.google.gwt.event.dom.client.ClickHandler with type: Type3 got: com.google.gwt.event.dom.client.ClickHandler
For node: handler expected fqn: com.google.gwt.event.dom.client.ClickHandler with type: Type3 got: com.google.gwt.event.dom.client.ClickHandler
For node: addDomHandler(handler,ClickEvent.getType()) expected fqn: com.google.gwt.event.shared.HandlerRegistration with type: Type28 got: com.google.gwt.event.shared.HandlerRegistration
Cannot find matching typeVariable for: addDomHandler
For node: addDomHandler expected fqn: com.google.gwt.event.shared.HandlerRegistration with type: Type28 got: com.google.gwt.event.shared.HandlerRegistration
For node: handler expected fqn: com.google.gwt.event.dom.client.ClickHandler with type: Type3 got: com.google.gwt.event.dom.client.ClickHandler
For node: ClickEvent.getType() expected fqn: com.google.gwt.event.dom.client.DomEvent.Type<com.google.gwt.event.dom.client.ClickHandler> with type: Type26 got: com.google.gwt.event.dom.client.DomEvent$Type
For node: ClickEvent expected fqn: com.google.gwt.event.dom.client.ClickEvent with type: Type25 got: com.google.gwt.event.dom.client.ClickEvent
Cannot find matching typeVariable for: getType
For node: getType expected fqn: com.google.gwt.event.dom.client.DomEvent.Type<com.google.gwt.event.dom.client.ClickHandler> with type: Type26 got: com.google.gwt.event.dom.client.DomEvent$Type
For node: @Override expected fqn: java.lang.Override with type: Type24 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type24 got: java.lang.Override
For node: void expected fqn: void with type: Type7 got: void
Cannot find matching typeVariable for: onClick
Cannot find matching typeVariable for: @Override public void onClick(ClickEvent event){
  doClick(getUniqueId());
}

Cannot find matching typeVariable for: public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
  protected abstract String getUniqueId();
  @Override public HandlerRegistration addClickHandler(  ClickHandler handler){
    return addDomHandler(handler,ClickEvent.getType());
  }
  @Override public void onClick(  ClickEvent event){
    doClick(getUniqueId());
  }
  protected native void doClick(  String name);
}

Cannot find matching typeVariable for: public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Widget;
public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: ClickEvent event
For node: ClickEvent event expected fqn: com.google.gwt.event.dom.client.ClickEvent with type: Type32 got: com.google.gwt.event.dom.client.ClickEvent
For node: ClickEvent expected fqn: com.google.gwt.event.dom.client.ClickEvent with type: Type32 got: com.google.gwt.event.dom.client.ClickEvent
For node: ClickEvent expected fqn: com.google.gwt.event.dom.client.ClickEvent with type: Type32 got: com.google.gwt.event.dom.client.ClickEvent
For node: event expected fqn: com.google.gwt.event.dom.client.ClickEvent with type: Type32 got: com.google.gwt.event.dom.client.ClickEvent
For node: doClick(getUniqueId()) expected fqn: void with type: Type7 got: void
Cannot find matching typeVariable for: doClick
For node: doClick expected fqn: void with type: Type7 got: void
Did not find solution for node: getUniqueId() with type Type10
Cannot find matching typeVariable for: getUniqueId
Did not find solution for node: getUniqueId with type Type10
For node: void expected fqn: void with type: Type7 got: void
Cannot find matching typeVariable for: doClick
Cannot find matching typeVariable for: protected native void doClick(String name);

Cannot find matching typeVariable for: public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
  protected abstract String getUniqueId();
  @Override public HandlerRegistration addClickHandler(  ClickHandler handler){
    return addDomHandler(handler,ClickEvent.getType());
  }
  @Override public void onClick(  ClickEvent event){
    doClick(getUniqueId());
  }
  protected native void doClick(  String name);
}

Cannot find matching typeVariable for: public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Widget;
public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: String name
Did not find solution for node: String name with type Type10
Did not find solution for node: String with type Type10
Did not find solution for node: String with type Type10
Did not find solution for node: name with type Type10
Cannot find matching typeVariable for: public class ErrorNotificationWidget extends AbstractNotificationWidget {
  private final String uniqueId;
  public ErrorNotificationWidget(  String title,  String message){
    uniqueId=DOM.createUniqueId();
    Widget w=null;
    initWidget(w);
    this.getElement().setId(uniqueId);
    this.addClickHandler(this);
  }
  @Override protected String getUniqueId(){
    return this.uniqueId;
  }
}

Did not find solution for node: ErrorNotificationWidget with type Type5
Did not find solution for node: AbstractNotificationWidget with type Type1
Did not find solution for node: AbstractNotificationWidget with type Type1
Did not find solution for node: String with type Type10
Did not find solution for node: String with type Type10
Cannot find matching typeVariable for: uniqueId
Did not find solution for node: uniqueId with type Type10
Cannot find matching typeVariable for: uniqueId
Cannot find matching typeVariable for: private final String uniqueId;

Cannot find matching typeVariable for: public class ErrorNotificationWidget extends AbstractNotificationWidget {
  private final String uniqueId;
  public ErrorNotificationWidget(  String title,  String message){
    uniqueId=DOM.createUniqueId();
    Widget w=null;
    initWidget(w);
    this.getElement().setId(uniqueId);
    this.addClickHandler(this);
  }
  @Override protected String getUniqueId(){
    return this.uniqueId;
  }
}

Cannot find matching typeVariable for: public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Widget;
public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: ErrorNotificationWidget
Cannot find matching typeVariable for: public ErrorNotificationWidget(String title,String message){
  uniqueId=DOM.createUniqueId();
  Widget w=null;
  initWidget(w);
  this.getElement().setId(uniqueId);
  this.addClickHandler(this);
}

Cannot find matching typeVariable for: public class ErrorNotificationWidget extends AbstractNotificationWidget {
  private final String uniqueId;
  public ErrorNotificationWidget(  String title,  String message){
    uniqueId=DOM.createUniqueId();
    Widget w=null;
    initWidget(w);
    this.getElement().setId(uniqueId);
    this.addClickHandler(this);
  }
  @Override protected String getUniqueId(){
    return this.uniqueId;
  }
}

Cannot find matching typeVariable for: public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Widget;
public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: String title
Did not find solution for node: String title with type Type10
Did not find solution for node: String with type Type10
Did not find solution for node: String with type Type10
Did not find solution for node: title with type Type10
Cannot find matching typeVariable for: String message
Did not find solution for node: String message with type Type10
Did not find solution for node: String with type Type10
Did not find solution for node: String with type Type10
Did not find solution for node: message with type Type10
Did not find solution for node: uniqueId=DOM.createUniqueId() with type Type10
Did not find solution for node: uniqueId with type Type10
Did not find solution for node: DOM.createUniqueId() with type Type34
Did not find solution for node: DOM with type Type33
Cannot find matching typeVariable for: createUniqueId
Did not find solution for node: createUniqueId with type Type34
Did not find solution for node: Widget with type Type36
Did not find solution for node: Widget with type Type36
Cannot find matching typeVariable for: w=null
Did not find solution for node: w=null with type Type36
Did not find solution for node: w with type Type36
Did not find solution for node: null with type Type37
Did not find solution for node: initWidget(w) with type Type38
Cannot find matching typeVariable for: initWidget
Did not find solution for node: initWidget with type Type38
Did not find solution for node: w with type Type36
Did not find solution for node: this.getElement().setId(uniqueId) with type Type43
Did not find solution for node: this.getElement() with type Type41
Did not find solution for node: this with type Type5
Cannot find matching typeVariable for: getElement
Did not find solution for node: getElement with type Type41
Cannot find matching typeVariable for: setId
Did not find solution for node: setId with type Type43
Did not find solution for node: uniqueId with type Type10
Did not find solution for node: this.addClickHandler(this) with type Type46
Did not find solution for node: this with type Type5
Cannot find matching typeVariable for: addClickHandler
Did not find solution for node: addClickHandler with type Type46
Did not find solution for node: this with type Type5
For node: @Override expected fqn: java.lang.Override with type: Type24 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type24 got: java.lang.Override
Did not find solution for node: String with type Type10
Did not find solution for node: String with type Type10
Cannot find matching typeVariable for: getUniqueId
Cannot find matching typeVariable for: @Override protected String getUniqueId(){
  return this.uniqueId;
}

Cannot find matching typeVariable for: public class ErrorNotificationWidget extends AbstractNotificationWidget {
  private final String uniqueId;
  public ErrorNotificationWidget(  String title,  String message){
    uniqueId=DOM.createUniqueId();
    Widget w=null;
    initWidget(w);
    this.getElement().setId(uniqueId);
    this.addClickHandler(this);
  }
  @Override protected String getUniqueId(){
    return this.uniqueId;
  }
}

Cannot find matching typeVariable for: public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Cannot find matching typeVariable for: import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Widget;
public class gwt_class_24 {
public abstract class AbstractNotificationWidget extends Composite implements ClickHandler, HasClickHandlers {
    protected abstract String getUniqueId();
    @Override public HandlerRegistration addClickHandler(    ClickHandler handler){
      return addDomHandler(handler,ClickEvent.getType());
    }
    @Override public void onClick(    ClickEvent event){
      doClick(getUniqueId());
    }
    protected native void doClick(    String name);
  }
public class ErrorNotificationWidget extends AbstractNotificationWidget {
    private final String uniqueId;
    public ErrorNotificationWidget(    String title,    String message){
      uniqueId=DOM.createUniqueId();
      Widget w=null;
      initWidget(w);
      this.getElement().setId(uniqueId);
      this.addClickHandler(this);
    }
    @Override protected String getUniqueId(){
      return this.uniqueId;
    }
  }
}

Did not find solution for node: this.uniqueId with type Type10
Did not find solution for node: this with type Type5
Cannot find matching typeVariable for: uniqueId
Did not find solution for node: uniqueId with type Type10
{Checked=83, Analyzed=32, Unsolved=51, Incorrect=2, Correct=30}
=SimpleName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=SimpleType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
gwt.=MethodInvocation: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=1, Correct=1}
gwt.=SimpleName: {Checked=18, Analyzed=12, Unsolved=6, Incorrect=1, Correct=11}
gwt.=SimpleType: {Checked=7, Analyzed=6, Unsolved=1, Incorrect=0, Correct=6}
gwt.=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
gwt.=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=FieldAccess: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=SimpleName: {Checked=17, Analyzed=3, Unsolved=14, Incorrect=0, Correct=3}
java=SimpleType: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
java=SingleVariableDeclaration: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
null=NullLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
void=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=SimpleName: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
Total stats
{Checked=83, Analyzed=32, Unsolved=51, Incorrect=2, Correct=30}
=SimpleName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=SimpleType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
gwt.=MethodInvocation: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=1, Correct=1}
gwt.=SimpleName: {Checked=18, Analyzed=12, Unsolved=6, Incorrect=1, Correct=11}
gwt.=SimpleType: {Checked=7, Analyzed=6, Unsolved=1, Incorrect=0, Correct=6}
gwt.=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
gwt.=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=FieldAccess: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=SimpleName: {Checked=17, Analyzed=3, Unsolved=14, Incorrect=0, Correct=3}
java=SimpleType: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
java=SingleVariableDeclaration: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
null=NullLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
void=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=SimpleName: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
,SimpleName,0,3,0,0,3
,SimpleType,0,1,0,0,1
,ThisExpression,0,4,0,0,4
gwt.,MethodInvocation,2,4,1,1,2
gwt.,SimpleName,12,18,11,1,6
gwt.,SimpleType,6,7,6,0,1
gwt.,SingleVariableDeclaration,2,2,2,0,0
gwt.,VariableDeclarationFragment,0,1,0,0,1
java,Assignment,0,1,0,0,1
java,FieldAccess,0,1,0,0,1
java,MarkerAnnotation,3,3,3,0,0
java,MethodInvocation,0,2,0,0,2
java,SimpleName,3,17,3,0,14
java,SimpleType,0,6,0,0,6
java,SingleVariableDeclaration,0,3,0,0,3
java,VariableDeclarationFragment,0,1,0,0,1
null,NullLiteral,0,1,0,0,1
void,MethodInvocation,1,3,1,0,2
void,PrimitiveType,2,2,2,0,0
void,SimpleName,1,3,1,0,2
