echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_19.java
Expect check=50
Cannot find matching typeVariable for: public class xstream_class_19 {
public class CustomConverter implements Converter {
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Class canConvert=null;
      return context.convertAnother(context.currentObject(),canConvert);
    }
    public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: xstream_class_19
Cannot find matching typeVariable for: public class xstream_class_19 {
public class CustomConverter implements Converter {
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Class canConvert=null;
      return context.convertAnother(context.currentObject(),canConvert);
    }
    public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_19 {
public class CustomConverter implements Converter {
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Class canConvert=null;
      return context.convertAnother(context.currentObject(),canConvert);
    }
    public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: public class CustomConverter implements Converter {
  public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Class canConvert=null;
    return context.convertAnother(context.currentObject(),canConvert);
  }
  public boolean canConvert(  Class type){
    return true;
  }
}

Cannot find matching typeVariable for: CustomConverter
Cannot find matching typeVariable for: public class CustomConverter implements Converter {
  public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Class canConvert=null;
    return context.convertAnother(context.currentObject(),canConvert);
  }
  public boolean canConvert(  Class type){
    return true;
  }
}

Cannot find matching typeVariable for: public class xstream_class_19 {
public class CustomConverter implements Converter {
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Class canConvert=null;
      return context.convertAnother(context.currentObject(),canConvert);
    }
    public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_19 {
public class CustomConverter implements Converter {
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Class canConvert=null;
      return context.convertAnother(context.currentObject(),canConvert);
    }
    public boolean canConvert(    Class type){
      return true;
    }
  }
}

For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type3 got: com.thoughtworks.xstream.converters.Converter
For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type3 got: com.thoughtworks.xstream.converters.Converter
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: marshal
Cannot find matching typeVariable for: public void marshal(Object source,HierarchicalStreamWriter writer,MarshallingContext context){
}

Cannot find matching typeVariable for: public class CustomConverter implements Converter {
  public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Class canConvert=null;
    return context.convertAnother(context.currentObject(),canConvert);
  }
  public boolean canConvert(  Class type){
    return true;
  }
}

Cannot find matching typeVariable for: public class xstream_class_19 {
public class CustomConverter implements Converter {
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Class canConvert=null;
      return context.convertAnother(context.currentObject(),canConvert);
    }
    public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_19 {
public class CustomConverter implements Converter {
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Class canConvert=null;
      return context.convertAnother(context.currentObject(),canConvert);
    }
    public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: Object source
For node: Object source expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: source expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
Cannot find matching typeVariable for: HierarchicalStreamWriter writer
For node: HierarchicalStreamWriter writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type7 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type7 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type7 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type7 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: MarshallingContext context
For node: MarshallingContext context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type8 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type8 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type8 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type8 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
Cannot find matching typeVariable for: unmarshal
Cannot find matching typeVariable for: public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context){
  Class canConvert=null;
  return context.convertAnother(context.currentObject(),canConvert);
}

Cannot find matching typeVariable for: public class CustomConverter implements Converter {
  public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Class canConvert=null;
    return context.convertAnother(context.currentObject(),canConvert);
  }
  public boolean canConvert(  Class type){
    return true;
  }
}

Cannot find matching typeVariable for: public class xstream_class_19 {
public class CustomConverter implements Converter {
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Class canConvert=null;
      return context.convertAnother(context.currentObject(),canConvert);
    }
    public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_19 {
public class CustomConverter implements Converter {
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Class canConvert=null;
      return context.convertAnother(context.currentObject(),canConvert);
    }
    public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: HierarchicalStreamReader reader
For node: HierarchicalStreamReader reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type9 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type9 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type9 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type9 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: UnmarshallingContext context
For node: UnmarshallingContext context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type10 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type10 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type10 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type10 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: Class expected fqn: java.lang.Class with type: Type11 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type11 got: java.lang.Class
Cannot find matching typeVariable for: canConvert=null
For node: canConvert=null expected fqn: java.lang.Class with type: Type11 got: java.lang.Class
For node: canConvert expected fqn: java.lang.Class with type: Type11 got: java.lang.Class
For node: null expected fqn: null with type: Type12 got: java.lang.Class
For node: context.convertAnother(context.currentObject(),canConvert) expected fqn: java.lang.Object with type: Type15 got: java.lang.Object
For node: context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type10 got: com.thoughtworks.xstream.converters.UnmarshallingContext
Cannot find matching typeVariable for: convertAnother
For node: convertAnother expected fqn: java.lang.Object with type: Type15 got: java.lang.Object
For node: context.currentObject() expected fqn: java.lang.Object with type: Type13 got: java.lang.Object
For node: context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type10 got: com.thoughtworks.xstream.converters.UnmarshallingContext
Cannot find matching typeVariable for: currentObject
For node: currentObject expected fqn: java.lang.Object with type: Type13 got: java.lang.Object
For node: canConvert expected fqn: java.lang.Class with type: Type11 got: java.lang.Class
For node: boolean expected fqn: boolean with type: Type5 got: boolean
Cannot find matching typeVariable for: canConvert
Cannot find matching typeVariable for: public boolean canConvert(Class type){
  return true;
}

Cannot find matching typeVariable for: public class CustomConverter implements Converter {
  public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Class canConvert=null;
    return context.convertAnother(context.currentObject(),canConvert);
  }
  public boolean canConvert(  Class type){
    return true;
  }
}

Cannot find matching typeVariable for: public class xstream_class_19 {
public class CustomConverter implements Converter {
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Class canConvert=null;
      return context.convertAnother(context.currentObject(),canConvert);
    }
    public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_19 {
public class CustomConverter implements Converter {
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Class canConvert=null;
      return context.convertAnother(context.currentObject(),canConvert);
    }
    public boolean canConvert(    Class type){
      return true;
    }
  }
}

Cannot find matching typeVariable for: Class type
For node: Class type expected fqn: java.lang.Class with type: Type11 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type11 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type11 got: java.lang.Class
For node: type expected fqn: java.lang.Class with type: Type11 got: java.lang.Class
For node: true expected fqn: boolean with type: Type5 got: boolean
{Checked=43, Analyzed=43, Unsolved=0, Incorrect=1, Correct=42}
boolean=BooleanLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
com.thoughtworks.xstream.=SimpleType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SimpleName: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
java=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=43, Analyzed=43, Unsolved=0, Incorrect=1, Correct=42}
boolean=BooleanLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
com.thoughtworks.xstream.=SimpleType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SimpleName: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
java=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean,BooleanLiteral,1,1,1,0,0
boolean,PrimitiveType,1,1,1,0,0
com.thoughtworks.xstream.,SimpleName,11,11,11,0,0
com.thoughtworks.xstream.,SimpleType,5,5,5,0,0
com.thoughtworks.xstream.,SingleVariableDeclaration,4,4,4,0,0
java,MethodInvocation,2,2,2,0,0
java,SimpleName,10,10,10,0,0
java,SimpleType,4,4,4,0,0
java,SingleVariableDeclaration,2,2,2,0,0
java,VariableDeclarationFragment,1,1,1,0,0
null,NullLiteral,1,1,0,1,0
void,PrimitiveType,1,1,1,0,0
