echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xt11.java
Expect check=24
Cannot find matching typeVariable for: public class xt11 {
  public static void h1(){
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    Node doc=null;
    Source xmlSource=new DOMSource(doc);
  }
}

Cannot find matching typeVariable for: xt11
Cannot find matching typeVariable for: public class xt11 {
  public static void h1(){
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    Node doc=null;
    Source xmlSource=new DOMSource(doc);
  }
}

Cannot find matching typeVariable for: package java.xstream;
import org.w3c.dom.Node;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
public class xt11 {
  public static void h1(){
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    Node doc=null;
    Source xmlSource=new DOMSource(doc);
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: h1
Cannot find matching typeVariable for: public static void h1(){
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  Node doc=null;
  Source xmlSource=new DOMSource(doc);
}

Cannot find matching typeVariable for: public class xt11 {
  public static void h1(){
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    Node doc=null;
    Source xmlSource=new DOMSource(doc);
  }
}

Cannot find matching typeVariable for: package java.xstream;
import org.w3c.dom.Node;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
public class xt11 {
  public static void h1(){
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    Node doc=null;
    Source xmlSource=new DOMSource(doc);
  }
}

Did not find solution for node: ByteArrayOutputStream with type Type3
Did not find solution for node: ByteArrayOutputStream with type Type3
Cannot find matching typeVariable for: outputStream=new ByteArrayOutputStream()
Did not find solution for node: outputStream=new ByteArrayOutputStream() with type Type3
Did not find solution for node: outputStream with type Type3
Did not find solution for node: new ByteArrayOutputStream() with type Type3
Did not find solution for node: ByteArrayOutputStream with type Type3
Did not find solution for node: ByteArrayOutputStream with type Type3
For node: Node expected fqn: org.w3c.dom.Node with type: Type5 got: org.w3c.dom.Node
For node: Node expected fqn: org.w3c.dom.Node with type: Type5 got: org.w3c.dom.Node
Cannot find matching typeVariable for: doc=null
For node: doc=null expected fqn: org.w3c.dom.Node with type: Type5 got: org.w3c.dom.Node
For node: doc expected fqn: org.w3c.dom.Node with type: Type5 got: org.w3c.dom.Node
For node: null expected fqn: null with type: Type6 got: org.w3c.dom.Node
For node: Source expected fqn: javax.xml.transform.Source with type: Type7 got: javax.xml.transform.Source
For node: Source expected fqn: javax.xml.transform.Source with type: Type7 got: javax.xml.transform.Source
Cannot find matching typeVariable for: xmlSource=new DOMSource(doc)
For node: xmlSource=new DOMSource(doc) expected fqn: javax.xml.transform.Source with type: Type7 got: javax.xml.transform.Source
For node: xmlSource expected fqn: javax.xml.transform.Source with type: Type7 got: javax.xml.transform.Source
For node: new DOMSource(doc) expected fqn: javax.xml.transform.dom.DOMSource with type: Type8 got: javax.xml.transform.dom.DOMSource
For node: DOMSource expected fqn: javax.xml.transform.dom.DOMSource with type: Type8 got: javax.xml.transform.dom.DOMSource
For node: DOMSource expected fqn: javax.xml.transform.dom.DOMSource with type: Type8 got: javax.xml.transform.dom.DOMSource
For node: doc expected fqn: org.w3c.dom.Node with type: Type5 got: org.w3c.dom.Node
{Checked=21, Analyzed=14, Unsolved=7, Incorrect=1, Correct=13}
=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
=SimpleType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=SimpleName: {Checked=6, Analyzed=3, Unsolved=3, Incorrect=0, Correct=3}
java=SimpleType: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=21, Analyzed=14, Unsolved=7, Incorrect=1, Correct=13}
=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
=SimpleType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=SimpleName: {Checked=6, Analyzed=3, Unsolved=3, Incorrect=0, Correct=3}
java=SimpleType: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
,SimpleName,3,3,3,0,0
,SimpleType,1,1,1,0,0
,VariableDeclarationFragment,1,1,1,0,0
java,ClassInstanceCreation,1,2,1,0,1
java,SimpleName,3,6,3,0,3
java,SimpleType,2,4,2,0,2
java,VariableDeclarationFragment,1,2,1,0,1
null,NullLiteral,1,1,0,1,0
void,PrimitiveType,1,1,1,0,0
