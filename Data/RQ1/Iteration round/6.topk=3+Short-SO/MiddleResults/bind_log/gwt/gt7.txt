echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/gt7.java
Expect check=24
Cannot find matching typeVariable for: public class gt7 {
  Pattern pattern=Pattern.compile("");
  Matcher matcher=pattern.matcher("");
  boolean matchFound=matcher.find();
}

Did not find solution for node: gt7 with type Type1
For node: Pattern expected fqn: java.util.regex.Pattern with type: Type2 got: java.util.regex.Pattern
For node: Pattern expected fqn: java.util.regex.Pattern with type: Type2 got: java.util.regex.Pattern
Cannot find matching typeVariable for: pattern=Pattern.compile("")
For node: pattern=Pattern.compile("") expected fqn: java.util.regex.Pattern with type: Type2 got: java.util.regex.Pattern
For node: pattern expected fqn: java.util.regex.Pattern with type: Type2 got: java.util.regex.Pattern
For node: Pattern.compile("") expected fqn: java.util.regex.Pattern with type: Type6 got: java.util.regex.Pattern
For node: Pattern expected fqn: java.util.regex.Pattern with type: Type2 got: java.util.regex.Pattern
Cannot find matching typeVariable for: compile
For node: compile expected fqn: java.util.regex.Pattern with type: Type6 got: java.util.regex.Pattern
For node: "" expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: Matcher expected fqn: java.util.regex.Matcher with type: Type3 got: java.util.regex.Matcher
For node: Matcher expected fqn: java.util.regex.Matcher with type: Type3 got: java.util.regex.Matcher
Cannot find matching typeVariable for: matcher=pattern.matcher("")
For node: matcher=pattern.matcher("") expected fqn: java.util.regex.Matcher with type: Type3 got: java.util.regex.Matcher
For node: matcher expected fqn: java.util.regex.Matcher with type: Type3 got: java.util.regex.Matcher
For node: pattern.matcher("") expected fqn: java.util.regex.Matcher with type: Type9 got: java.util.regex.Matcher
For node: pattern expected fqn: java.util.regex.Pattern with type: Type2 got: java.util.regex.Pattern
Cannot find matching typeVariable for: matcher
For node: matcher expected fqn: java.util.regex.Matcher with type: Type9 got: java.util.regex.Matcher
For node: "" expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: matchFound=matcher.find()
For node: matchFound=matcher.find() expected fqn: boolean with type: Type4 got: boolean
For node: matchFound expected fqn: boolean with type: Type4 got: boolean
For node: matcher.find() expected fqn: boolean with type: Type12 got: boolean
For node: matcher expected fqn: java.util.regex.Matcher with type: Type3 got: java.util.regex.Matcher
Cannot find matching typeVariable for: find
For node: find expected fqn: boolean with type: Type12 got: boolean
{Checked=23, Analyzed=22, Unsolved=1, Incorrect=0, Correct=22}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SimpleName: {Checked=10, Analyzed=9, Unsolved=1, Incorrect=0, Correct=9}
java=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
Total stats
{Checked=23, Analyzed=22, Unsolved=1, Incorrect=0, Correct=22}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SimpleName: {Checked=10, Analyzed=9, Unsolved=1, Incorrect=0, Correct=9}
java=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean,MethodInvocation,1,1,1,0,0
boolean,PrimitiveType,1,1,1,0,0
boolean,SimpleName,2,2,2,0,0
boolean,VariableDeclarationFragment,1,1,1,0,0
java,MethodInvocation,2,2,2,0,0
java,SimpleName,9,10,9,0,1
java,SimpleType,2,2,2,0,0
java,StringLiteral,2,2,2,0,0
java,VariableDeclarationFragment,2,2,2,0,0
