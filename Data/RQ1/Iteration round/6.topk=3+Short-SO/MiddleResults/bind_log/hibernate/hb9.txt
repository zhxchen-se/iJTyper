echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/hb9.java
Expect check=16
Cannot find matching typeVariable for: public class hb9 {
  public static void h1() throws HibernateException {
    boolean begun=false;
    if (!begun) {
      throw new TransactionException("Transaction not successfully started");
    }
  }
}

Cannot find matching typeVariable for: hb9
Cannot find matching typeVariable for: public class hb9 {
  public static void h1() throws HibernateException {
    boolean begun=false;
    if (!begun) {
      throw new TransactionException("Transaction not successfully started");
    }
  }
}

Cannot find matching typeVariable for: package java.hibernate;
import org.hibernate.HibernateException;
import org.hibernate.TransactionException;
public class hb9 {
  public static void h1() throws HibernateException {
    boolean begun=false;
    if (!begun) {
      throw new TransactionException("Transaction not successfully started");
    }
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: h1
Cannot find matching typeVariable for: public static void h1() throws HibernateException {
  boolean begun=false;
  if (!begun) {
    throw new TransactionException("Transaction not successfully started");
  }
}

Cannot find matching typeVariable for: public class hb9 {
  public static void h1() throws HibernateException {
    boolean begun=false;
    if (!begun) {
      throw new TransactionException("Transaction not successfully started");
    }
  }
}

Cannot find matching typeVariable for: package java.hibernate;
import org.hibernate.HibernateException;
import org.hibernate.TransactionException;
public class hb9 {
  public static void h1() throws HibernateException {
    boolean begun=false;
    if (!begun) {
      throw new TransactionException("Transaction not successfully started");
    }
  }
}

For node: HibernateException expected fqn: org.hibernate.HibernateException with type: Type3 got: org.hibernate.HibernateException
For node: HibernateException expected fqn: org.hibernate.HibernateException with type: Type3 got: org.hibernate.HibernateException
Did not find solution for node: boolean with type Type4
Cannot find matching typeVariable for: begun=false
Did not find solution for node: begun=false with type Type4
Did not find solution for node: begun with type Type4
Did not find solution for node: false with type Type4
Did not find solution for node: !begun with type Type4
Did not find solution for node: begun with type Type4
For node: new TransactionException("Transaction not successfully started") expected fqn: org.hibernate.TransactionException with type: Type6 got: org.hibernate.TransactionException
For node: TransactionException expected fqn: org.hibernate.TransactionException with type: Type6 got: org.hibernate.TransactionException
For node: TransactionException expected fqn: org.hibernate.TransactionException with type: Type6 got: org.hibernate.TransactionException
For node: "Transaction not successfully started" expected fqn: java.lang.String with type: Type7 got: java.lang.String
{Checked=13, Analyzed=7, Unsolved=6, Incorrect=0, Correct=7}
boolean=BooleanLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.hibernate.=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=13, Analyzed=7, Unsolved=6, Incorrect=0, Correct=7}
boolean=BooleanLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.hibernate.=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean,BooleanLiteral,0,1,0,0,1
boolean,PrefixExpression,0,1,0,0,1
boolean,PrimitiveType,0,1,0,0,1
boolean,SimpleName,0,2,0,0,2
boolean,VariableDeclarationFragment,0,1,0,0,1
java,StringLiteral,1,1,1,0,0
org.hibernate.,ClassInstanceCreation,1,1,1,0,0
org.hibernate.,SimpleName,2,2,2,0,0
org.hibernate.,SimpleType,2,2,2,0,0
void,PrimitiveType,1,1,1,0,0
