echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xt13.java
Expect check=29
Cannot find matching typeVariable for: public class xt13 {
  public static void h1() throws IOException {
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    XMLWriter xmlWriter=new XMLWriter(outputStream,OutputFormat.createPrettyPrint());
    Object doc=null;
  }
}

Cannot find matching typeVariable for: xt13
Cannot find matching typeVariable for: public class xt13 {
  public static void h1() throws IOException {
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    XMLWriter xmlWriter=new XMLWriter(outputStream,OutputFormat.createPrettyPrint());
    Object doc=null;
  }
}

Cannot find matching typeVariable for: package java.xstream;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
public class xt13 {
  public static void h1() throws IOException {
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    XMLWriter xmlWriter=new XMLWriter(outputStream,OutputFormat.createPrettyPrint());
    Object doc=null;
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: h1
Cannot find matching typeVariable for: public static void h1() throws IOException {
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  XMLWriter xmlWriter=new XMLWriter(outputStream,OutputFormat.createPrettyPrint());
  Object doc=null;
}

Cannot find matching typeVariable for: public class xt13 {
  public static void h1() throws IOException {
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    XMLWriter xmlWriter=new XMLWriter(outputStream,OutputFormat.createPrettyPrint());
    Object doc=null;
  }
}

Cannot find matching typeVariable for: package java.xstream;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
public class xt13 {
  public static void h1() throws IOException {
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    XMLWriter xmlWriter=new XMLWriter(outputStream,OutputFormat.createPrettyPrint());
    Object doc=null;
  }
}

For node: IOException expected fqn: java.io.IOException with type: Type3 got: java.io.IOException
For node: IOException expected fqn: java.io.IOException with type: Type3 got: java.io.IOException
Did not find solution for node: ByteArrayOutputStream with type Type4
Did not find solution for node: ByteArrayOutputStream with type Type4
Cannot find matching typeVariable for: outputStream=new ByteArrayOutputStream()
Did not find solution for node: outputStream=new ByteArrayOutputStream() with type Type4
Did not find solution for node: outputStream with type Type4
Did not find solution for node: new ByteArrayOutputStream() with type Type4
Did not find solution for node: ByteArrayOutputStream with type Type4
Did not find solution for node: ByteArrayOutputStream with type Type4
Did not find solution for node: XMLWriter with type Type6
Did not find solution for node: XMLWriter with type Type6
Cannot find matching typeVariable for: xmlWriter=new XMLWriter(outputStream,OutputFormat.createPrettyPrint())
Did not find solution for node: xmlWriter=new XMLWriter(outputStream,OutputFormat.createPrettyPrint()) with type Type6
Did not find solution for node: xmlWriter with type Type6
Did not find solution for node: new XMLWriter(outputStream,OutputFormat.createPrettyPrint()) with type Type6
Did not find solution for node: XMLWriter with type Type6
Did not find solution for node: XMLWriter with type Type6
Did not find solution for node: outputStream with type Type4
Did not find solution for node: OutputFormat.createPrettyPrint() with type Type8
Did not find solution for node: OutputFormat with type Type7
Cannot find matching typeVariable for: createPrettyPrint
Did not find solution for node: createPrettyPrint with type Type8
For node: Object expected fqn: java.lang.Object with type: Type13 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type13 got: java.lang.Object
Cannot find matching typeVariable for: doc=null
For node: doc=null expected fqn: java.lang.Object with type: Type13 got: java.lang.Object
For node: doc expected fqn: java.lang.Object with type: Type13 got: java.lang.Object
For node: null expected fqn: null with type: Type14 got: java.lang.Object
{Checked=26, Analyzed=8, Unsolved=18, Incorrect=1, Correct=7}
=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
=SimpleType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SimpleName: {Checked=7, Analyzed=3, Unsolved=4, Incorrect=0, Correct=3}
java=SimpleType: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=26, Analyzed=8, Unsolved=18, Incorrect=1, Correct=7}
=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
=SimpleType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SimpleName: {Checked=7, Analyzed=3, Unsolved=4, Incorrect=0, Correct=3}
java=SimpleType: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
,ClassInstanceCreation,0,1,0,0,1
,MethodInvocation,0,1,0,0,1
,SimpleName,0,5,0,0,5
,SimpleType,0,2,0,0,2
,VariableDeclarationFragment,0,1,0,0,1
java,ClassInstanceCreation,0,1,0,0,1
java,SimpleName,3,7,3,0,4
java,SimpleType,2,4,2,0,2
java,VariableDeclarationFragment,1,2,1,0,1
null,NullLiteral,1,1,0,1,0
void,PrimitiveType,1,1,1,0,0
