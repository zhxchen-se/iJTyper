echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/hb19.java
Expect check=29
Cannot find matching typeVariable for: public class hb19 {
  public static void h1(){
    String typename=null;
    Type type=(Type)TypeFactory.heuristicType(typename);
    boolean serializable=type != null && type instanceof SerializableType;
  }
}

Cannot find matching typeVariable for: hb19
Cannot find matching typeVariable for: public class hb19 {
  public static void h1(){
    String typename=null;
    Type type=(Type)TypeFactory.heuristicType(typename);
    boolean serializable=type != null && type instanceof SerializableType;
  }
}

Cannot find matching typeVariable for: package java.hibernate;
import org.hibernate.annotations.Type;
import org.hibernate.type.SerializableType;
import org.hibernate.type.TypeFactory;
public class hb19 {
  public static void h1(){
    String typename=null;
    Type type=(Type)TypeFactory.heuristicType(typename);
    boolean serializable=type != null && type instanceof SerializableType;
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: h1
Cannot find matching typeVariable for: public static void h1(){
  String typename=null;
  Type type=(Type)TypeFactory.heuristicType(typename);
  boolean serializable=type != null && type instanceof SerializableType;
}

Cannot find matching typeVariable for: public class hb19 {
  public static void h1(){
    String typename=null;
    Type type=(Type)TypeFactory.heuristicType(typename);
    boolean serializable=type != null && type instanceof SerializableType;
  }
}

Cannot find matching typeVariable for: package java.hibernate;
import org.hibernate.annotations.Type;
import org.hibernate.type.SerializableType;
import org.hibernate.type.TypeFactory;
public class hb19 {
  public static void h1(){
    String typename=null;
    Type type=(Type)TypeFactory.heuristicType(typename);
    boolean serializable=type != null && type instanceof SerializableType;
  }
}

For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
Cannot find matching typeVariable for: typename=null
For node: typename=null expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: typename expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: null expected fqn: null with type: Type4 got: java.lang.String
For node: Type expected fqn: org.hibernate.annotations.Type with type: Type5 got: org.hibernate.type.Type
For node: Type expected fqn: org.hibernate.annotations.Type with type: Type5 got: org.hibernate.type.Type
Cannot find matching typeVariable for: type=(Type)TypeFactory.heuristicType(typename)
For node: type=(Type)TypeFactory.heuristicType(typename) expected fqn: org.hibernate.annotations.Type with type: Type5 got: org.hibernate.type.Type
For node: type expected fqn: org.hibernate.annotations.Type with type: Type5 got: org.hibernate.type.Type
For node: (Type)TypeFactory.heuristicType(typename) expected fqn: org.hibernate.annotations.Type with type: Type5 got: org.hibernate.type.Type
For node: Type expected fqn: org.hibernate.annotations.Type with type: Type5 got: org.hibernate.type.Type
For node: Type expected fqn: org.hibernate.annotations.Type with type: Type5 got: org.hibernate.type.Type
No match for actual type MethodInvocation: TypeFactory.heuristicType(typename) with type: Type7 got: org.hibernate.type.Type
For node: TypeFactory expected fqn: org.hibernate.type.TypeFactory with type: Type6 got: org.hibernate.type.TypeFactory
For node: typename expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: boolean expected fqn: boolean with type: Type10 got: boolean
Cannot find matching typeVariable for: serializable=type != null && type instanceof SerializableType
For node: serializable=type != null && type instanceof SerializableType expected fqn: boolean with type: Type10 got: boolean
For node: serializable expected fqn: boolean with type: Type10 got: boolean
For node: type != null && type instanceof SerializableType expected fqn: boolean with type: Type10 got: boolean
For node: type != null expected fqn: boolean with type: Type10 got: boolean
For node: type expected fqn: org.hibernate.annotations.Type with type: Type5 got: org.hibernate.type.Type
Did not find solution for node: null with type Type11
For node: type instanceof SerializableType expected fqn: boolean with type: Type10 got: boolean
Cannot find matching typeVariable for: type
For node: type expected fqn: org.hibernate.annotations.Type with type: Type10 got: boolean
For node: SerializableType expected fqn: org.hibernate.type.SerializableType with type: Type12 got: org.hibernate.type.SerializableType
For node: SerializableType expected fqn: org.hibernate.type.SerializableType with type: Type12 got: org.hibernate.type.SerializableType
{Checked=26, Analyzed=25, Unsolved=1, Incorrect=10, Correct=15}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=InstanceofExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=SimpleType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
org.hibernate.=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
org.hibernate.=SimpleName: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=5, Correct=2}
org.hibernate.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=2, Correct=1}
org.hibernate.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=26, Analyzed=25, Unsolved=1, Incorrect=10, Correct=15}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=InstanceofExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=SimpleType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
org.hibernate.=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
org.hibernate.=SimpleName: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=5, Correct=2}
org.hibernate.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=2, Correct=1}
org.hibernate.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean,InfixExpression,2,2,2,0,0
boolean,InstanceofExpression,1,1,1,0,0
boolean,PrimitiveType,1,1,1,0,0
boolean,SimpleName,1,1,1,0,0
boolean,VariableDeclarationFragment,1,1,1,0,0
java,SimpleName,3,3,3,0,0
java,SimpleType,1,1,1,0,0
java,VariableDeclarationFragment,1,1,1,0,0
null,NullLiteral,1,2,0,1,1
org.hibernate.,CastExpression,1,1,0,1,0
org.hibernate.,SimpleName,7,7,2,5,0
org.hibernate.,SimpleType,3,3,1,2,0
org.hibernate.,VariableDeclarationFragment,1,1,0,1,0
void,PrimitiveType,1,1,1,0,0
