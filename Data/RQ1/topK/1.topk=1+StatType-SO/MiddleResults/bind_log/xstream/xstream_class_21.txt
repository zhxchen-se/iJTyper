echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_21.java
Expect check=148
Cannot find matching typeVariable for: public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: xstream_class_21
Cannot find matching typeVariable for: public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: static class MyConverter implements Converter {
  private final Map<String,String> attributes;
  private final Class<?> clazz;
  private final Mapper mapper;
  private final ReflectionProvider reflectionProvider;
  public MyConverter(  Mapper mapper,  ReflectionProvider reflectionProvider,  Class<?> clazz,  Map<String,String> attributes){
    super();
    this.mapper=mapper;
    this.reflectionProvider=reflectionProvider;
    this.attributes=attributes;
    this.clazz=clazz;
  }
  @Override public boolean canConvert(  Class cls){
    return cls == clazz;
  }
  @Override public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    for (    String key : attributes.keySet()) {
      writer.addAttribute(key,attributes.get(key));
    }
    Converter converter=new ReflectionConverter(mapper,reflectionProvider);
    Object p=null;
    context.convertAnother(p,converter);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader arg0,  UnmarshallingContext arg1){
    return null;
  }
}

Did not find solution for node: MyConverter with type Type2
For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type3 got: com.thoughtworks.xstream.converters.Converter
For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type3 got: com.thoughtworks.xstream.converters.Converter
For node: Map<String,String> expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type21=Type19<Type20,Type20> got: java.util.Map<java.lang.String,java.lang.String>
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type19 got: java.util.Map
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type19 got: java.util.Map
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: attributes
For node: attributes expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type21=Type19<Type20,Type20> got: java.util.Map<java.lang.String,java.lang.String>
Cannot find matching typeVariable for: attributes
Cannot find matching typeVariable for: private final Map<String,String> attributes;

Cannot find matching typeVariable for: static class MyConverter implements Converter {
  private final Map<String,String> attributes;
  private final Class<?> clazz;
  private final Mapper mapper;
  private final ReflectionProvider reflectionProvider;
  public MyConverter(  Mapper mapper,  ReflectionProvider reflectionProvider,  Class<?> clazz,  Map<String,String> attributes){
    super();
    this.mapper=mapper;
    this.reflectionProvider=reflectionProvider;
    this.attributes=attributes;
    this.clazz=clazz;
  }
  @Override public boolean canConvert(  Class cls){
    return cls == clazz;
  }
  @Override public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    for (    String key : attributes.keySet()) {
      writer.addAttribute(key,attributes.get(key));
    }
    Converter converter=new ReflectionConverter(mapper,reflectionProvider);
    Object p=null;
    context.convertAnother(p,converter);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader arg0,  UnmarshallingContext arg1){
    return null;
  }
}

Cannot find matching typeVariable for: public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Did not find solution for node: Class<?> with type Type24=Type22<Type23>
For node: Class expected fqn: java.lang.Class<?> with type: Type22 got: java.lang.Class
For node: Class expected fqn: java.lang.Class<?> with type: Type22 got: java.lang.Class
For node: ? expected fqn: ? with type: Type23 got: java.lang.Object
Cannot find matching typeVariable for: clazz
Did not find solution for node: clazz with type Type24=Type22<Type23>
Cannot find matching typeVariable for: clazz
Cannot find matching typeVariable for: private final Class<?> clazz;

Cannot find matching typeVariable for: static class MyConverter implements Converter {
  private final Map<String,String> attributes;
  private final Class<?> clazz;
  private final Mapper mapper;
  private final ReflectionProvider reflectionProvider;
  public MyConverter(  Mapper mapper,  ReflectionProvider reflectionProvider,  Class<?> clazz,  Map<String,String> attributes){
    super();
    this.mapper=mapper;
    this.reflectionProvider=reflectionProvider;
    this.attributes=attributes;
    this.clazz=clazz;
  }
  @Override public boolean canConvert(  Class cls){
    return cls == clazz;
  }
  @Override public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    for (    String key : attributes.keySet()) {
      writer.addAttribute(key,attributes.get(key));
    }
    Converter converter=new ReflectionConverter(mapper,reflectionProvider);
    Object p=null;
    context.convertAnother(p,converter);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader arg0,  UnmarshallingContext arg1){
    return null;
  }
}

Cannot find matching typeVariable for: public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

For node: Mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
For node: Mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
Cannot find matching typeVariable for: mapper
For node: mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
Cannot find matching typeVariable for: mapper
Cannot find matching typeVariable for: private final Mapper mapper;

Cannot find matching typeVariable for: static class MyConverter implements Converter {
  private final Map<String,String> attributes;
  private final Class<?> clazz;
  private final Mapper mapper;
  private final ReflectionProvider reflectionProvider;
  public MyConverter(  Mapper mapper,  ReflectionProvider reflectionProvider,  Class<?> clazz,  Map<String,String> attributes){
    super();
    this.mapper=mapper;
    this.reflectionProvider=reflectionProvider;
    this.attributes=attributes;
    this.clazz=clazz;
  }
  @Override public boolean canConvert(  Class cls){
    return cls == clazz;
  }
  @Override public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    for (    String key : attributes.keySet()) {
      writer.addAttribute(key,attributes.get(key));
    }
    Converter converter=new ReflectionConverter(mapper,reflectionProvider);
    Object p=null;
    context.convertAnother(p,converter);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader arg0,  UnmarshallingContext arg1){
    return null;
  }
}

Cannot find matching typeVariable for: public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

For node: ReflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: ReflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
Cannot find matching typeVariable for: reflectionProvider
For node: reflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
Cannot find matching typeVariable for: reflectionProvider
Cannot find matching typeVariable for: private final ReflectionProvider reflectionProvider;

Cannot find matching typeVariable for: static class MyConverter implements Converter {
  private final Map<String,String> attributes;
  private final Class<?> clazz;
  private final Mapper mapper;
  private final ReflectionProvider reflectionProvider;
  public MyConverter(  Mapper mapper,  ReflectionProvider reflectionProvider,  Class<?> clazz,  Map<String,String> attributes){
    super();
    this.mapper=mapper;
    this.reflectionProvider=reflectionProvider;
    this.attributes=attributes;
    this.clazz=clazz;
  }
  @Override public boolean canConvert(  Class cls){
    return cls == clazz;
  }
  @Override public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    for (    String key : attributes.keySet()) {
      writer.addAttribute(key,attributes.get(key));
    }
    Converter converter=new ReflectionConverter(mapper,reflectionProvider);
    Object p=null;
    context.convertAnother(p,converter);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader arg0,  UnmarshallingContext arg1){
    return null;
  }
}

Cannot find matching typeVariable for: public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: MyConverter
Cannot find matching typeVariable for: public MyConverter(Mapper mapper,ReflectionProvider reflectionProvider,Class<?> clazz,Map<String,String> attributes){
  super();
  this.mapper=mapper;
  this.reflectionProvider=reflectionProvider;
  this.attributes=attributes;
  this.clazz=clazz;
}

Cannot find matching typeVariable for: static class MyConverter implements Converter {
  private final Map<String,String> attributes;
  private final Class<?> clazz;
  private final Mapper mapper;
  private final ReflectionProvider reflectionProvider;
  public MyConverter(  Mapper mapper,  ReflectionProvider reflectionProvider,  Class<?> clazz,  Map<String,String> attributes){
    super();
    this.mapper=mapper;
    this.reflectionProvider=reflectionProvider;
    this.attributes=attributes;
    this.clazz=clazz;
  }
  @Override public boolean canConvert(  Class cls){
    return cls == clazz;
  }
  @Override public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    for (    String key : attributes.keySet()) {
      writer.addAttribute(key,attributes.get(key));
    }
    Converter converter=new ReflectionConverter(mapper,reflectionProvider);
    Object p=null;
    context.convertAnother(p,converter);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader arg0,  UnmarshallingContext arg1){
    return null;
  }
}

Cannot find matching typeVariable for: public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: Mapper mapper
For node: Mapper mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
For node: Mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
For node: Mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
For node: mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
Cannot find matching typeVariable for: ReflectionProvider reflectionProvider
For node: ReflectionProvider reflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: ReflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: ReflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: reflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
Cannot find matching typeVariable for: Class<?> clazz
Did not find solution for node: Class<?> clazz with type Type28=Type22<Type27>
Did not find solution for node: Class<?> with type Type28=Type22<Type27>
For node: Class expected fqn: java.lang.Class<?> with type: Type22 got: java.lang.Class
For node: Class expected fqn: java.lang.Class<?> with type: Type22 got: java.lang.Class
For node: ? expected fqn: ? with type: Type27 got: java.lang.Object
Did not find solution for node: clazz with type Type28=Type22<Type27>
Cannot find matching typeVariable for: Map<String,String> attributes
For node: Map<String,String> attributes expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type21=Type19<Type20,Type20> got: java.util.Map<java.lang.String,java.lang.String>
For node: Map<String,String> expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type21=Type19<Type20,Type20> got: java.util.Map<java.lang.String,java.lang.String>
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type19 got: java.util.Map
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type19 got: java.util.Map
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: attributes expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type21=Type19<Type20,Type20> got: java.util.Map<java.lang.String,java.lang.String>
For node: this.mapper=mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
For node: this.mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: mapper
For node: mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
Cannot find matching typeVariable for: mapper
For node: mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
For node: this.reflectionProvider=reflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: this.reflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: reflectionProvider
For node: reflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
Cannot find matching typeVariable for: reflectionProvider
For node: reflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: this.attributes=attributes expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type21=Type19<Type20,Type20> got: java.util.Map<java.lang.String,java.lang.String>
For node: this.attributes expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type21=Type19<Type20,Type20> got: java.util.Map<java.lang.String,java.lang.String>
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: attributes
For node: attributes expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type21=Type19<Type20,Type20> got: java.util.Map<java.lang.String,java.lang.String>
Cannot find matching typeVariable for: attributes
For node: attributes expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type21=Type19<Type20,Type20> got: java.util.Map<java.lang.String,java.lang.String>
Did not find solution for node: this.clazz=clazz with type Type24=Type22<Type23>
Did not find solution for node: this.clazz with type Type24=Type22<Type23>
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: clazz
Did not find solution for node: clazz with type Type24=Type22<Type23>
Cannot find matching typeVariable for: clazz
Did not find solution for node: clazz with type Type24=Type22<Type23>
For node: @Override expected fqn: java.lang.Override with type: Type30 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type30 got: java.lang.Override
For node: boolean expected fqn: boolean with type: Type5 got: boolean
Cannot find matching typeVariable for: canConvert
Cannot find matching typeVariable for: @Override public boolean canConvert(Class cls){
  return cls == clazz;
}

Cannot find matching typeVariable for: static class MyConverter implements Converter {
  private final Map<String,String> attributes;
  private final Class<?> clazz;
  private final Mapper mapper;
  private final ReflectionProvider reflectionProvider;
  public MyConverter(  Mapper mapper,  ReflectionProvider reflectionProvider,  Class<?> clazz,  Map<String,String> attributes){
    super();
    this.mapper=mapper;
    this.reflectionProvider=reflectionProvider;
    this.attributes=attributes;
    this.clazz=clazz;
  }
  @Override public boolean canConvert(  Class cls){
    return cls == clazz;
  }
  @Override public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    for (    String key : attributes.keySet()) {
      writer.addAttribute(key,attributes.get(key));
    }
    Converter converter=new ReflectionConverter(mapper,reflectionProvider);
    Object p=null;
    context.convertAnother(p,converter);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader arg0,  UnmarshallingContext arg1){
    return null;
  }
}

Cannot find matching typeVariable for: public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: Class cls
For node: Class cls expected fqn: java.lang.Class with type: Type22 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type22 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type22 got: java.lang.Class
For node: cls expected fqn: java.lang.Class with type: Type22 got: java.lang.Class
For node: cls == clazz expected fqn: boolean with type: Type5 got: boolean
For node: cls expected fqn: java.lang.Class with type: Type22 got: java.lang.Class
Did not find solution for node: clazz with type Type24=Type22<Type23>
For node: @Override expected fqn: java.lang.Override with type: Type30 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type30 got: java.lang.Override
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: marshal
Cannot find matching typeVariable for: @Override public void marshal(Object value,HierarchicalStreamWriter writer,MarshallingContext context){
  for (  String key : attributes.keySet()) {
    writer.addAttribute(key,attributes.get(key));
  }
  Converter converter=new ReflectionConverter(mapper,reflectionProvider);
  Object p=null;
  context.convertAnother(p,converter);
}

Cannot find matching typeVariable for: static class MyConverter implements Converter {
  private final Map<String,String> attributes;
  private final Class<?> clazz;
  private final Mapper mapper;
  private final ReflectionProvider reflectionProvider;
  public MyConverter(  Mapper mapper,  ReflectionProvider reflectionProvider,  Class<?> clazz,  Map<String,String> attributes){
    super();
    this.mapper=mapper;
    this.reflectionProvider=reflectionProvider;
    this.attributes=attributes;
    this.clazz=clazz;
  }
  @Override public boolean canConvert(  Class cls){
    return cls == clazz;
  }
  @Override public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    for (    String key : attributes.keySet()) {
      writer.addAttribute(key,attributes.get(key));
    }
    Converter converter=new ReflectionConverter(mapper,reflectionProvider);
    Object p=null;
    context.convertAnother(p,converter);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader arg0,  UnmarshallingContext arg1){
    return null;
  }
}

Cannot find matching typeVariable for: public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: Object value
For node: Object value expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: value expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
Cannot find matching typeVariable for: HierarchicalStreamWriter writer
For node: HierarchicalStreamWriter writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type31 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type31 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type31 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type31 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: MarshallingContext context
For node: MarshallingContext context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type32 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type32 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type32 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type32 got: com.thoughtworks.xstream.converters.MarshallingContext
Cannot find matching typeVariable for: String key
For node: String key expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: key expected fqn: java.lang.String with type: Type20 got: java.lang.String
Did not find solution for node: attributes.keySet() with type Type33
For node: attributes expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type21=Type19<Type20,Type20> got: java.util.Map<java.lang.String,java.lang.String>
Cannot find matching typeVariable for: keySet
Did not find solution for node: keySet with type Type33
For node: writer.addAttribute(key,attributes.get(key)) expected fqn: void with type: Type43 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type31 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: addAttribute
For node: addAttribute expected fqn: void with type: Type43 got: void
For node: key expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: attributes.get(key) expected fqn: java.lang.String with type: Type37 got: java.lang.String
For node: attributes expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type21=Type19<Type20,Type20> got: java.util.Map<java.lang.String,java.lang.String>
Cannot find matching typeVariable for: get
For node: get expected fqn: java.lang.String with type: Type37 got: java.lang.String
For node: key expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type3 got: com.thoughtworks.xstream.converters.Converter
For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type3 got: com.thoughtworks.xstream.converters.Converter
Cannot find matching typeVariable for: converter=new ReflectionConverter(mapper,reflectionProvider)
For node: converter=new ReflectionConverter(mapper,reflectionProvider) expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type3 got: com.thoughtworks.xstream.converters.Converter
For node: converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type3 got: com.thoughtworks.xstream.converters.Converter
For node: new ReflectionConverter(mapper,reflectionProvider) expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionConverter with type: Type47 got: com.thoughtworks.xstream.converters.reflection.ReflectionConverter
For node: ReflectionConverter expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionConverter with type: Type47 got: com.thoughtworks.xstream.converters.reflection.ReflectionConverter
For node: ReflectionConverter expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionConverter with type: Type47 got: com.thoughtworks.xstream.converters.reflection.ReflectionConverter
For node: mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type25 got: com.thoughtworks.xstream.mapper.Mapper
For node: reflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type26 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
Cannot find matching typeVariable for: p=null
For node: p=null expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: p expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: null expected fqn: null with type: Type51 got: java.lang.Object
For node: context.convertAnother(p,converter) expected fqn: void with type: Type52 got: void
For node: context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type32 got: com.thoughtworks.xstream.converters.MarshallingContext
Cannot find matching typeVariable for: convertAnother
For node: convertAnother expected fqn: void with type: Type52 got: void
For node: p expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type3 got: com.thoughtworks.xstream.converters.Converter
For node: @Override expected fqn: java.lang.Override with type: Type30 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type30 got: java.lang.Override
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
Cannot find matching typeVariable for: unmarshal
Cannot find matching typeVariable for: @Override public Object unmarshal(HierarchicalStreamReader arg0,UnmarshallingContext arg1){
  return null;
}

Cannot find matching typeVariable for: static class MyConverter implements Converter {
  private final Map<String,String> attributes;
  private final Class<?> clazz;
  private final Mapper mapper;
  private final ReflectionProvider reflectionProvider;
  public MyConverter(  Mapper mapper,  ReflectionProvider reflectionProvider,  Class<?> clazz,  Map<String,String> attributes){
    super();
    this.mapper=mapper;
    this.reflectionProvider=reflectionProvider;
    this.attributes=attributes;
    this.clazz=clazz;
  }
  @Override public boolean canConvert(  Class cls){
    return cls == clazz;
  }
  @Override public void marshal(  Object value,  HierarchicalStreamWriter writer,  MarshallingContext context){
    for (    String key : attributes.keySet()) {
      writer.addAttribute(key,attributes.get(key));
    }
    Converter converter=new ReflectionConverter(mapper,reflectionProvider);
    Object p=null;
    context.convertAnother(p,converter);
  }
  @Override public Object unmarshal(  HierarchicalStreamReader arg0,  UnmarshallingContext arg1){
    return null;
  }
}

Cannot find matching typeVariable for: public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_21 {
static class MyConverter implements Converter {
    private final Map<String,String> attributes;
    private final Class<?> clazz;
    private final Mapper mapper;
    private final ReflectionProvider reflectionProvider;
    public MyConverter(    Mapper mapper,    ReflectionProvider reflectionProvider,    Class<?> clazz,    Map<String,String> attributes){
      super();
      this.mapper=mapper;
      this.reflectionProvider=reflectionProvider;
      this.attributes=attributes;
      this.clazz=clazz;
    }
    @Override public boolean canConvert(    Class cls){
      return cls == clazz;
    }
    @Override public void marshal(    Object value,    HierarchicalStreamWriter writer,    MarshallingContext context){
      for (      String key : attributes.keySet()) {
        writer.addAttribute(key,attributes.get(key));
      }
      Converter converter=new ReflectionConverter(mapper,reflectionProvider);
      Object p=null;
      context.convertAnother(p,converter);
    }
    @Override public Object unmarshal(    HierarchicalStreamReader arg0,    UnmarshallingContext arg1){
      return null;
    }
  }
}

Cannot find matching typeVariable for: HierarchicalStreamReader arg0
For node: HierarchicalStreamReader arg0 expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type56 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type56 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type56 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: arg0 expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type56 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: UnmarshallingContext arg1
For node: UnmarshallingContext arg1 expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type57 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type57 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type57 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: arg1 expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type57 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: null expected fqn: null with type: Type58 got: java.lang.Object
{Checked=137, Analyzed=120, Unsolved=17, Incorrect=12, Correct=108}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
=WildcardType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=Assignment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=FieldAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=SimpleName: {Checked=27, Analyzed=27, Unsolved=0, Incorrect=0, Correct=27}
com.thoughtworks.xstream.=SimpleType: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=Assignment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=FieldAccess: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=ParameterizedType: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
java=SimpleName: {Checked=35, Analyzed=30, Unsolved=5, Incorrect=4, Correct=26}
java=SimpleType: {Checked=13, Analyzed=13, Unsolved=0, Incorrect=4, Correct=9}
java=SingleVariableDeclaration: {Checked=5, Analyzed=4, Unsolved=1, Incorrect=0, Correct=4}
java=VariableDeclarationFragment: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
null=NullLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
void=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
Total stats
{Checked=137, Analyzed=120, Unsolved=17, Incorrect=12, Correct=108}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
=WildcardType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=Assignment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=FieldAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=SimpleName: {Checked=27, Analyzed=27, Unsolved=0, Incorrect=0, Correct=27}
com.thoughtworks.xstream.=SimpleType: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=Assignment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=FieldAccess: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=ParameterizedType: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
java=SimpleName: {Checked=35, Analyzed=30, Unsolved=5, Incorrect=4, Correct=26}
java=SimpleType: {Checked=13, Analyzed=13, Unsolved=0, Incorrect=4, Correct=9}
java=SingleVariableDeclaration: {Checked=5, Analyzed=4, Unsolved=1, Incorrect=0, Correct=4}
java=VariableDeclarationFragment: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
null=NullLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
void=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
,SimpleName,0,1,0,0,1
,ThisExpression,0,4,0,0,4
,WildcardType,2,2,0,2,0
boolean,InfixExpression,1,1,1,0,0
boolean,PrimitiveType,1,1,1,0,0
com.thoughtworks.xstream.,Assignment,2,2,2,0,0
com.thoughtworks.xstream.,ClassInstanceCreation,1,1,1,0,0
com.thoughtworks.xstream.,FieldAccess,2,2,2,0,0
com.thoughtworks.xstream.,SimpleName,27,27,27,0,0
com.thoughtworks.xstream.,SimpleType,11,11,11,0,0
com.thoughtworks.xstream.,SingleVariableDeclaration,6,6,6,0,0
com.thoughtworks.xstream.,VariableDeclarationFragment,3,3,3,0,0
java,Assignment,1,2,1,0,1
java,FieldAccess,1,2,1,0,1
java,MarkerAnnotation,3,3,3,0,0
java,MethodInvocation,1,2,1,0,1
java,ParameterizedType,2,4,2,0,2
java,SimpleName,30,35,26,4,5
java,SimpleType,13,13,9,4,0
java,SingleVariableDeclaration,4,5,4,0,1
java,VariableDeclarationFragment,2,3,2,0,1
null,NullLiteral,2,2,0,2,0
void,MethodInvocation,2,2,2,0,0
void,PrimitiveType,1,1,1,0,0
void,SimpleName,2,2,2,0,0
