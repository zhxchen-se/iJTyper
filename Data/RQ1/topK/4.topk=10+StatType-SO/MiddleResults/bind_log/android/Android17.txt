echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/Android17.java
Expect check=160
Cannot find matching typeVariable for: public class Android17 {
  private void Login(){
    HttpClient httpClient=new DefaultHttpClient();
    try {
      String url="http://192.168.1.5:8000/Login?username=test&password=test";
      HttpGet method=new HttpGet(new URI(url));
      HttpResponse response=httpClient.execute(method);
      if (response != null) {
        Log.i("login","received " + getResponse(response.getEntity()));
      }
 else {
        Log.i("login","got a null response");
      }
    }
 catch (    IOException e) {
      Log.e("error",e.getMessage());
    }
catch (    URISyntaxException e) {
      Log.e("error",e.getMessage());
    }
  }
  private String getResponse(  HttpEntity entity){
    String response="";
    try {
      int length=(int)entity.getContentLength();
      StringBuffer sb=new StringBuffer(length);
      InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
      char buff[]=new char[length];
      int cnt;
      while ((cnt=isr.read(buff,0,length - 1)) > 0) {
        sb.append(buff,0,cnt);
      }
      response=sb.toString();
      isr.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
    return response;
  }
}

Cannot find matching typeVariable for: Android17
Cannot find matching typeVariable for: public class Android17 {
  private void Login(){
    HttpClient httpClient=new DefaultHttpClient();
    try {
      String url="http://192.168.1.5:8000/Login?username=test&password=test";
      HttpGet method=new HttpGet(new URI(url));
      HttpResponse response=httpClient.execute(method);
      if (response != null) {
        Log.i("login","received " + getResponse(response.getEntity()));
      }
 else {
        Log.i("login","got a null response");
      }
    }
 catch (    IOException e) {
      Log.e("error",e.getMessage());
    }
catch (    URISyntaxException e) {
      Log.e("error",e.getMessage());
    }
  }
  private String getResponse(  HttpEntity entity){
    String response="";
    try {
      int length=(int)entity.getContentLength();
      StringBuffer sb=new StringBuffer(length);
      InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
      char buff[]=new char[length];
      int cnt;
      while ((cnt=isr.read(buff,0,length - 1)) > 0) {
        sb.append(buff,0,cnt);
      }
      response=sb.toString();
      isr.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
    return response;
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import android.util.Log;
public class Android17 {
  private void Login(){
    HttpClient httpClient=new DefaultHttpClient();
    try {
      String url="http://192.168.1.5:8000/Login?username=test&password=test";
      HttpGet method=new HttpGet(new URI(url));
      HttpResponse response=httpClient.execute(method);
      if (response != null) {
        Log.i("login","received " + getResponse(response.getEntity()));
      }
 else {
        Log.i("login","got a null response");
      }
    }
 catch (    IOException e) {
      Log.e("error",e.getMessage());
    }
catch (    URISyntaxException e) {
      Log.e("error",e.getMessage());
    }
  }
  private String getResponse(  HttpEntity entity){
    String response="";
    try {
      int length=(int)entity.getContentLength();
      StringBuffer sb=new StringBuffer(length);
      InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
      char buff[]=new char[length];
      int cnt;
      while ((cnt=isr.read(buff,0,length - 1)) > 0) {
        sb.append(buff,0,cnt);
      }
      response=sb.toString();
      isr.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
    return response;
  }
}

For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: Login
Cannot find matching typeVariable for: private void Login(){
  HttpClient httpClient=new DefaultHttpClient();
  try {
    String url="http://192.168.1.5:8000/Login?username=test&password=test";
    HttpGet method=new HttpGet(new URI(url));
    HttpResponse response=httpClient.execute(method);
    if (response != null) {
      Log.i("login","received " + getResponse(response.getEntity()));
    }
 else {
      Log.i("login","got a null response");
    }
  }
 catch (  IOException e) {
    Log.e("error",e.getMessage());
  }
catch (  URISyntaxException e) {
    Log.e("error",e.getMessage());
  }
}

Cannot find matching typeVariable for: public class Android17 {
  private void Login(){
    HttpClient httpClient=new DefaultHttpClient();
    try {
      String url="http://192.168.1.5:8000/Login?username=test&password=test";
      HttpGet method=new HttpGet(new URI(url));
      HttpResponse response=httpClient.execute(method);
      if (response != null) {
        Log.i("login","received " + getResponse(response.getEntity()));
      }
 else {
        Log.i("login","got a null response");
      }
    }
 catch (    IOException e) {
      Log.e("error",e.getMessage());
    }
catch (    URISyntaxException e) {
      Log.e("error",e.getMessage());
    }
  }
  private String getResponse(  HttpEntity entity){
    String response="";
    try {
      int length=(int)entity.getContentLength();
      StringBuffer sb=new StringBuffer(length);
      InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
      char buff[]=new char[length];
      int cnt;
      while ((cnt=isr.read(buff,0,length - 1)) > 0) {
        sb.append(buff,0,cnt);
      }
      response=sb.toString();
      isr.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
    return response;
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import android.util.Log;
public class Android17 {
  private void Login(){
    HttpClient httpClient=new DefaultHttpClient();
    try {
      String url="http://192.168.1.5:8000/Login?username=test&password=test";
      HttpGet method=new HttpGet(new URI(url));
      HttpResponse response=httpClient.execute(method);
      if (response != null) {
        Log.i("login","received " + getResponse(response.getEntity()));
      }
 else {
        Log.i("login","got a null response");
      }
    }
 catch (    IOException e) {
      Log.e("error",e.getMessage());
    }
catch (    URISyntaxException e) {
      Log.e("error",e.getMessage());
    }
  }
  private String getResponse(  HttpEntity entity){
    String response="";
    try {
      int length=(int)entity.getContentLength();
      StringBuffer sb=new StringBuffer(length);
      InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
      char buff[]=new char[length];
      int cnt;
      while ((cnt=isr.read(buff,0,length - 1)) > 0) {
        sb.append(buff,0,cnt);
      }
      response=sb.toString();
      isr.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
    return response;
  }
}

For node: HttpClient expected fqn: org.apache.http.client.HttpClient with type: Type4 got: org.apache.http.client.HttpClient
For node: HttpClient expected fqn: org.apache.http.client.HttpClient with type: Type4 got: org.apache.http.client.HttpClient
Cannot find matching typeVariable for: httpClient=new DefaultHttpClient()
For node: httpClient=new DefaultHttpClient() expected fqn: org.apache.http.client.HttpClient with type: Type4 got: org.apache.http.client.HttpClient
For node: httpClient expected fqn: org.apache.http.client.HttpClient with type: Type4 got: org.apache.http.client.HttpClient
For node: new DefaultHttpClient() expected fqn: org.apache.http.impl.client.DefaultHttpClient with type: Type5 got: org.apache.http.impl.client.DefaultHttpClient
For node: DefaultHttpClient expected fqn: org.apache.http.impl.client.DefaultHttpClient with type: Type5 got: org.apache.http.impl.client.DefaultHttpClient
For node: DefaultHttpClient expected fqn: org.apache.http.impl.client.DefaultHttpClient with type: Type5 got: org.apache.http.impl.client.DefaultHttpClient
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: url="http://192.168.1.5:8000/Login?username=test&password=test"
For node: url="http://192.168.1.5:8000/Login?username=test&password=test" expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: url expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: "http://192.168.1.5:8000/Login?username=test&password=test" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: HttpGet expected fqn: org.apache.http.client.methods.HttpGet with type: Type8 got: org.apache.http.client.methods.HttpGet
For node: HttpGet expected fqn: org.apache.http.client.methods.HttpGet with type: Type8 got: org.apache.http.client.methods.HttpGet
Cannot find matching typeVariable for: method=new HttpGet(new URI(url))
For node: method=new HttpGet(new URI(url)) expected fqn: org.apache.http.client.methods.HttpGet with type: Type8 got: org.apache.http.client.methods.HttpGet
For node: method expected fqn: org.apache.http.client.methods.HttpGet with type: Type8 got: org.apache.http.client.methods.HttpGet
For node: new HttpGet(new URI(url)) expected fqn: org.apache.http.client.methods.HttpGet with type: Type8 got: org.apache.http.client.methods.HttpGet
For node: HttpGet expected fqn: org.apache.http.client.methods.HttpGet with type: Type8 got: org.apache.http.client.methods.HttpGet
For node: HttpGet expected fqn: org.apache.http.client.methods.HttpGet with type: Type8 got: org.apache.http.client.methods.HttpGet
For node: new URI(url) expected fqn: java.net.URI with type: Type9 got: java.net.URI
For node: URI expected fqn: java.net.URI with type: Type9 got: java.net.URI
For node: URI expected fqn: java.net.URI with type: Type9 got: java.net.URI
For node: url expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: HttpResponse expected fqn: org.apache.http.HttpResponse with type: Type14 got: org.apache.http.HttpResponse
For node: HttpResponse expected fqn: org.apache.http.HttpResponse with type: Type14 got: org.apache.http.HttpResponse
Cannot find matching typeVariable for: response=httpClient.execute(method)
For node: response=httpClient.execute(method) expected fqn: org.apache.http.HttpResponse with type: Type14 got: org.apache.http.HttpResponse
For node: response expected fqn: org.apache.http.HttpResponse with type: Type14 got: org.apache.http.HttpResponse
For node: httpClient.execute(method) expected fqn: org.apache.http.HttpResponse with type: Type15 got: org.apache.http.HttpResponse
For node: httpClient expected fqn: org.apache.http.client.HttpClient with type: Type4 got: org.apache.http.client.HttpClient
Cannot find matching typeVariable for: execute
For node: execute expected fqn: org.apache.http.HttpResponse with type: Type15 got: org.apache.http.HttpResponse
For node: method expected fqn: org.apache.http.client.methods.HttpGet with type: Type8 got: org.apache.http.client.methods.HttpGet
For node: response != null expected fqn: boolean with type: Type19 got: boolean
For node: response expected fqn: org.apache.http.HttpResponse with type: Type14 got: org.apache.http.HttpResponse
Did not find solution for node: null with type Type18
For node: Log.i("login","received " + getResponse(response.getEntity())) expected fqn: int with type: Type23 got: int
For node: Log expected fqn: android.util.Log with type: Type22 got: android.util.Log
Cannot find matching typeVariable for: i
For node: i expected fqn: int with type: Type23 got: int
For node: "login" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: "received " + getResponse(response.getEntity()) expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: "received " expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: getResponse(response.getEntity()) expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: getResponse
For node: getResponse expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: response.getEntity() expected fqn: org.apache.http.HttpEntity with type: Type20 got: org.apache.http.HttpEntity
For node: response expected fqn: org.apache.http.HttpResponse with type: Type14 got: org.apache.http.HttpResponse
Cannot find matching typeVariable for: getEntity
For node: getEntity expected fqn: org.apache.http.HttpEntity with type: Type20 got: org.apache.http.HttpEntity
For node: Log.i("login","got a null response") expected fqn: int with type: Type26 got: int
For node: Log expected fqn: android.util.Log with type: Type22 got: android.util.Log
Cannot find matching typeVariable for: i
For node: i expected fqn: int with type: Type26 got: int
For node: "login" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: "got a null response" expected fqn: java.lang.String with type: Type7 got: java.lang.String
Cannot find matching typeVariable for: IOException e
Did not find solution for node: IOException e with type Type27
Did not find solution for node: IOException with type Type27
Did not find solution for node: IOException with type Type27
Did not find solution for node: e with type Type27
For node: Log.e("error",e.getMessage()) expected fqn: int with type: Type30 got: int
For node: Log expected fqn: android.util.Log with type: Type22 got: android.util.Log
Cannot find matching typeVariable for: e
For node: e expected fqn: int with type: Type30 got: int
For node: "error" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: e.getMessage() expected fqn: java.lang.String with type: Type28 got: java.lang.String
Did not find solution for node: e with type Type27
Cannot find matching typeVariable for: getMessage
For node: getMessage expected fqn: java.lang.String with type: Type28 got: java.lang.String
Cannot find matching typeVariable for: URISyntaxException e
For node: URISyntaxException e expected fqn: java.net.URISyntaxException with type: Type34 got: java.net.URISyntaxException
For node: URISyntaxException expected fqn: java.net.URISyntaxException with type: Type34 got: java.net.URISyntaxException
For node: URISyntaxException expected fqn: java.net.URISyntaxException with type: Type34 got: java.net.URISyntaxException
For node: e expected fqn: java.net.URISyntaxException with type: Type34 got: java.net.URISyntaxException
For node: Log.e("error",e.getMessage()) expected fqn: int with type: Type37 got: int
For node: Log expected fqn: android.util.Log with type: Type22 got: android.util.Log
Cannot find matching typeVariable for: e
For node: e expected fqn: int with type: Type37 got: int
For node: "error" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: e.getMessage() expected fqn: java.lang.String with type: Type35 got: java.lang.String
For node: e expected fqn: java.net.URISyntaxException with type: Type34 got: java.net.URISyntaxException
Cannot find matching typeVariable for: getMessage
For node: getMessage expected fqn: java.lang.String with type: Type35 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: getResponse
Cannot find matching typeVariable for: private String getResponse(HttpEntity entity){
  String response="";
  try {
    int length=(int)entity.getContentLength();
    StringBuffer sb=new StringBuffer(length);
    InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
    char buff[]=new char[length];
    int cnt;
    while ((cnt=isr.read(buff,0,length - 1)) > 0) {
      sb.append(buff,0,cnt);
    }
    response=sb.toString();
    isr.close();
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
  return response;
}

Cannot find matching typeVariable for: public class Android17 {
  private void Login(){
    HttpClient httpClient=new DefaultHttpClient();
    try {
      String url="http://192.168.1.5:8000/Login?username=test&password=test";
      HttpGet method=new HttpGet(new URI(url));
      HttpResponse response=httpClient.execute(method);
      if (response != null) {
        Log.i("login","received " + getResponse(response.getEntity()));
      }
 else {
        Log.i("login","got a null response");
      }
    }
 catch (    IOException e) {
      Log.e("error",e.getMessage());
    }
catch (    URISyntaxException e) {
      Log.e("error",e.getMessage());
    }
  }
  private String getResponse(  HttpEntity entity){
    String response="";
    try {
      int length=(int)entity.getContentLength();
      StringBuffer sb=new StringBuffer(length);
      InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
      char buff[]=new char[length];
      int cnt;
      while ((cnt=isr.read(buff,0,length - 1)) > 0) {
        sb.append(buff,0,cnt);
      }
      response=sb.toString();
      isr.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
    return response;
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import android.util.Log;
public class Android17 {
  private void Login(){
    HttpClient httpClient=new DefaultHttpClient();
    try {
      String url="http://192.168.1.5:8000/Login?username=test&password=test";
      HttpGet method=new HttpGet(new URI(url));
      HttpResponse response=httpClient.execute(method);
      if (response != null) {
        Log.i("login","received " + getResponse(response.getEntity()));
      }
 else {
        Log.i("login","got a null response");
      }
    }
 catch (    IOException e) {
      Log.e("error",e.getMessage());
    }
catch (    URISyntaxException e) {
      Log.e("error",e.getMessage());
    }
  }
  private String getResponse(  HttpEntity entity){
    String response="";
    try {
      int length=(int)entity.getContentLength();
      StringBuffer sb=new StringBuffer(length);
      InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
      char buff[]=new char[length];
      int cnt;
      while ((cnt=isr.read(buff,0,length - 1)) > 0) {
        sb.append(buff,0,cnt);
      }
      response=sb.toString();
      isr.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
    return response;
  }
}

Cannot find matching typeVariable for: HttpEntity entity
For node: HttpEntity entity expected fqn: org.apache.http.HttpEntity with type: Type41 got: org.apache.http.HttpEntity
For node: HttpEntity expected fqn: org.apache.http.HttpEntity with type: Type41 got: org.apache.http.HttpEntity
For node: HttpEntity expected fqn: org.apache.http.HttpEntity with type: Type41 got: org.apache.http.HttpEntity
For node: entity expected fqn: org.apache.http.HttpEntity with type: Type41 got: org.apache.http.HttpEntity
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
Cannot find matching typeVariable for: response=""
For node: response="" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: response expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: "" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: int expected fqn: int with type: Type42 got: int
Cannot find matching typeVariable for: length=(int)entity.getContentLength()
For node: length=(int)entity.getContentLength() expected fqn: int with type: Type42 got: int
For node: length expected fqn: int with type: Type42 got: int
For node: (int)entity.getContentLength() expected fqn: int with type: Type42 got: int
For node: int expected fqn: int with type: Type42 got: int
Did not find solution for node: entity.getContentLength() with type Type43
For node: entity expected fqn: org.apache.http.HttpEntity with type: Type41 got: org.apache.http.HttpEntity
Cannot find matching typeVariable for: getContentLength
Did not find solution for node: getContentLength with type Type43
For node: StringBuffer expected fqn: java.lang.StringBuffer with type: Type45 got: java.lang.StringBuffer
For node: StringBuffer expected fqn: java.lang.StringBuffer with type: Type45 got: java.lang.StringBuffer
Cannot find matching typeVariable for: sb=new StringBuffer(length)
For node: sb=new StringBuffer(length) expected fqn: java.lang.StringBuffer with type: Type45 got: java.lang.StringBuffer
For node: sb expected fqn: java.lang.StringBuffer with type: Type45 got: java.lang.StringBuffer
For node: new StringBuffer(length) expected fqn: java.lang.StringBuffer with type: Type45 got: java.lang.StringBuffer
For node: StringBuffer expected fqn: java.lang.StringBuffer with type: Type45 got: java.lang.StringBuffer
For node: StringBuffer expected fqn: java.lang.StringBuffer with type: Type45 got: java.lang.StringBuffer
For node: length expected fqn: int with type: Type42 got: int
Did not find solution for node: InputStreamReader with type Type48
Did not find solution for node: InputStreamReader with type Type48
Cannot find matching typeVariable for: isr=new InputStreamReader(entity.getContent(),"UTF-8")
Did not find solution for node: isr=new InputStreamReader(entity.getContent(),"UTF-8") with type Type48
Did not find solution for node: isr with type Type48
Did not find solution for node: new InputStreamReader(entity.getContent(),"UTF-8") with type Type48
Did not find solution for node: InputStreamReader with type Type48
Did not find solution for node: InputStreamReader with type Type48
Did not find solution for node: entity.getContent() with type Type49
For node: entity expected fqn: org.apache.http.HttpEntity with type: Type41 got: org.apache.http.HttpEntity
Cannot find matching typeVariable for: getContent
Did not find solution for node: getContent with type Type49
For node: "UTF-8" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: char expected fqn: char with type: Type54 got: char
Cannot find matching typeVariable for: buff[]=new char[length]
Did not find solution for node: buff[]=new char[length] with type Type55
Did not find solution for node: buff with type Type55
Did not find solution for node: new char[length] with type Type55
Did not find solution for node: char[] with type Type55
For node: char expected fqn: char with type: Type54 got: char
For node: length expected fqn: int with type: Type42 got: int
For node: int expected fqn: int with type: Type42 got: int
Cannot find matching typeVariable for: cnt
For node: cnt expected fqn: int with type: Type42 got: int
Cannot find matching typeVariable for: cnt
Cannot find matching typeVariable for: int cnt;

Cannot find matching typeVariable for: {
  int length=(int)entity.getContentLength();
  StringBuffer sb=new StringBuffer(length);
  InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
  char buff[]=new char[length];
  int cnt;
  while ((cnt=isr.read(buff,0,length - 1)) > 0) {
    sb.append(buff,0,cnt);
  }
  response=sb.toString();
  isr.close();
}

Cannot find matching typeVariable for: try {
  int length=(int)entity.getContentLength();
  StringBuffer sb=new StringBuffer(length);
  InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
  char buff[]=new char[length];
  int cnt;
  while ((cnt=isr.read(buff,0,length - 1)) > 0) {
    sb.append(buff,0,cnt);
  }
  response=sb.toString();
  isr.close();
}
 catch (IOException ioe) {
  ioe.printStackTrace();
}

Cannot find matching typeVariable for: {
  String response="";
  try {
    int length=(int)entity.getContentLength();
    StringBuffer sb=new StringBuffer(length);
    InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
    char buff[]=new char[length];
    int cnt;
    while ((cnt=isr.read(buff,0,length - 1)) > 0) {
      sb.append(buff,0,cnt);
    }
    response=sb.toString();
    isr.close();
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
  return response;
}

Cannot find matching typeVariable for: private String getResponse(HttpEntity entity){
  String response="";
  try {
    int length=(int)entity.getContentLength();
    StringBuffer sb=new StringBuffer(length);
    InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
    char buff[]=new char[length];
    int cnt;
    while ((cnt=isr.read(buff,0,length - 1)) > 0) {
      sb.append(buff,0,cnt);
    }
    response=sb.toString();
    isr.close();
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
  return response;
}

Cannot find matching typeVariable for: public class Android17 {
  private void Login(){
    HttpClient httpClient=new DefaultHttpClient();
    try {
      String url="http://192.168.1.5:8000/Login?username=test&password=test";
      HttpGet method=new HttpGet(new URI(url));
      HttpResponse response=httpClient.execute(method);
      if (response != null) {
        Log.i("login","received " + getResponse(response.getEntity()));
      }
 else {
        Log.i("login","got a null response");
      }
    }
 catch (    IOException e) {
      Log.e("error",e.getMessage());
    }
catch (    URISyntaxException e) {
      Log.e("error",e.getMessage());
    }
  }
  private String getResponse(  HttpEntity entity){
    String response="";
    try {
      int length=(int)entity.getContentLength();
      StringBuffer sb=new StringBuffer(length);
      InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
      char buff[]=new char[length];
      int cnt;
      while ((cnt=isr.read(buff,0,length - 1)) > 0) {
        sb.append(buff,0,cnt);
      }
      response=sb.toString();
      isr.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
    return response;
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import android.util.Log;
public class Android17 {
  private void Login(){
    HttpClient httpClient=new DefaultHttpClient();
    try {
      String url="http://192.168.1.5:8000/Login?username=test&password=test";
      HttpGet method=new HttpGet(new URI(url));
      HttpResponse response=httpClient.execute(method);
      if (response != null) {
        Log.i("login","received " + getResponse(response.getEntity()));
      }
 else {
        Log.i("login","got a null response");
      }
    }
 catch (    IOException e) {
      Log.e("error",e.getMessage());
    }
catch (    URISyntaxException e) {
      Log.e("error",e.getMessage());
    }
  }
  private String getResponse(  HttpEntity entity){
    String response="";
    try {
      int length=(int)entity.getContentLength();
      StringBuffer sb=new StringBuffer(length);
      InputStreamReader isr=new InputStreamReader(entity.getContent(),"UTF-8");
      char buff[]=new char[length];
      int cnt;
      while ((cnt=isr.read(buff,0,length - 1)) > 0) {
        sb.append(buff,0,cnt);
      }
      response=sb.toString();
      isr.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
    return response;
  }
}

For node: (cnt=isr.read(buff,0,length - 1)) > 0 expected fqn: boolean with type: Type19 got: boolean
For node: (cnt=isr.read(buff,0,length - 1)) expected fqn: int with type: Type42 got: int
For node: cnt=isr.read(buff,0,length - 1) expected fqn: int with type: Type42 got: int
For node: cnt expected fqn: int with type: Type42 got: int
For node: isr.read(buff,0,length - 1) expected fqn: int with type: Type57 got: int
Did not find solution for node: isr with type Type48
Cannot find matching typeVariable for: read
For node: read expected fqn: int with type: Type57 got: int
Did not find solution for node: buff with type Type55
For node: 0 expected fqn: int with type: Type56 got: byte
For node: length - 1 expected fqn: int with type: Type42 got: int
For node: length expected fqn: int with type: Type42 got: int
For node: 1 expected fqn: int with type: Type56 got: byte
For node: 0 expected fqn: int with type: Type56 got: byte
For node: sb.append(buff,0,cnt) expected fqn: java.lang.StringBuffer with type: Type62 got: java.lang.StringBuffer
For node: sb expected fqn: java.lang.StringBuffer with type: Type45 got: java.lang.StringBuffer
Cannot find matching typeVariable for: append
For node: append expected fqn: java.lang.StringBuffer with type: Type62 got: java.lang.StringBuffer
Did not find solution for node: buff with type Type55
For node: 0 expected fqn: int with type: Type56 got: byte
For node: cnt expected fqn: int with type: Type42 got: int
For node: response=sb.toString() expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: response expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: sb.toString() expected fqn: java.lang.String with type: Type67 got: java.lang.String
For node: sb expected fqn: java.lang.StringBuffer with type: Type45 got: java.lang.StringBuffer
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type67 got: java.lang.String
Did not find solution for node: isr.close() with type Type68
Did not find solution for node: isr with type Type48
Cannot find matching typeVariable for: close
Did not find solution for node: close with type Type68
Cannot find matching typeVariable for: IOException ioe
Did not find solution for node: IOException ioe with type Type27
Did not find solution for node: IOException with type Type27
Did not find solution for node: IOException with type Type27
Did not find solution for node: ioe with type Type27
Did not find solution for node: ioe.printStackTrace() with type Type70
Did not find solution for node: ioe with type Type27
Cannot find matching typeVariable for: printStackTrace
Did not find solution for node: printStackTrace with type Type70
For node: response expected fqn: java.lang.String with type: Type7 got: java.lang.String
{Checked=155, Analyzed=121, Unsolved=34, Incorrect=4, Correct=117}
android.=SimpleName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
char=ArrayCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
char=ArrayType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
char=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
char=SimpleName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
char=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
int=NumberLiteral: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=4, Correct=0}
int=ParenthesizedExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
int=SimpleName: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
int=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=6, Analyzed=5, Unsolved=1, Incorrect=0, Correct=5}
java=SimpleName: {Checked=34, Analyzed=22, Unsolved=12, Incorrect=0, Correct=22}
java=SimpleType: {Checked=11, Analyzed=7, Unsolved=4, Incorrect=0, Correct=7}
java=SingleVariableDeclaration: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
java=VariableDeclarationFragment: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
long=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
long=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
null=NullLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.apache.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.apache.=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.apache.=SimpleName: {Checked=18, Analyzed=18, Unsolved=0, Incorrect=0, Correct=18}
org.apache.=SimpleType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
org.apache.=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.apache.=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
Total stats
{Checked=155, Analyzed=121, Unsolved=34, Incorrect=4, Correct=117}
android.=SimpleName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
char=ArrayCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
char=ArrayType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
char=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
char=SimpleName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
char=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
int=NumberLiteral: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=4, Correct=0}
int=ParenthesizedExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
int=SimpleName: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
int=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=6, Analyzed=5, Unsolved=1, Incorrect=0, Correct=5}
java=SimpleName: {Checked=34, Analyzed=22, Unsolved=12, Incorrect=0, Correct=22}
java=SimpleType: {Checked=11, Analyzed=7, Unsolved=4, Incorrect=0, Correct=7}
java=SingleVariableDeclaration: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
java=VariableDeclarationFragment: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
long=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
long=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
null=NullLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.apache.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.apache.=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.apache.=SimpleName: {Checked=18, Analyzed=18, Unsolved=0, Incorrect=0, Correct=18}
org.apache.=SimpleType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
org.apache.=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.apache.=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
android.,SimpleName,4,4,4,0,0
boolean,InfixExpression,2,2,2,0,0
char,ArrayCreation,0,1,0,0,1
char,ArrayType,0,1,0,0,1
char,PrimitiveType,2,2,2,0,0
char,SimpleName,0,3,0,0,3
char,VariableDeclarationFragment,0,1,0,0,1
int,Assignment,1,1,1,0,0
int,CastExpression,1,1,1,0,0
int,InfixExpression,1,1,1,0,0
int,MethodInvocation,5,5,5,0,0
int,NumberLiteral,4,4,0,4,0
int,ParenthesizedExpression,1,1,1,0,0
int,PrimitiveType,3,3,3,0,0
int,SimpleName,11,11,11,0,0
int,VariableDeclarationFragment,2,2,2,0,0
java,Assignment,1,1,1,0,0
java,ClassInstanceCreation,2,3,2,0,1
java,InfixExpression,1,1,1,0,0
java,MethodInvocation,5,6,5,0,1
java,SimpleName,22,34,22,0,12
java,SimpleType,7,11,7,0,4
java,SingleVariableDeclaration,1,3,1,0,2
java,StringLiteral,9,9,9,0,0
java,VariableDeclarationFragment,3,4,3,0,1
long,MethodInvocation,0,1,0,0,1
long,SimpleName,0,1,0,0,1
null,NullLiteral,0,1,0,0,1
org.apache.,ClassInstanceCreation,2,2,2,0,0
org.apache.,MethodInvocation,2,2,2,0,0
org.apache.,SimpleName,18,18,18,0,0
org.apache.,SimpleType,6,6,6,0,0
org.apache.,SingleVariableDeclaration,1,1,1,0,0
org.apache.,VariableDeclarationFragment,3,3,3,0,0
void,MethodInvocation,0,2,0,0,2
void,PrimitiveType,1,1,1,0,0
void,SimpleName,0,2,0,0,2
