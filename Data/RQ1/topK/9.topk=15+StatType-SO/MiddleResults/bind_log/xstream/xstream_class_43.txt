echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_43.java
Expect check=198
Cannot find matching typeVariable for: public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Did not find solution for node: xstream_class_43 with type Type2
Did not find solution for node: List<Book> with type Type34=Type33<Type1>
For node: List expected fqn: java.util.List<xstream_class_43.Book> with type: Type33 got: java.util.List
For node: List expected fqn: java.util.List<xstream_class_43.Book> with type: Type33 got: java.util.List
Did not find solution for node: Book with type Type1
Did not find solution for node: Book with type Type1
Cannot find matching typeVariable for: books
Did not find solution for node: books with type Type34=Type33<Type1>
Cannot find matching typeVariable for: books
Cannot find matching typeVariable for: public List<Book> books;

Cannot find matching typeVariable for: public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: xstream_class_43
Cannot find matching typeVariable for: public xstream_class_43(List<Book> books){
  this.books=books;
}

Cannot find matching typeVariable for: public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: List<Book> books
Did not find solution for node: List<Book> books with type Type34=Type33<Type1>
Did not find solution for node: List<Book> with type Type34=Type33<Type1>
For node: List expected fqn: java.util.List<xstream_class_43.Book> with type: Type33 got: java.util.List
For node: List expected fqn: java.util.List<xstream_class_43.Book> with type: Type33 got: java.util.List
Did not find solution for node: Book with type Type1
Did not find solution for node: Book with type Type1
Did not find solution for node: books with type Type34=Type33<Type1>
Did not find solution for node: this.books=books with type Type34=Type33<Type1>
Did not find solution for node: this.books with type Type34=Type33<Type1>
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: books
Did not find solution for node: books with type Type34=Type33<Type1>
Cannot find matching typeVariable for: books
Did not find solution for node: books with type Type34=Type33<Type1>
For node: @Override expected fqn: java.lang.Override with type: Type35 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type35 got: java.lang.Override
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: toString
Cannot find matching typeVariable for: @Override public String toString(){
  StringBuilder b=new StringBuilder();
  b.append("Library with " + books.size() + " books:\n");
  for (  Book book : books) {
    b.append(book.toString());
    b.append("\n");
  }
  return b.toString();
}

Cannot find matching typeVariable for: public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

For node: StringBuilder expected fqn: java.lang.StringBuilder with type: Type36 got: java.lang.StringBuilder
For node: StringBuilder expected fqn: java.lang.StringBuilder with type: Type36 got: java.lang.StringBuilder
Cannot find matching typeVariable for: b=new StringBuilder()
For node: b=new StringBuilder() expected fqn: java.lang.StringBuilder with type: Type36 got: java.lang.StringBuilder
For node: b expected fqn: java.lang.StringBuilder with type: Type36 got: java.lang.StringBuilder
For node: new StringBuilder() expected fqn: java.lang.StringBuilder with type: Type36 got: java.lang.StringBuilder
For node: StringBuilder expected fqn: java.lang.StringBuilder with type: Type36 got: java.lang.StringBuilder
For node: StringBuilder expected fqn: java.lang.StringBuilder with type: Type36 got: java.lang.StringBuilder
For node: b.append("Library with " + books.size() + " books:\n") expected fqn: java.lang.StringBuilder with type: Type43 got: java.lang.StringBuilder
For node: b expected fqn: java.lang.StringBuilder with type: Type36 got: java.lang.StringBuilder
Cannot find matching typeVariable for: append
For node: append expected fqn: java.lang.StringBuilder with type: Type43 got: java.lang.StringBuilder
For node: "Library with " + books.size() + " books:\n" expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: "Library with " expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: books.size() expected fqn: int with type: Type39 got: java.lang.String
Did not find solution for node: books with type Type34=Type33<Type1>
Cannot find matching typeVariable for: size
For node: size expected fqn: int with type: Type39 got: java.lang.String
For node: " books:\n" expected fqn: java.lang.String with type: Type38 got: java.lang.String
Cannot find matching typeVariable for: Book book
Did not find solution for node: Book book with type Type1
Did not find solution for node: Book with type Type1
Did not find solution for node: Book with type Type1
Did not find solution for node: book with type Type1
Cannot find matching typeVariable for: books
Cannot find matching typeVariable for: for (Book book : books) {
  b.append(book.toString());
  b.append("\n");
}

Cannot find matching typeVariable for: {
  StringBuilder b=new StringBuilder();
  b.append("Library with " + books.size() + " books:\n");
  for (  Book book : books) {
    b.append(book.toString());
    b.append("\n");
  }
  return b.toString();
}

Cannot find matching typeVariable for: @Override public String toString(){
  StringBuilder b=new StringBuilder();
  b.append("Library with " + books.size() + " books:\n");
  for (  Book book : books) {
    b.append(book.toString());
    b.append("\n");
  }
  return b.toString();
}

Cannot find matching typeVariable for: public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

For node: b.append(book.toString()) expected fqn: java.lang.StringBuilder with type: Type47 got: java.lang.StringBuilder
For node: b expected fqn: java.lang.StringBuilder with type: Type36 got: java.lang.StringBuilder
Cannot find matching typeVariable for: append
For node: append expected fqn: java.lang.StringBuilder with type: Type47 got: java.lang.StringBuilder
For node: book.toString() expected fqn: java.lang.String with type: Type46 got: java.lang.String
Did not find solution for node: book with type Type1
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: b.append("\n") expected fqn: java.lang.StringBuilder with type: Type45 got: java.lang.StringBuilder
For node: b expected fqn: java.lang.StringBuilder with type: Type36 got: java.lang.StringBuilder
Cannot find matching typeVariable for: append
For node: append expected fqn: java.lang.StringBuilder with type: Type45 got: java.lang.StringBuilder
For node: "\n" expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: b.toString() expected fqn: java.lang.String with type: Type50 got: java.lang.String
For node: b expected fqn: java.lang.StringBuilder with type: Type36 got: java.lang.StringBuilder
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type50 got: java.lang.String
Cannot find matching typeVariable for: public static class Book {
  private String title;
  private String author;
  public Book(  String title,  String author){
    this.title=title;
    this.author=author;
  }
  @Override public String toString(){
    return "\"" + title + "\" by "+ author;
  }
}

Did not find solution for node: Book with type Type1
For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
Cannot find matching typeVariable for: title
For node: title expected fqn: java.lang.String with type: Type38 got: java.lang.String
Cannot find matching typeVariable for: title
Cannot find matching typeVariable for: private String title;

Cannot find matching typeVariable for: public static class Book {
  private String title;
  private String author;
  public Book(  String title,  String author){
    this.title=title;
    this.author=author;
  }
  @Override public String toString(){
    return "\"" + title + "\" by "+ author;
  }
}

Cannot find matching typeVariable for: public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
Cannot find matching typeVariable for: author
For node: author expected fqn: java.lang.String with type: Type38 got: java.lang.String
Cannot find matching typeVariable for: author
Cannot find matching typeVariable for: private String author;

Cannot find matching typeVariable for: public static class Book {
  private String title;
  private String author;
  public Book(  String title,  String author){
    this.title=title;
    this.author=author;
  }
  @Override public String toString(){
    return "\"" + title + "\" by "+ author;
  }
}

Cannot find matching typeVariable for: public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: Book
Cannot find matching typeVariable for: public Book(String title,String author){
  this.title=title;
  this.author=author;
}

Cannot find matching typeVariable for: public static class Book {
  private String title;
  private String author;
  public Book(  String title,  String author){
    this.title=title;
    this.author=author;
  }
  @Override public String toString(){
    return "\"" + title + "\" by "+ author;
  }
}

Cannot find matching typeVariable for: public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: String title
For node: String title expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: title expected fqn: java.lang.String with type: Type38 got: java.lang.String
Cannot find matching typeVariable for: String author
For node: String author expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: author expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: this.title=title expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: this.title expected fqn: java.lang.String with type: Type38 got: java.lang.String
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: title
For node: title expected fqn: java.lang.String with type: Type38 got: java.lang.String
Cannot find matching typeVariable for: title
For node: title expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: this.author=author expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: this.author expected fqn: java.lang.String with type: Type38 got: java.lang.String
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: author
For node: author expected fqn: java.lang.String with type: Type38 got: java.lang.String
Cannot find matching typeVariable for: author
For node: author expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: @Override expected fqn: java.lang.Override with type: Type35 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type35 got: java.lang.Override
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: toString
Cannot find matching typeVariable for: @Override public String toString(){
  return "\"" + title + "\" by "+ author;
}

Cannot find matching typeVariable for: public static class Book {
  private String title;
  private String author;
  public Book(  String title,  String author){
    this.title=title;
    this.author=author;
  }
  @Override public String toString(){
    return "\"" + title + "\" by "+ author;
  }
}

Cannot find matching typeVariable for: public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

For node: "\"" + title + "\" by "+ author expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: "\"" expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: title expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: "\" by " expected fqn: java.lang.String with type: Type38 got: java.lang.String
Cannot find matching typeVariable for: author
For node: author expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static void main(String[] args){
  List<Book> books=new ArrayList<Book>();
  books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
  xstream_class_43 lib=new xstream_class_43(books);
  XStream stream=new XStream(new DomDriver());
  String xml=stream.toXML(lib);
  xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
  System.out.println(xml);
  System.out.println(lib);
  System.out.println(lib2);
  System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
}

Cannot find matching typeVariable for: public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_43 {
  public List<Book> books;
  public xstream_class_43(  List<Book> books){
    this.books=books;
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder();
    b.append("Library with " + books.size() + " books:\n");
    for (    Book book : books) {
      b.append(book.toString());
      b.append("\n");
    }
    return b.toString();
  }
public static class Book {
    private String title;
    private String author;
    public Book(    String title,    String author){
      this.title=title;
      this.author=author;
    }
    @Override public String toString(){
      return "\"" + title + "\" by "+ author;
    }
  }
  public static void main(  String[] args){
    List<Book> books=new ArrayList<Book>();
    books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle"));
    xstream_class_43 lib=new xstream_class_43(books);
    XStream stream=new XStream(new DomDriver());
    String xml=stream.toXML(lib);
    xstream_class_43 lib2=(xstream_class_43)stream.fromXML(xml);
    System.out.println(xml);
    System.out.println(lib);
    System.out.println(lib2);
    System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString()));
  }
}

Cannot find matching typeVariable for: String[] args
For node: String[] args expected fqn: java.lang.String[] with type: Type51 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type51 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: args expected fqn: java.lang.String[] with type: Type51 got: java.lang.String[]
Did not find solution for node: List<Book> with type Type34=Type33<Type1>
For node: List expected fqn: java.util.List<xstream_class_43.Book> with type: Type33 got: java.util.List
For node: List expected fqn: java.util.List<xstream_class_43.Book> with type: Type33 got: java.util.List
Did not find solution for node: Book with type Type1
Did not find solution for node: Book with type Type1
Cannot find matching typeVariable for: books=new ArrayList<Book>()
Did not find solution for node: books=new ArrayList<Book>() with type Type34=Type33<Type1>
Did not find solution for node: books with type Type34=Type33<Type1>
Did not find solution for node: new ArrayList<Book>() with type Type53=Type52<Type1>
Did not find solution for node: ArrayList<Book> with type Type53=Type52<Type1>
For node: ArrayList expected fqn: java.util.ArrayList<xstream_class_43.Book> with type: Type52 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList<xstream_class_43.Book> with type: Type52 got: java.util.ArrayList
Did not find solution for node: Book with type Type1
Did not find solution for node: Book with type Type1
Did not find solution for node: books.add(new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle")) with type Type60
Did not find solution for node: books with type Type34=Type33<Type1>
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type60
Did not find solution for node: new Book("The Talent Code: Greatness Isn't Born. It's Grown. Here's How","Daniel Coyle") with type Type1
Did not find solution for node: Book with type Type1
Did not find solution for node: Book with type Type1
For node: "The Talent Code: Greatness Isn't Born. It's Grown. Here's How" expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: "Daniel Coyle" expected fqn: java.lang.String with type: Type38 got: java.lang.String
Did not find solution for node: xstream_class_43 with type Type2
Did not find solution for node: xstream_class_43 with type Type2
Cannot find matching typeVariable for: lib=new xstream_class_43(books)
Did not find solution for node: lib=new xstream_class_43(books) with type Type2
Did not find solution for node: lib with type Type2
Did not find solution for node: new xstream_class_43(books) with type Type2
Did not find solution for node: xstream_class_43 with type Type2
Did not find solution for node: xstream_class_43 with type Type2
Did not find solution for node: books with type Type34=Type33<Type1>
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type68 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type68 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: stream=new XStream(new DomDriver())
For node: stream=new XStream(new DomDriver()) expected fqn: com.thoughtworks.xstream.XStream with type: Type68 got: com.thoughtworks.xstream.XStream
For node: stream expected fqn: com.thoughtworks.xstream.XStream with type: Type68 got: com.thoughtworks.xstream.XStream
For node: new XStream(new DomDriver()) expected fqn: com.thoughtworks.xstream.XStream with type: Type68 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type68 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type68 got: com.thoughtworks.xstream.XStream
For node: new DomDriver() expected fqn: com.thoughtworks.xstream.io.xml.DomDriver with type: Type69 got: com.thoughtworks.xstream.io.xml.DomDriver
For node: DomDriver expected fqn: com.thoughtworks.xstream.io.xml.DomDriver with type: Type69 got: com.thoughtworks.xstream.io.xml.DomDriver
For node: DomDriver expected fqn: com.thoughtworks.xstream.io.xml.DomDriver with type: Type69 got: com.thoughtworks.xstream.io.xml.DomDriver
For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type38 got: java.lang.String
Cannot find matching typeVariable for: xml=stream.toXML(lib)
For node: xml=stream.toXML(lib) expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: xml expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: stream.toXML(lib) expected fqn: java.lang.String with type: Type73 got: java.lang.String
For node: stream expected fqn: com.thoughtworks.xstream.XStream with type: Type68 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: toXML
For node: toXML expected fqn: java.lang.String with type: Type73 got: java.lang.String
Did not find solution for node: lib with type Type2
Did not find solution for node: xstream_class_43 with type Type2
Did not find solution for node: xstream_class_43 with type Type2
Cannot find matching typeVariable for: lib2=(xstream_class_43)stream.fromXML(xml)
Did not find solution for node: lib2=(xstream_class_43)stream.fromXML(xml) with type Type2
Did not find solution for node: lib2 with type Type2
Did not find solution for node: (xstream_class_43)stream.fromXML(xml) with type Type2
Did not find solution for node: xstream_class_43 with type Type2
Did not find solution for node: xstream_class_43 with type Type2
For node: stream.fromXML(xml) expected fqn: java.lang.Object with type: Type76 got: java.lang.Object
For node: stream expected fqn: com.thoughtworks.xstream.XStream with type: Type68 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: fromXML
For node: fromXML expected fqn: java.lang.Object with type: Type76 got: java.lang.Object
For node: xml expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: System.out.println(xml) expected fqn: void with type: Type81 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type81 got: void
For node: System expected fqn: java.lang.System with type: Type79 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type80 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type81 got: void
For node: xml expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: System.out.println(lib) expected fqn: void with type: Type84 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type84 got: void
For node: System expected fqn: java.lang.System with type: Type79 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type80 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type84 got: void
Did not find solution for node: lib with type Type2
For node: System.out.println(lib2) expected fqn: void with type: Type86 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type86 got: void
For node: System expected fqn: java.lang.System with type: Type79 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type80 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type86 got: void
Did not find solution for node: lib2 with type Type2
For node: System.out.println("Libraries equal: " + lib.toString().equals(lib2.toString())) expected fqn: void with type: Type83 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type83 got: void
For node: System expected fqn: java.lang.System with type: Type79 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type80 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type83 got: void
For node: "Libraries equal: " + lib.toString().equals(lib2.toString()) expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: "Libraries equal: " expected fqn: java.lang.String with type: Type38 got: java.lang.String
For node: lib.toString().equals(lib2.toString()) expected fqn: boolean with type: Type89 got: java.lang.String
For node: lib.toString() expected fqn: java.lang.String with type: Type87 got: java.lang.String
Did not find solution for node: lib with type Type2
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type87 got: java.lang.String
Cannot find matching typeVariable for: equals
For node: equals expected fqn: boolean with type: Type89 got: java.lang.String
For node: lib2.toString() expected fqn: java.lang.String with type: Type88 got: java.lang.String
Did not find solution for node: lib2 with type Type2
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type88 got: java.lang.String
{Checked=187, Analyzed=128, Unsolved=59, Incorrect=16, Correct=112}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=SimpleName: {Checked=21, Analyzed=0, Unsolved=21, Incorrect=0, Correct=0}
=SimpleType: {Checked=10, Analyzed=0, Unsolved=10, Incorrect=0, Correct=0}
=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
boolean=SimpleName: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=SimpleName: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
com.thoughtworks.xstream.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=FieldAccess: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=InfixExpression: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MarkerAnnotation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MethodInvocation: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
java=ParameterizedType: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=4, Correct=0}
java=SimpleName: {Checked=57, Analyzed=50, Unsolved=7, Incorrect=4, Correct=46}
java=SimpleType: {Checked=14, Analyzed=14, Unsolved=0, Incorrect=4, Correct=10}
java=SingleVariableDeclaration: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
java=VariableDeclarationFragment: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=0, Correct=4}
void=MethodInvocation: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
Total stats
{Checked=187, Analyzed=128, Unsolved=59, Incorrect=16, Correct=112}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=SimpleName: {Checked=21, Analyzed=0, Unsolved=21, Incorrect=0, Correct=0}
=SimpleType: {Checked=10, Analyzed=0, Unsolved=10, Incorrect=0, Correct=0}
=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
boolean=SimpleName: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=SimpleName: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
com.thoughtworks.xstream.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=FieldAccess: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=InfixExpression: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MarkerAnnotation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MethodInvocation: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
java=ParameterizedType: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=4, Correct=0}
java=SimpleName: {Checked=57, Analyzed=50, Unsolved=7, Incorrect=4, Correct=46}
java=SimpleType: {Checked=14, Analyzed=14, Unsolved=0, Incorrect=4, Correct=10}
java=SingleVariableDeclaration: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
java=VariableDeclarationFragment: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=0, Correct=4}
void=MethodInvocation: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
,CastExpression,0,1,0,0,1
,ClassInstanceCreation,0,2,0,0,2
,SimpleName,0,21,0,0,21
,SimpleType,0,10,0,0,10
,SingleVariableDeclaration,0,1,0,0,1
,ThisExpression,0,3,0,0,3
,VariableDeclarationFragment,0,2,0,0,2
boolean,MethodInvocation,1,2,0,1,1
boolean,SimpleName,1,2,0,1,1
com.thoughtworks.xstream.,ClassInstanceCreation,2,2,2,0,0
com.thoughtworks.xstream.,SimpleName,6,6,6,0,0
com.thoughtworks.xstream.,SimpleType,3,3,3,0,0
com.thoughtworks.xstream.,VariableDeclarationFragment,1,1,1,0,0
int,MethodInvocation,1,1,0,1,0
int,SimpleName,1,1,0,1,0
java,ArrayType,1,1,1,0,0
java,Assignment,2,3,2,0,1
java,ClassInstanceCreation,1,2,1,0,1
java,FieldAccess,2,3,2,0,1
java,InfixExpression,3,3,3,0,0
java,MarkerAnnotation,2,2,2,0,0
java,MethodInvocation,9,9,9,0,0
java,ParameterizedType,0,4,0,0,4
java,QualifiedName,4,4,0,4,0
java,SimpleName,50,57,46,4,7
java,SimpleType,14,14,10,4,0
java,SingleVariableDeclaration,3,4,3,0,1
java,StringLiteral,8,8,8,0,0
java,VariableDeclarationFragment,4,6,4,0,2
void,MethodInvocation,4,4,4,0,0
void,PrimitiveType,1,1,1,0,0
void,SimpleName,4,4,4,0,0
