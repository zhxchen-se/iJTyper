echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_26.java
Expect check=123
Cannot find matching typeVariable for: public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: xstream_class_26
Cannot find matching typeVariable for: public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import com.thoughtworks.xstream.converters.SingleValueConverter;
public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: public class IntegerListConverter implements SingleValueConverter {
  @Override public boolean canConvert(  Class clazz){
    return List.class.isAssignableFrom(clazz);
  }
  @Override public Object fromString(  String arg0){
    Collection<Integer> collection=new ArrayList<Integer>();
    String[] integerStrings=arg0.split(" ");
    for (int i=0; i < integerStrings.length; i++) {
      collection.add(Integer.valueOf(integerStrings[i]));
    }
    return collection;
  }
  @Override public String toString(  Object arg0){
    List collection=(List)arg0;
    StringBuffer sb=new StringBuffer();
    boolean first=true;
    for (    Object object : collection) {
      if (first) {
        first=false;
      }
 else {
        sb.append(' ');
      }
      sb.append(object.toString());
    }
    return sb.toString();
  }
}

Cannot find matching typeVariable for: IntegerListConverter
Cannot find matching typeVariable for: public class IntegerListConverter implements SingleValueConverter {
  @Override public boolean canConvert(  Class clazz){
    return List.class.isAssignableFrom(clazz);
  }
  @Override public Object fromString(  String arg0){
    Collection<Integer> collection=new ArrayList<Integer>();
    String[] integerStrings=arg0.split(" ");
    for (int i=0; i < integerStrings.length; i++) {
      collection.add(Integer.valueOf(integerStrings[i]));
    }
    return collection;
  }
  @Override public String toString(  Object arg0){
    List collection=(List)arg0;
    StringBuffer sb=new StringBuffer();
    boolean first=true;
    for (    Object object : collection) {
      if (first) {
        first=false;
      }
 else {
        sb.append(' ');
      }
      sb.append(object.toString());
    }
    return sb.toString();
  }
}

Cannot find matching typeVariable for: public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import com.thoughtworks.xstream.converters.SingleValueConverter;
public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

For node: SingleValueConverter expected fqn: com.thoughtworks.xstream.converters.SingleValueConverter with type: Type3 got: com.thoughtworks.xstream.converters.SingleValueConverter
For node: SingleValueConverter expected fqn: com.thoughtworks.xstream.converters.SingleValueConverter with type: Type3 got: com.thoughtworks.xstream.converters.SingleValueConverter
For node: @Override expected fqn: java.lang.Override with type: Type7 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type7 got: java.lang.Override
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: canConvert
Cannot find matching typeVariable for: @Override public boolean canConvert(Class clazz){
  return List.class.isAssignableFrom(clazz);
}

Cannot find matching typeVariable for: public class IntegerListConverter implements SingleValueConverter {
  @Override public boolean canConvert(  Class clazz){
    return List.class.isAssignableFrom(clazz);
  }
  @Override public Object fromString(  String arg0){
    Collection<Integer> collection=new ArrayList<Integer>();
    String[] integerStrings=arg0.split(" ");
    for (int i=0; i < integerStrings.length; i++) {
      collection.add(Integer.valueOf(integerStrings[i]));
    }
    return collection;
  }
  @Override public String toString(  Object arg0){
    List collection=(List)arg0;
    StringBuffer sb=new StringBuffer();
    boolean first=true;
    for (    Object object : collection) {
      if (first) {
        first=false;
      }
 else {
        sb.append(' ');
      }
      sb.append(object.toString());
    }
    return sb.toString();
  }
}

Cannot find matching typeVariable for: public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import com.thoughtworks.xstream.converters.SingleValueConverter;
public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: Class clazz
For node: Class clazz expected fqn: java.lang.Class with type: Type8 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type8 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type8 got: java.lang.Class
For node: clazz expected fqn: java.lang.Class with type: Type8 got: java.lang.Class
For node: List.class.isAssignableFrom(clazz) expected fqn: boolean with type: Type11 got: boolean
For node: List.class expected fqn: java.lang.Class<java.util.List> with type: Type10 got: java.lang.Class
For node: List expected fqn: java.util.List with type: Type9 got: java.util.List
For node: List expected fqn: java.util.List with type: Type9 got: java.util.List
Cannot find matching typeVariable for: isAssignableFrom
For node: isAssignableFrom expected fqn: boolean with type: Type11 got: boolean
For node: clazz expected fqn: java.lang.Class with type: Type8 got: java.lang.Class
For node: @Override expected fqn: java.lang.Override with type: Type7 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type7 got: java.lang.Override
For node: Object expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
Cannot find matching typeVariable for: fromString
Cannot find matching typeVariable for: @Override public Object fromString(String arg0){
  Collection<Integer> collection=new ArrayList<Integer>();
  String[] integerStrings=arg0.split(" ");
  for (int i=0; i < integerStrings.length; i++) {
    collection.add(Integer.valueOf(integerStrings[i]));
  }
  return collection;
}

Cannot find matching typeVariable for: public class IntegerListConverter implements SingleValueConverter {
  @Override public boolean canConvert(  Class clazz){
    return List.class.isAssignableFrom(clazz);
  }
  @Override public Object fromString(  String arg0){
    Collection<Integer> collection=new ArrayList<Integer>();
    String[] integerStrings=arg0.split(" ");
    for (int i=0; i < integerStrings.length; i++) {
      collection.add(Integer.valueOf(integerStrings[i]));
    }
    return collection;
  }
  @Override public String toString(  Object arg0){
    List collection=(List)arg0;
    StringBuffer sb=new StringBuffer();
    boolean first=true;
    for (    Object object : collection) {
      if (first) {
        first=false;
      }
 else {
        sb.append(' ');
      }
      sb.append(object.toString());
    }
    return sb.toString();
  }
}

Cannot find matching typeVariable for: public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import com.thoughtworks.xstream.converters.SingleValueConverter;
public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: String arg0
For node: String arg0 expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: arg0 expected fqn: java.lang.String with type: Type5 got: java.lang.String
Did not find solution for node: Collection<Integer> with type Type16=Type14<Type15>
For node: Collection expected fqn: java.util.Collection<java.lang.Integer> with type: Type14 got: java.util.Collection
For node: Collection expected fqn: java.util.Collection<java.lang.Integer> with type: Type14 got: java.util.Collection
For node: Integer expected fqn: java.lang.Integer with type: Type15 got: java.lang.Integer
For node: Integer expected fqn: java.lang.Integer with type: Type15 got: java.lang.Integer
Cannot find matching typeVariable for: collection=new ArrayList<Integer>()
Did not find solution for node: collection=new ArrayList<Integer>() with type Type16=Type14<Type15>
Did not find solution for node: collection with type Type16=Type14<Type15>
Did not find solution for node: new ArrayList<Integer>() with type Type18=Type17<Type15>
Did not find solution for node: ArrayList<Integer> with type Type18=Type17<Type15>
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.Integer> with type: Type17 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.Integer> with type: Type17 got: java.util.ArrayList
For node: Integer expected fqn: java.lang.Integer with type: Type15 got: java.lang.Integer
For node: Integer expected fqn: java.lang.Integer with type: Type15 got: java.lang.Integer
For node: String[] expected fqn: java.lang.String[] with type: Type23 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: integerStrings=arg0.split(" ")
For node: integerStrings=arg0.split(" ") expected fqn: java.lang.String[] with type: Type23 got: java.lang.String[]
For node: integerStrings expected fqn: java.lang.String[] with type: Type23 got: java.lang.String[]
For node: arg0.split(" ") expected fqn: java.lang.String[] with type: Type25 got: java.lang.String[]
For node: arg0 expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: split
For node: split expected fqn: java.lang.String[] with type: Type25 got: java.lang.String[]
For node: " " expected fqn: java.lang.String with type: Type24 got: java.lang.String
Cannot find matching typeVariable for: int i=0
Did not find solution for node: int i=0 with type Type28
Did not find solution for node: int with type Type28
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type28
Did not find solution for node: i with type Type28
For node: 0 expected fqn: int with type: Type29 got: byte
For node: i < integerStrings.length expected fqn: boolean with type: Type4 got: boolean
Did not find solution for node: i with type Type28
Cannot find matching typeVariable for: integerStrings.length
For node: integerStrings.length expected fqn: int with type: Type4 got: boolean
For node: integerStrings expected fqn: java.lang.String[] with type: Type23 got: java.lang.String[]
For node: length expected fqn: int with type: Type30 got: int
Did not find solution for node: i++ with type Type28
Did not find solution for node: i with type Type28
Did not find solution for node: collection.add(Integer.valueOf(integerStrings[i])) with type Type35
Did not find solution for node: collection with type Type16=Type14<Type15>
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type35
For node: Integer.valueOf(integerStrings[i]) expected fqn: java.lang.Integer with type: Type32 got: java.lang.Integer
For node: Integer expected fqn: java.lang.Integer with type: Type15 got: java.lang.Integer
Cannot find matching typeVariable for: valueOf
For node: valueOf expected fqn: java.lang.Integer with type: Type32 got: java.lang.Integer
For node: integerStrings[i] expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: integerStrings expected fqn: java.lang.String[] with type: Type23 got: java.lang.String[]
Cannot find matching typeVariable for: i
For node: i expected fqn: int with type: Type5 got: java.lang.String
Did not find solution for node: collection with type Type16=Type14<Type15>
For node: @Override expected fqn: java.lang.Override with type: Type7 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type7 got: java.lang.Override
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: toString
Cannot find matching typeVariable for: @Override public String toString(Object arg0){
  List collection=(List)arg0;
  StringBuffer sb=new StringBuffer();
  boolean first=true;
  for (  Object object : collection) {
    if (first) {
      first=false;
    }
 else {
      sb.append(' ');
    }
    sb.append(object.toString());
  }
  return sb.toString();
}

Cannot find matching typeVariable for: public class IntegerListConverter implements SingleValueConverter {
  @Override public boolean canConvert(  Class clazz){
    return List.class.isAssignableFrom(clazz);
  }
  @Override public Object fromString(  String arg0){
    Collection<Integer> collection=new ArrayList<Integer>();
    String[] integerStrings=arg0.split(" ");
    for (int i=0; i < integerStrings.length; i++) {
      collection.add(Integer.valueOf(integerStrings[i]));
    }
    return collection;
  }
  @Override public String toString(  Object arg0){
    List collection=(List)arg0;
    StringBuffer sb=new StringBuffer();
    boolean first=true;
    for (    Object object : collection) {
      if (first) {
        first=false;
      }
 else {
        sb.append(' ');
      }
      sb.append(object.toString());
    }
    return sb.toString();
  }
}

Cannot find matching typeVariable for: public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import com.thoughtworks.xstream.converters.SingleValueConverter;
public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: Object arg0
For node: Object arg0 expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
For node: arg0 expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
For node: List expected fqn: java.util.List with type: Type9 got: java.util.List
For node: List expected fqn: java.util.List with type: Type9 got: java.util.List
Cannot find matching typeVariable for: collection=(List)arg0
For node: collection=(List)arg0 expected fqn: java.util.List with type: Type9 got: java.util.List
For node: collection expected fqn: java.util.List with type: Type9 got: java.util.List
For node: (List)arg0 expected fqn: java.util.List with type: Type9 got: java.util.List
For node: List expected fqn: java.util.List with type: Type9 got: java.util.List
For node: List expected fqn: java.util.List with type: Type9 got: java.util.List
For node: arg0 expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
For node: StringBuffer expected fqn: java.lang.StringBuffer with type: Type41 got: java.lang.StringBuffer
For node: StringBuffer expected fqn: java.lang.StringBuffer with type: Type41 got: java.lang.StringBuffer
Cannot find matching typeVariable for: sb=new StringBuffer()
For node: sb=new StringBuffer() expected fqn: java.lang.StringBuffer with type: Type41 got: java.lang.StringBuffer
For node: sb expected fqn: java.lang.StringBuffer with type: Type41 got: java.lang.StringBuffer
For node: new StringBuffer() expected fqn: java.lang.StringBuffer with type: Type41 got: java.lang.StringBuffer
For node: StringBuffer expected fqn: java.lang.StringBuffer with type: Type41 got: java.lang.StringBuffer
For node: StringBuffer expected fqn: java.lang.StringBuffer with type: Type41 got: java.lang.StringBuffer
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: first=true
For node: first=true expected fqn: boolean with type: Type4 got: boolean
For node: first expected fqn: boolean with type: Type4 got: boolean
For node: true expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: Object object
For node: Object object expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
For node: object expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
Cannot find matching typeVariable for: collection
Cannot find matching typeVariable for: for (Object object : collection) {
  if (first) {
    first=false;
  }
 else {
    sb.append(' ');
  }
  sb.append(object.toString());
}

Cannot find matching typeVariable for: {
  List collection=(List)arg0;
  StringBuffer sb=new StringBuffer();
  boolean first=true;
  for (  Object object : collection) {
    if (first) {
      first=false;
    }
 else {
      sb.append(' ');
    }
    sb.append(object.toString());
  }
  return sb.toString();
}

Cannot find matching typeVariable for: @Override public String toString(Object arg0){
  List collection=(List)arg0;
  StringBuffer sb=new StringBuffer();
  boolean first=true;
  for (  Object object : collection) {
    if (first) {
      first=false;
    }
 else {
      sb.append(' ');
    }
    sb.append(object.toString());
  }
  return sb.toString();
}

Cannot find matching typeVariable for: public class IntegerListConverter implements SingleValueConverter {
  @Override public boolean canConvert(  Class clazz){
    return List.class.isAssignableFrom(clazz);
  }
  @Override public Object fromString(  String arg0){
    Collection<Integer> collection=new ArrayList<Integer>();
    String[] integerStrings=arg0.split(" ");
    for (int i=0; i < integerStrings.length; i++) {
      collection.add(Integer.valueOf(integerStrings[i]));
    }
    return collection;
  }
  @Override public String toString(  Object arg0){
    List collection=(List)arg0;
    StringBuffer sb=new StringBuffer();
    boolean first=true;
    for (    Object object : collection) {
      if (first) {
        first=false;
      }
 else {
        sb.append(' ');
      }
      sb.append(object.toString());
    }
    return sb.toString();
  }
}

Cannot find matching typeVariable for: public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import com.thoughtworks.xstream.converters.SingleValueConverter;
public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: first
Cannot find matching typeVariable for: if (first) {
  first=false;
}
 else {
  sb.append(' ');
}

Cannot find matching typeVariable for: {
  if (first) {
    first=false;
  }
 else {
    sb.append(' ');
  }
  sb.append(object.toString());
}

Cannot find matching typeVariable for: for (Object object : collection) {
  if (first) {
    first=false;
  }
 else {
    sb.append(' ');
  }
  sb.append(object.toString());
}

Cannot find matching typeVariable for: {
  List collection=(List)arg0;
  StringBuffer sb=new StringBuffer();
  boolean first=true;
  for (  Object object : collection) {
    if (first) {
      first=false;
    }
 else {
      sb.append(' ');
    }
    sb.append(object.toString());
  }
  return sb.toString();
}

Cannot find matching typeVariable for: @Override public String toString(Object arg0){
  List collection=(List)arg0;
  StringBuffer sb=new StringBuffer();
  boolean first=true;
  for (  Object object : collection) {
    if (first) {
      first=false;
    }
 else {
      sb.append(' ');
    }
    sb.append(object.toString());
  }
  return sb.toString();
}

Cannot find matching typeVariable for: public class IntegerListConverter implements SingleValueConverter {
  @Override public boolean canConvert(  Class clazz){
    return List.class.isAssignableFrom(clazz);
  }
  @Override public Object fromString(  String arg0){
    Collection<Integer> collection=new ArrayList<Integer>();
    String[] integerStrings=arg0.split(" ");
    for (int i=0; i < integerStrings.length; i++) {
      collection.add(Integer.valueOf(integerStrings[i]));
    }
    return collection;
  }
  @Override public String toString(  Object arg0){
    List collection=(List)arg0;
    StringBuffer sb=new StringBuffer();
    boolean first=true;
    for (    Object object : collection) {
      if (first) {
        first=false;
      }
 else {
        sb.append(' ');
      }
      sb.append(object.toString());
    }
    return sb.toString();
  }
}

Cannot find matching typeVariable for: public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import com.thoughtworks.xstream.converters.SingleValueConverter;
public class xstream_class_26 {
public class IntegerListConverter implements SingleValueConverter {
    @Override public boolean canConvert(    Class clazz){
      return List.class.isAssignableFrom(clazz);
    }
    @Override public Object fromString(    String arg0){
      Collection<Integer> collection=new ArrayList<Integer>();
      String[] integerStrings=arg0.split(" ");
      for (int i=0; i < integerStrings.length; i++) {
        collection.add(Integer.valueOf(integerStrings[i]));
      }
      return collection;
    }
    @Override public String toString(    Object arg0){
      List collection=(List)arg0;
      StringBuffer sb=new StringBuffer();
      boolean first=true;
      for (      Object object : collection) {
        if (first) {
          first=false;
        }
 else {
          sb.append(' ');
        }
        sb.append(object.toString());
      }
      return sb.toString();
    }
  }
}

For node: first=false expected fqn: boolean with type: Type4 got: boolean
For node: first expected fqn: boolean with type: Type4 got: boolean
For node: false expected fqn: boolean with type: Type4 got: boolean
For node: sb.append(' ') expected fqn: java.lang.StringBuffer with type: Type44 got: java.lang.StringBuffer
For node: sb expected fqn: java.lang.StringBuffer with type: Type41 got: java.lang.StringBuffer
Cannot find matching typeVariable for: append
For node: append expected fqn: java.lang.StringBuffer with type: Type44 got: java.lang.StringBuffer
For node: ' ' expected fqn: char with type: Type43 got: char
For node: sb.append(object.toString()) expected fqn: java.lang.StringBuffer with type: Type48 got: java.lang.StringBuffer
For node: sb expected fqn: java.lang.StringBuffer with type: Type41 got: java.lang.StringBuffer
Cannot find matching typeVariable for: append
For node: append expected fqn: java.lang.StringBuffer with type: Type48 got: java.lang.StringBuffer
For node: object.toString() expected fqn: java.lang.String with type: Type47 got: java.lang.String
For node: object expected fqn: java.lang.Object with type: Type6 got: java.lang.Object
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type47 got: java.lang.String
For node: sb.toString() expected fqn: java.lang.String with type: Type51 got: java.lang.String
For node: sb expected fqn: java.lang.StringBuffer with type: Type41 got: java.lang.StringBuffer
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type51 got: java.lang.String
{Checked=114, Analyzed=98, Unsolved=16, Incorrect=8, Correct=90}
boolean=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=BooleanLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=SimpleName: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
boolean=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
char=CharacterLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=PostfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=5, Analyzed=2, Unsolved=3, Incorrect=1, Correct=1}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ArrayAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=ParameterizedType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=SimpleName: {Checked=45, Analyzed=42, Unsolved=3, Incorrect=2, Correct=40}
java=SimpleType: {Checked=16, Analyzed=16, Unsolved=0, Incorrect=2, Correct=14}
java=SingleVariableDeclaration: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=TypeLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=VariableDeclarationFragment: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
Total stats
{Checked=114, Analyzed=98, Unsolved=16, Incorrect=8, Correct=90}
boolean=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=BooleanLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=SimpleName: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
boolean=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
char=CharacterLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=PostfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=5, Analyzed=2, Unsolved=3, Incorrect=1, Correct=1}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ArrayAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=ParameterizedType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=SimpleName: {Checked=45, Analyzed=42, Unsolved=3, Incorrect=2, Correct=40}
java=SimpleType: {Checked=16, Analyzed=16, Unsolved=0, Incorrect=2, Correct=14}
java=SingleVariableDeclaration: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=TypeLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=VariableDeclarationFragment: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
boolean,Assignment,1,1,1,0,0
boolean,BooleanLiteral,2,2,2,0,0
boolean,InfixExpression,1,1,1,0,0
boolean,MethodInvocation,1,2,1,0,1
boolean,PrimitiveType,2,2,2,0,0
boolean,SimpleName,3,4,3,0,1
boolean,VariableDeclarationFragment,1,1,1,0,0
char,CharacterLiteral,1,1,1,0,0
com.thoughtworks.xstream.,SimpleName,1,1,1,0,0
com.thoughtworks.xstream.,SimpleType,1,1,1,0,0
int,NumberLiteral,1,1,0,1,0
int,PostfixExpression,0,1,0,0,1
int,PrimitiveType,0,1,0,0,1
int,QualifiedName,1,1,0,1,0
int,SimpleName,2,5,1,1,3
int,VariableDeclarationExpression,0,1,0,0,1
int,VariableDeclarationFragment,0,1,0,0,1
java,ArrayAccess,1,1,1,0,0
java,ArrayType,1,1,1,0,0
java,CastExpression,1,1,1,0,0
java,ClassInstanceCreation,1,2,1,0,1
java,MarkerAnnotation,3,3,3,0,0
java,MethodInvocation,6,6,6,0,0
java,ParameterizedType,0,2,0,0,2
java,SimpleName,42,45,40,2,3
java,SimpleType,16,16,14,2,0
java,SingleVariableDeclaration,4,4,4,0,0
java,StringLiteral,1,1,1,0,0
java,TypeLiteral,1,1,0,1,0
java,VariableDeclarationFragment,3,4,3,0,1
