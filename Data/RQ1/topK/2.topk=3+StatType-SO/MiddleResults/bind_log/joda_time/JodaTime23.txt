echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/JodaTime23.java
Expect check=37
Cannot find matching typeVariable for: public class JodaTime23 {
  LocalDate getNearestDayOfWeek(  LocalDate ld,  String day){
    LocalDate target=ld.dayOfWeek().setCopy(day);
    if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
      target=target.plusWeeks(1);
    }
    return target;
  }
}

Cannot find matching typeVariable for: JodaTime23
Cannot find matching typeVariable for: public class JodaTime23 {
  LocalDate getNearestDayOfWeek(  LocalDate ld,  String day){
    LocalDate target=ld.dayOfWeek().setCopy(day);
    if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
      target=target.plusWeeks(1);
    }
    return target;
  }
}

Cannot find matching typeVariable for: package jodatime;
import org.joda.time.DateTimeConstants;
import org.joda.time.LocalDate;
public class JodaTime23 {
  LocalDate getNearestDayOfWeek(  LocalDate ld,  String day){
    LocalDate target=ld.dayOfWeek().setCopy(day);
    if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
      target=target.plusWeeks(1);
    }
    return target;
  }
}

For node: LocalDate expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
For node: LocalDate expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
Cannot find matching typeVariable for: getNearestDayOfWeek
Cannot find matching typeVariable for: LocalDate getNearestDayOfWeek(LocalDate ld,String day){
  LocalDate target=ld.dayOfWeek().setCopy(day);
  if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
    target=target.plusWeeks(1);
  }
  return target;
}

Cannot find matching typeVariable for: public class JodaTime23 {
  LocalDate getNearestDayOfWeek(  LocalDate ld,  String day){
    LocalDate target=ld.dayOfWeek().setCopy(day);
    if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
      target=target.plusWeeks(1);
    }
    return target;
  }
}

Cannot find matching typeVariable for: package jodatime;
import org.joda.time.DateTimeConstants;
import org.joda.time.LocalDate;
public class JodaTime23 {
  LocalDate getNearestDayOfWeek(  LocalDate ld,  String day){
    LocalDate target=ld.dayOfWeek().setCopy(day);
    if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
      target=target.plusWeeks(1);
    }
    return target;
  }
}

Cannot find matching typeVariable for: LocalDate ld
For node: LocalDate ld expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
For node: LocalDate expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
For node: LocalDate expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
For node: ld expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
Cannot find matching typeVariable for: String day
For node: String day expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: day expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: LocalDate expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
For node: LocalDate expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
Cannot find matching typeVariable for: target=ld.dayOfWeek().setCopy(day)
For node: target=ld.dayOfWeek().setCopy(day) expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
For node: target expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
For node: ld.dayOfWeek().setCopy(day) expected fqn: org.joda.time.LocalDate with type: Type6 got: org.joda.time.LocalDate
For node: ld.dayOfWeek() expected fqn: org.joda.time.LocalDate.Property with type: Type4 got: org.joda.time.LocalDate$Property
For node: ld expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
Cannot find matching typeVariable for: dayOfWeek
For node: dayOfWeek expected fqn: org.joda.time.LocalDate.Property with type: Type4 got: org.joda.time.LocalDate$Property
Cannot find matching typeVariable for: setCopy
For node: setCopy expected fqn: org.joda.time.LocalDate with type: Type6 got: org.joda.time.LocalDate
For node: day expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: ld.getDayOfWeek() > DateTimeConstants.SATURDAY expected fqn: boolean with type: Type13 got: boolean
For node: ld.getDayOfWeek() expected fqn: int with type: Type9 got: int
For node: ld expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
Cannot find matching typeVariable for: getDayOfWeek
For node: getDayOfWeek expected fqn: int with type: Type9 got: int
Cannot find matching typeVariable for: DateTimeConstants.SATURDAY
For node: DateTimeConstants.SATURDAY expected fqn: int with type: Type13 got: boolean
For node: DateTimeConstants expected fqn: org.joda.time.DateTimeConstants with type: Type11 got: org.joda.time.DateTimeConstants
For node: SATURDAY expected fqn: int with type: Type12 got: int
For node: target=target.plusWeeks(1) expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
For node: target expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
For node: target.plusWeeks(1) expected fqn: org.joda.time.LocalDate with type: Type15 got: org.joda.time.LocalDate
For node: target expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
Cannot find matching typeVariable for: plusWeeks
For node: plusWeeks expected fqn: org.joda.time.LocalDate with type: Type15 got: org.joda.time.LocalDate
For node: 1 expected fqn: int with type: Type14 got: byte
For node: target expected fqn: org.joda.time.LocalDate with type: Type2 got: org.joda.time.LocalDate
{Checked=34, Analyzed=34, Unsolved=0, Incorrect=4, Correct=30}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=SimpleType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=1, Correct=2}
org.joda.time.=SimpleName: {Checked=14, Analyzed=14, Unsolved=0, Incorrect=1, Correct=13}
org.joda.time.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
org.joda.time.=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=34, Analyzed=34, Unsolved=0, Incorrect=4, Correct=30}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=SimpleType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=1, Correct=2}
org.joda.time.=SimpleName: {Checked=14, Analyzed=14, Unsolved=0, Incorrect=1, Correct=13}
org.joda.time.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
org.joda.time.=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean,InfixExpression,1,1,1,0,0
int,MethodInvocation,1,1,1,0,0
int,NumberLiteral,1,1,0,1,0
int,QualifiedName,1,1,0,1,0
int,SimpleName,2,2,2,0,0
java,SimpleName,3,3,3,0,0
java,SimpleType,1,1,1,0,0
java,SingleVariableDeclaration,1,1,1,0,0
org.joda.time.,Assignment,1,1,1,0,0
org.joda.time.,MethodInvocation,3,3,2,1,0
org.joda.time.,SimpleName,14,14,13,1,0
org.joda.time.,SimpleType,3,3,3,0,0
org.joda.time.,SingleVariableDeclaration,1,1,1,0,0
org.joda.time.,VariableDeclarationFragment,1,1,1,0,0
