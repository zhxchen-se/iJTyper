echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/JodaTime45.java
Expect check=71
Cannot find matching typeVariable for: public class JodaTime45 {
public class FastDateTimeZoneProvider implements Provider {
    public final Set<String> AVAILABLE_IDS=new HashSet<String>();
    public DateTimeZone getZone(    String id){
      if (id == null) {
        return DateTimeZone.UTC;
      }
      TimeZone tz=TimeZone.getTimeZone(id);
      if (tz == null) {
        return DateTimeZone.UTC;
      }
      int rawOffset=tz.getRawOffset();
      if (tz.inDaylightTime(new Date())) {
        rawOffset+=tz.getDSTSavings();
      }
      return DateTimeZone.forOffsetMillis(rawOffset);
    }
    public Set getAvailableIDs(){
      return AVAILABLE_IDS;
    }
  }
}

Cannot find matching typeVariable for: JodaTime45
Cannot find matching typeVariable for: public class JodaTime45 {
public class FastDateTimeZoneProvider implements Provider {
    public final Set<String> AVAILABLE_IDS=new HashSet<String>();
    public DateTimeZone getZone(    String id){
      if (id == null) {
        return DateTimeZone.UTC;
      }
      TimeZone tz=TimeZone.getTimeZone(id);
      if (tz == null) {
        return DateTimeZone.UTC;
      }
      int rawOffset=tz.getRawOffset();
      if (tz.inDaylightTime(new Date())) {
        rawOffset+=tz.getDSTSavings();
      }
      return DateTimeZone.forOffsetMillis(rawOffset);
    }
    public Set getAvailableIDs(){
      return AVAILABLE_IDS;
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.TimeZone;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.Provider;
public class JodaTime45 {
public class FastDateTimeZoneProvider implements Provider {
    public final Set<String> AVAILABLE_IDS=new HashSet<String>();
    public DateTimeZone getZone(    String id){
      if (id == null) {
        return DateTimeZone.UTC;
      }
      TimeZone tz=TimeZone.getTimeZone(id);
      if (tz == null) {
        return DateTimeZone.UTC;
      }
      int rawOffset=tz.getRawOffset();
      if (tz.inDaylightTime(new Date())) {
        rawOffset+=tz.getDSTSavings();
      }
      return DateTimeZone.forOffsetMillis(rawOffset);
    }
    public Set getAvailableIDs(){
      return AVAILABLE_IDS;
    }
  }
}

Cannot find matching typeVariable for: public class FastDateTimeZoneProvider implements Provider {
  public final Set<String> AVAILABLE_IDS=new HashSet<String>();
  public DateTimeZone getZone(  String id){
    if (id == null) {
      return DateTimeZone.UTC;
    }
    TimeZone tz=TimeZone.getTimeZone(id);
    if (tz == null) {
      return DateTimeZone.UTC;
    }
    int rawOffset=tz.getRawOffset();
    if (tz.inDaylightTime(new Date())) {
      rawOffset+=tz.getDSTSavings();
    }
    return DateTimeZone.forOffsetMillis(rawOffset);
  }
  public Set getAvailableIDs(){
    return AVAILABLE_IDS;
  }
}

Did not find solution for node: FastDateTimeZoneProvider with type Type1
For node: Provider expected fqn: org.joda.time.tz.Provider with type: Type2 got: java.security.Provider
For node: Provider expected fqn: org.joda.time.tz.Provider with type: Type2 got: java.security.Provider
Did not find solution for node: Set<String> with type Type7=Type5<Type6>
For node: Set expected fqn: java.util.Set<java.lang.String> with type: Type5 got: java.util.Set
For node: Set expected fqn: java.util.Set<java.lang.String> with type: Type5 got: java.util.Set
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: AVAILABLE_IDS=new HashSet<String>()
Did not find solution for node: AVAILABLE_IDS=new HashSet<String>() with type Type7=Type5<Type6>
Did not find solution for node: AVAILABLE_IDS with type Type7=Type5<Type6>
Did not find solution for node: new HashSet<String>() with type Type9=Type8<Type6>
Did not find solution for node: HashSet<String> with type Type9=Type8<Type6>
For node: HashSet expected fqn: java.util.HashSet<java.lang.String> with type: Type8 got: java.util.HashSet
For node: HashSet expected fqn: java.util.HashSet<java.lang.String> with type: Type8 got: java.util.HashSet
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
Did not find solution for node: DateTimeZone with type Type4
Did not find solution for node: DateTimeZone with type Type4
Cannot find matching typeVariable for: getZone
Cannot find matching typeVariable for: public DateTimeZone getZone(String id){
  if (id == null) {
    return DateTimeZone.UTC;
  }
  TimeZone tz=TimeZone.getTimeZone(id);
  if (tz == null) {
    return DateTimeZone.UTC;
  }
  int rawOffset=tz.getRawOffset();
  if (tz.inDaylightTime(new Date())) {
    rawOffset+=tz.getDSTSavings();
  }
  return DateTimeZone.forOffsetMillis(rawOffset);
}

Cannot find matching typeVariable for: public class FastDateTimeZoneProvider implements Provider {
  public final Set<String> AVAILABLE_IDS=new HashSet<String>();
  public DateTimeZone getZone(  String id){
    if (id == null) {
      return DateTimeZone.UTC;
    }
    TimeZone tz=TimeZone.getTimeZone(id);
    if (tz == null) {
      return DateTimeZone.UTC;
    }
    int rawOffset=tz.getRawOffset();
    if (tz.inDaylightTime(new Date())) {
      rawOffset+=tz.getDSTSavings();
    }
    return DateTimeZone.forOffsetMillis(rawOffset);
  }
  public Set getAvailableIDs(){
    return AVAILABLE_IDS;
  }
}

Cannot find matching typeVariable for: public class JodaTime45 {
public class FastDateTimeZoneProvider implements Provider {
    public final Set<String> AVAILABLE_IDS=new HashSet<String>();
    public DateTimeZone getZone(    String id){
      if (id == null) {
        return DateTimeZone.UTC;
      }
      TimeZone tz=TimeZone.getTimeZone(id);
      if (tz == null) {
        return DateTimeZone.UTC;
      }
      int rawOffset=tz.getRawOffset();
      if (tz.inDaylightTime(new Date())) {
        rawOffset+=tz.getDSTSavings();
      }
      return DateTimeZone.forOffsetMillis(rawOffset);
    }
    public Set getAvailableIDs(){
      return AVAILABLE_IDS;
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.TimeZone;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.Provider;
public class JodaTime45 {
public class FastDateTimeZoneProvider implements Provider {
    public final Set<String> AVAILABLE_IDS=new HashSet<String>();
    public DateTimeZone getZone(    String id){
      if (id == null) {
        return DateTimeZone.UTC;
      }
      TimeZone tz=TimeZone.getTimeZone(id);
      if (tz == null) {
        return DateTimeZone.UTC;
      }
      int rawOffset=tz.getRawOffset();
      if (tz.inDaylightTime(new Date())) {
        rawOffset+=tz.getDSTSavings();
      }
      return DateTimeZone.forOffsetMillis(rawOffset);
    }
    public Set getAvailableIDs(){
      return AVAILABLE_IDS;
    }
  }
}

Cannot find matching typeVariable for: String id
For node: String id expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: id expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: id == null expected fqn: boolean with type: Type15 got: boolean
For node: id expected fqn: java.lang.String with type: Type6 got: java.lang.String
Did not find solution for node: null with type Type14
Cannot find matching typeVariable for: DateTimeZone.UTC
Cannot find matching typeVariable for: return DateTimeZone.UTC;

Cannot find matching typeVariable for: {
  return DateTimeZone.UTC;
}

Cannot find matching typeVariable for: if (id == null) {
  return DateTimeZone.UTC;
}

Cannot find matching typeVariable for: {
  if (id == null) {
    return DateTimeZone.UTC;
  }
  TimeZone tz=TimeZone.getTimeZone(id);
  if (tz == null) {
    return DateTimeZone.UTC;
  }
  int rawOffset=tz.getRawOffset();
  if (tz.inDaylightTime(new Date())) {
    rawOffset+=tz.getDSTSavings();
  }
  return DateTimeZone.forOffsetMillis(rawOffset);
}

Cannot find matching typeVariable for: public DateTimeZone getZone(String id){
  if (id == null) {
    return DateTimeZone.UTC;
  }
  TimeZone tz=TimeZone.getTimeZone(id);
  if (tz == null) {
    return DateTimeZone.UTC;
  }
  int rawOffset=tz.getRawOffset();
  if (tz.inDaylightTime(new Date())) {
    rawOffset+=tz.getDSTSavings();
  }
  return DateTimeZone.forOffsetMillis(rawOffset);
}

Cannot find matching typeVariable for: public class FastDateTimeZoneProvider implements Provider {
  public final Set<String> AVAILABLE_IDS=new HashSet<String>();
  public DateTimeZone getZone(  String id){
    if (id == null) {
      return DateTimeZone.UTC;
    }
    TimeZone tz=TimeZone.getTimeZone(id);
    if (tz == null) {
      return DateTimeZone.UTC;
    }
    int rawOffset=tz.getRawOffset();
    if (tz.inDaylightTime(new Date())) {
      rawOffset+=tz.getDSTSavings();
    }
    return DateTimeZone.forOffsetMillis(rawOffset);
  }
  public Set getAvailableIDs(){
    return AVAILABLE_IDS;
  }
}

Cannot find matching typeVariable for: public class JodaTime45 {
public class FastDateTimeZoneProvider implements Provider {
    public final Set<String> AVAILABLE_IDS=new HashSet<String>();
    public DateTimeZone getZone(    String id){
      if (id == null) {
        return DateTimeZone.UTC;
      }
      TimeZone tz=TimeZone.getTimeZone(id);
      if (tz == null) {
        return DateTimeZone.UTC;
      }
      int rawOffset=tz.getRawOffset();
      if (tz.inDaylightTime(new Date())) {
        rawOffset+=tz.getDSTSavings();
      }
      return DateTimeZone.forOffsetMillis(rawOffset);
    }
    public Set getAvailableIDs(){
      return AVAILABLE_IDS;
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.TimeZone;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.Provider;
public class JodaTime45 {
public class FastDateTimeZoneProvider implements Provider {
    public final Set<String> AVAILABLE_IDS=new HashSet<String>();
    public DateTimeZone getZone(    String id){
      if (id == null) {
        return DateTimeZone.UTC;
      }
      TimeZone tz=TimeZone.getTimeZone(id);
      if (tz == null) {
        return DateTimeZone.UTC;
      }
      int rawOffset=tz.getRawOffset();
      if (tz.inDaylightTime(new Date())) {
        rawOffset+=tz.getDSTSavings();
      }
      return DateTimeZone.forOffsetMillis(rawOffset);
    }
    public Set getAvailableIDs(){
      return AVAILABLE_IDS;
    }
  }
}

Did not find solution for node: DateTimeZone with type Type4
Did not find solution for node: UTC with type Type16
For node: TimeZone expected fqn: java.util.TimeZone with type: Type17 got: java.util.TimeZone
For node: TimeZone expected fqn: java.util.TimeZone with type: Type17 got: java.util.TimeZone
Cannot find matching typeVariable for: tz=TimeZone.getTimeZone(id)
For node: tz=TimeZone.getTimeZone(id) expected fqn: java.util.TimeZone with type: Type17 got: java.util.TimeZone
For node: tz expected fqn: java.util.TimeZone with type: Type17 got: java.util.TimeZone
For node: TimeZone.getTimeZone(id) expected fqn: java.util.TimeZone with type: Type18 got: java.util.TimeZone
For node: TimeZone expected fqn: java.util.TimeZone with type: Type17 got: java.util.TimeZone
Cannot find matching typeVariable for: getTimeZone
For node: getTimeZone expected fqn: java.util.TimeZone with type: Type18 got: java.util.TimeZone
For node: id expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: tz == null expected fqn: boolean with type: Type15 got: boolean
For node: tz expected fqn: java.util.TimeZone with type: Type17 got: java.util.TimeZone
Did not find solution for node: null with type Type21
Cannot find matching typeVariable for: DateTimeZone.UTC
Cannot find matching typeVariable for: return DateTimeZone.UTC;

Cannot find matching typeVariable for: {
  return DateTimeZone.UTC;
}

Cannot find matching typeVariable for: if (tz == null) {
  return DateTimeZone.UTC;
}

Cannot find matching typeVariable for: {
  if (id == null) {
    return DateTimeZone.UTC;
  }
  TimeZone tz=TimeZone.getTimeZone(id);
  if (tz == null) {
    return DateTimeZone.UTC;
  }
  int rawOffset=tz.getRawOffset();
  if (tz.inDaylightTime(new Date())) {
    rawOffset+=tz.getDSTSavings();
  }
  return DateTimeZone.forOffsetMillis(rawOffset);
}

Cannot find matching typeVariable for: public DateTimeZone getZone(String id){
  if (id == null) {
    return DateTimeZone.UTC;
  }
  TimeZone tz=TimeZone.getTimeZone(id);
  if (tz == null) {
    return DateTimeZone.UTC;
  }
  int rawOffset=tz.getRawOffset();
  if (tz.inDaylightTime(new Date())) {
    rawOffset+=tz.getDSTSavings();
  }
  return DateTimeZone.forOffsetMillis(rawOffset);
}

Cannot find matching typeVariable for: public class FastDateTimeZoneProvider implements Provider {
  public final Set<String> AVAILABLE_IDS=new HashSet<String>();
  public DateTimeZone getZone(  String id){
    if (id == null) {
      return DateTimeZone.UTC;
    }
    TimeZone tz=TimeZone.getTimeZone(id);
    if (tz == null) {
      return DateTimeZone.UTC;
    }
    int rawOffset=tz.getRawOffset();
    if (tz.inDaylightTime(new Date())) {
      rawOffset+=tz.getDSTSavings();
    }
    return DateTimeZone.forOffsetMillis(rawOffset);
  }
  public Set getAvailableIDs(){
    return AVAILABLE_IDS;
  }
}

Cannot find matching typeVariable for: public class JodaTime45 {
public class FastDateTimeZoneProvider implements Provider {
    public final Set<String> AVAILABLE_IDS=new HashSet<String>();
    public DateTimeZone getZone(    String id){
      if (id == null) {
        return DateTimeZone.UTC;
      }
      TimeZone tz=TimeZone.getTimeZone(id);
      if (tz == null) {
        return DateTimeZone.UTC;
      }
      int rawOffset=tz.getRawOffset();
      if (tz.inDaylightTime(new Date())) {
        rawOffset+=tz.getDSTSavings();
      }
      return DateTimeZone.forOffsetMillis(rawOffset);
    }
    public Set getAvailableIDs(){
      return AVAILABLE_IDS;
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.TimeZone;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.Provider;
public class JodaTime45 {
public class FastDateTimeZoneProvider implements Provider {
    public final Set<String> AVAILABLE_IDS=new HashSet<String>();
    public DateTimeZone getZone(    String id){
      if (id == null) {
        return DateTimeZone.UTC;
      }
      TimeZone tz=TimeZone.getTimeZone(id);
      if (tz == null) {
        return DateTimeZone.UTC;
      }
      int rawOffset=tz.getRawOffset();
      if (tz.inDaylightTime(new Date())) {
        rawOffset+=tz.getDSTSavings();
      }
      return DateTimeZone.forOffsetMillis(rawOffset);
    }
    public Set getAvailableIDs(){
      return AVAILABLE_IDS;
    }
  }
}

Did not find solution for node: DateTimeZone with type Type4
Did not find solution for node: UTC with type Type16
For node: int expected fqn: int with type: Type22 got: int
Cannot find matching typeVariable for: rawOffset=tz.getRawOffset()
For node: rawOffset=tz.getRawOffset() expected fqn: int with type: Type22 got: int
For node: rawOffset expected fqn: int with type: Type22 got: int
For node: tz.getRawOffset() expected fqn: int with type: Type23 got: int
For node: tz expected fqn: java.util.TimeZone with type: Type17 got: java.util.TimeZone
Cannot find matching typeVariable for: getRawOffset
For node: getRawOffset expected fqn: int with type: Type23 got: int
For node: tz.inDaylightTime(new Date()) expected fqn: boolean with type: Type27 got: boolean
For node: tz expected fqn: java.util.TimeZone with type: Type17 got: java.util.TimeZone
Cannot find matching typeVariable for: inDaylightTime
For node: inDaylightTime expected fqn: boolean with type: Type27 got: boolean
For node: new Date() expected fqn: java.util.Date with type: Type25 got: java.util.Date
For node: Date expected fqn: java.util.Date with type: Type25 got: java.util.Date
For node: Date expected fqn: java.util.Date with type: Type25 got: java.util.Date
For node: rawOffset+=tz.getDSTSavings() expected fqn: int with type: Type22 got: int
For node: rawOffset expected fqn: int with type: Type22 got: int
For node: tz.getDSTSavings() expected fqn: int with type: Type30 got: int
For node: tz expected fqn: java.util.TimeZone with type: Type17 got: java.util.TimeZone
Cannot find matching typeVariable for: getDSTSavings
For node: getDSTSavings expected fqn: int with type: Type30 got: int
Did not find solution for node: DateTimeZone.forOffsetMillis(rawOffset) with type Type32
Did not find solution for node: DateTimeZone with type Type4
Cannot find matching typeVariable for: forOffsetMillis
Did not find solution for node: forOffsetMillis with type Type32
For node: rawOffset expected fqn: int with type: Type22 got: int
For node: Set expected fqn: java.util.Set with type: Type5 got: java.util.Set
For node: Set expected fqn: java.util.Set with type: Type5 got: java.util.Set
Cannot find matching typeVariable for: getAvailableIDs
Cannot find matching typeVariable for: public Set getAvailableIDs(){
  return AVAILABLE_IDS;
}

Cannot find matching typeVariable for: public class FastDateTimeZoneProvider implements Provider {
  public final Set<String> AVAILABLE_IDS=new HashSet<String>();
  public DateTimeZone getZone(  String id){
    if (id == null) {
      return DateTimeZone.UTC;
    }
    TimeZone tz=TimeZone.getTimeZone(id);
    if (tz == null) {
      return DateTimeZone.UTC;
    }
    int rawOffset=tz.getRawOffset();
    if (tz.inDaylightTime(new Date())) {
      rawOffset+=tz.getDSTSavings();
    }
    return DateTimeZone.forOffsetMillis(rawOffset);
  }
  public Set getAvailableIDs(){
    return AVAILABLE_IDS;
  }
}

Cannot find matching typeVariable for: public class JodaTime45 {
public class FastDateTimeZoneProvider implements Provider {
    public final Set<String> AVAILABLE_IDS=new HashSet<String>();
    public DateTimeZone getZone(    String id){
      if (id == null) {
        return DateTimeZone.UTC;
      }
      TimeZone tz=TimeZone.getTimeZone(id);
      if (tz == null) {
        return DateTimeZone.UTC;
      }
      int rawOffset=tz.getRawOffset();
      if (tz.inDaylightTime(new Date())) {
        rawOffset+=tz.getDSTSavings();
      }
      return DateTimeZone.forOffsetMillis(rawOffset);
    }
    public Set getAvailableIDs(){
      return AVAILABLE_IDS;
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.TimeZone;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.Provider;
public class JodaTime45 {
public class FastDateTimeZoneProvider implements Provider {
    public final Set<String> AVAILABLE_IDS=new HashSet<String>();
    public DateTimeZone getZone(    String id){
      if (id == null) {
        return DateTimeZone.UTC;
      }
      TimeZone tz=TimeZone.getTimeZone(id);
      if (tz == null) {
        return DateTimeZone.UTC;
      }
      int rawOffset=tz.getRawOffset();
      if (tz.inDaylightTime(new Date())) {
        rawOffset+=tz.getDSTSavings();
      }
      return DateTimeZone.forOffsetMillis(rawOffset);
    }
    public Set getAvailableIDs(){
      return AVAILABLE_IDS;
    }
  }
}

Did not find solution for node: AVAILABLE_IDS with type Type7=Type5<Type6>
{Checked=64, Analyzed=46, Unsolved=18, Incorrect=6, Correct=40}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=SimpleName: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
int=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ParameterizedType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=SimpleName: {Checked=20, Analyzed=18, Unsolved=2, Incorrect=2, Correct=16}
java=SimpleType: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=2, Correct=6}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.joda.time.=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=SimpleName: {Checked=8, Analyzed=1, Unsolved=7, Incorrect=1, Correct=0}
org.joda.time.=SimpleType: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
Total stats
{Checked=64, Analyzed=46, Unsolved=18, Incorrect=6, Correct=40}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=SimpleName: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
int=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ParameterizedType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=SimpleName: {Checked=20, Analyzed=18, Unsolved=2, Incorrect=2, Correct=16}
java=SimpleType: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=2, Correct=6}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.joda.time.=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=SimpleName: {Checked=8, Analyzed=1, Unsolved=7, Incorrect=1, Correct=0}
org.joda.time.=SimpleType: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
,SimpleName,0,1,0,0,1
boolean,InfixExpression,2,2,2,0,0
boolean,MethodInvocation,1,1,1,0,0
boolean,SimpleName,1,1,1,0,0
int,Assignment,1,1,1,0,0
int,MethodInvocation,2,2,2,0,0
int,PrimitiveType,1,1,1,0,0
int,SimpleName,5,5,5,0,0
int,VariableDeclarationFragment,1,1,1,0,0
java,ClassInstanceCreation,1,2,1,0,1
java,MethodInvocation,1,1,1,0,0
java,ParameterizedType,0,2,0,0,2
java,SimpleName,18,20,16,2,2
java,SimpleType,8,8,6,2,0
java,SingleVariableDeclaration,1,1,1,0,0
java,VariableDeclarationFragment,1,2,1,0,1
null,NullLiteral,0,2,0,0,2
org.joda.time.,MethodInvocation,0,1,0,0,1
org.joda.time.,SimpleName,1,8,0,1,7
org.joda.time.,SimpleType,1,2,0,1,1
