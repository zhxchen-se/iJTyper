echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/hb12.java
Expect check=33
Cannot find matching typeVariable for: public class hb12 {
  public Type getReturnType(  Type columnType,  Mapping mapping) throws QueryException {
    int[] sqlTypes=new int[0];
    if (sqlTypes.length != 1)     throw new QueryException("multi-column type in avg()");
    return columnType;
  }
}

Cannot find matching typeVariable for: hb12
Cannot find matching typeVariable for: public class hb12 {
  public Type getReturnType(  Type columnType,  Mapping mapping) throws QueryException {
    int[] sqlTypes=new int[0];
    if (sqlTypes.length != 1)     throw new QueryException("multi-column type in avg()");
    return columnType;
  }
}

Cannot find matching typeVariable for: package java.hibernate;
import org.hibernate.Hibernate;
import org.hibernate.QueryException;
import org.hibernate.annotations.Type;
import org.hibernate.engine.Mapping;
import java.sql.Types;
public class hb12 {
  public Type getReturnType(  Type columnType,  Mapping mapping) throws QueryException {
    int[] sqlTypes=new int[0];
    if (sqlTypes.length != 1)     throw new QueryException("multi-column type in avg()");
    return columnType;
  }
}

For node: Type expected fqn: org.hibernate.annotations.Type with type: Type2 got: java.lang.reflect.Type
For node: Type expected fqn: org.hibernate.annotations.Type with type: Type2 got: java.lang.reflect.Type
Cannot find matching typeVariable for: getReturnType
Cannot find matching typeVariable for: public Type getReturnType(Type columnType,Mapping mapping) throws QueryException {
  int[] sqlTypes=new int[0];
  if (sqlTypes.length != 1)   throw new QueryException("multi-column type in avg()");
  return columnType;
}

Cannot find matching typeVariable for: public class hb12 {
  public Type getReturnType(  Type columnType,  Mapping mapping) throws QueryException {
    int[] sqlTypes=new int[0];
    if (sqlTypes.length != 1)     throw new QueryException("multi-column type in avg()");
    return columnType;
  }
}

Cannot find matching typeVariable for: package java.hibernate;
import org.hibernate.Hibernate;
import org.hibernate.QueryException;
import org.hibernate.annotations.Type;
import org.hibernate.engine.Mapping;
import java.sql.Types;
public class hb12 {
  public Type getReturnType(  Type columnType,  Mapping mapping) throws QueryException {
    int[] sqlTypes=new int[0];
    if (sqlTypes.length != 1)     throw new QueryException("multi-column type in avg()");
    return columnType;
  }
}

Cannot find matching typeVariable for: Type columnType
For node: Type columnType expected fqn: org.hibernate.annotations.Type with type: Type2 got: java.lang.reflect.Type
For node: Type expected fqn: org.hibernate.annotations.Type with type: Type2 got: java.lang.reflect.Type
For node: Type expected fqn: org.hibernate.annotations.Type with type: Type2 got: java.lang.reflect.Type
For node: columnType expected fqn: org.hibernate.annotations.Type with type: Type2 got: java.lang.reflect.Type
Cannot find matching typeVariable for: Mapping mapping
For node: Mapping mapping expected fqn: org.hibernate.engine.Mapping with type: Type3 got: org.hibernate.engine.Mapping
For node: Mapping expected fqn: org.hibernate.engine.Mapping with type: Type3 got: org.hibernate.engine.Mapping
For node: Mapping expected fqn: org.hibernate.engine.Mapping with type: Type3 got: org.hibernate.engine.Mapping
For node: mapping expected fqn: org.hibernate.engine.Mapping with type: Type3 got: org.hibernate.engine.Mapping
For node: QueryException expected fqn: org.hibernate.QueryException with type: Type4 got: org.hibernate.QueryException
For node: QueryException expected fqn: org.hibernate.QueryException with type: Type4 got: org.hibernate.QueryException
For node: int[] expected fqn: int[] with type: Type6 got: int[]
For node: int expected fqn: int with type: Type5 got: int
Cannot find matching typeVariable for: sqlTypes=new int[0]
For node: sqlTypes=new int[0] expected fqn: int[] with type: Type6 got: int[]
For node: sqlTypes expected fqn: int[] with type: Type6 got: int[]
For node: new int[0] expected fqn: int[] with type: Type6 got: int[]
For node: int[] expected fqn: int[] with type: Type6 got: int[]
For node: int expected fqn: int with type: Type5 got: int
For node: 0 expected fqn: int with type: Type7 got: byte
For node: sqlTypes.length != 1 expected fqn: boolean with type: Type9 got: boolean
Cannot find matching typeVariable for: sqlTypes.length
For node: sqlTypes.length expected fqn: int with type: Type9 got: boolean
For node: sqlTypes expected fqn: int[] with type: Type6 got: int[]
Did not find solution for node: length with type Type8
For node: 1 expected fqn: int with type: Type7 got: byte
For node: new QueryException("multi-column type in avg()") expected fqn: org.hibernate.QueryException with type: Type4 got: org.hibernate.QueryException
For node: QueryException expected fqn: org.hibernate.QueryException with type: Type4 got: org.hibernate.QueryException
For node: QueryException expected fqn: org.hibernate.QueryException with type: Type4 got: org.hibernate.QueryException
For node: "multi-column type in avg()" expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: columnType expected fqn: org.hibernate.annotations.Type with type: Type2 got: java.lang.reflect.Type
{Checked=30, Analyzed=29, Unsolved=1, Incorrect=10, Correct=19}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=ArrayCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=ArrayType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=NumberLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
int=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=SimpleName: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=4, Correct=4}
org.hibernate.=SimpleType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=2, Correct=3}
org.hibernate.=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
Total stats
{Checked=30, Analyzed=29, Unsolved=1, Incorrect=10, Correct=19}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=ArrayCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=ArrayType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=NumberLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
int=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=SimpleName: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=4, Correct=4}
org.hibernate.=SimpleType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=2, Correct=3}
org.hibernate.=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
boolean,InfixExpression,1,1,1,0,0
int,ArrayCreation,1,1,1,0,0
int,ArrayType,2,2,2,0,0
int,NumberLiteral,2,2,0,2,0
int,PrimitiveType,2,2,2,0,0
int,QualifiedName,1,1,0,1,0
int,SimpleName,2,3,2,0,1
int,VariableDeclarationFragment,1,1,1,0,0
java,StringLiteral,1,1,1,0,0
org.hibernate.,ClassInstanceCreation,1,1,1,0,0
org.hibernate.,SimpleName,8,8,4,4,0
org.hibernate.,SimpleType,5,5,3,2,0
org.hibernate.,SingleVariableDeclaration,2,2,1,1,0
