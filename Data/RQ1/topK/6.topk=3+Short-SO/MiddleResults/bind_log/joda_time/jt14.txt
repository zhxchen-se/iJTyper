echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/jt14.java
Expect check=42
Cannot find matching typeVariable for: public class jt14 {
  public static void h1(){
    ZoneId z=ZoneId.of("America/Montreal");
    ZonedDateTime start=ZonedDateTime.of(2017,1,17,14,45,0,0,z);
    ZonedDateTime stop=ZonedDateTime.of(2017,1,17,15,12,0,0,z);
  }
}

Cannot find matching typeVariable for: jt14
Cannot find matching typeVariable for: public class jt14 {
  public static void h1(){
    ZoneId z=ZoneId.of("America/Montreal");
    ZonedDateTime start=ZonedDateTime.of(2017,1,17,14,45,0,0,z);
    ZonedDateTime stop=ZonedDateTime.of(2017,1,17,15,12,0,0,z);
  }
}

Cannot find matching typeVariable for: package java.joda_time;
import org.joda.time.DateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
public class jt14 {
  public static void h1(){
    ZoneId z=ZoneId.of("America/Montreal");
    ZonedDateTime start=ZonedDateTime.of(2017,1,17,14,45,0,0,z);
    ZonedDateTime stop=ZonedDateTime.of(2017,1,17,15,12,0,0,z);
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: h1
Cannot find matching typeVariable for: public static void h1(){
  ZoneId z=ZoneId.of("America/Montreal");
  ZonedDateTime start=ZonedDateTime.of(2017,1,17,14,45,0,0,z);
  ZonedDateTime stop=ZonedDateTime.of(2017,1,17,15,12,0,0,z);
}

Cannot find matching typeVariable for: public class jt14 {
  public static void h1(){
    ZoneId z=ZoneId.of("America/Montreal");
    ZonedDateTime start=ZonedDateTime.of(2017,1,17,14,45,0,0,z);
    ZonedDateTime stop=ZonedDateTime.of(2017,1,17,15,12,0,0,z);
  }
}

Cannot find matching typeVariable for: package java.joda_time;
import org.joda.time.DateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
public class jt14 {
  public static void h1(){
    ZoneId z=ZoneId.of("America/Montreal");
    ZonedDateTime start=ZonedDateTime.of(2017,1,17,14,45,0,0,z);
    ZonedDateTime stop=ZonedDateTime.of(2017,1,17,15,12,0,0,z);
  }
}

Did not find solution for node: ZoneId with type Type3
Did not find solution for node: ZoneId with type Type3
Cannot find matching typeVariable for: z=ZoneId.of("America/Montreal")
Did not find solution for node: z=ZoneId.of("America/Montreal") with type Type3
Did not find solution for node: z with type Type3
Did not find solution for node: ZoneId.of("America/Montreal") with type Type5
Did not find solution for node: ZoneId with type Type3
Cannot find matching typeVariable for: of
Did not find solution for node: of with type Type5
For node: "America/Montreal" expected fqn: java.lang.String with type: Type4 got: java.lang.String
Did not find solution for node: ZonedDateTime with type Type8
Did not find solution for node: ZonedDateTime with type Type8
Cannot find matching typeVariable for: start=ZonedDateTime.of(2017,1,17,14,45,0,0,z)
Did not find solution for node: start=ZonedDateTime.of(2017,1,17,14,45,0,0,z) with type Type8
Did not find solution for node: start with type Type8
Did not find solution for node: ZonedDateTime.of(2017,1,17,14,45,0,0,z) with type Type11
Did not find solution for node: ZonedDateTime with type Type8
Cannot find matching typeVariable for: of
Did not find solution for node: of with type Type11
For node: 2017 expected fqn: int with type: Type9 got: short
For node: 1 expected fqn: int with type: Type10 got: byte
For node: 17 expected fqn: int with type: Type10 got: byte
For node: 14 expected fqn: int with type: Type10 got: byte
For node: 45 expected fqn: int with type: Type10 got: byte
For node: 0 expected fqn: int with type: Type10 got: byte
For node: 0 expected fqn: int with type: Type10 got: byte
Did not find solution for node: z with type Type3
Did not find solution for node: ZonedDateTime with type Type8
Did not find solution for node: ZonedDateTime with type Type8
Cannot find matching typeVariable for: stop=ZonedDateTime.of(2017,1,17,15,12,0,0,z)
Did not find solution for node: stop=ZonedDateTime.of(2017,1,17,15,12,0,0,z) with type Type8
Did not find solution for node: stop with type Type8
Did not find solution for node: ZonedDateTime.of(2017,1,17,15,12,0,0,z) with type Type20
Did not find solution for node: ZonedDateTime with type Type8
Cannot find matching typeVariable for: of
Did not find solution for node: of with type Type20
For node: 2017 expected fqn: int with type: Type9 got: short
For node: 1 expected fqn: int with type: Type10 got: byte
For node: 17 expected fqn: int with type: Type10 got: byte
For node: 15 expected fqn: int with type: Type10 got: byte
For node: 12 expected fqn: int with type: Type10 got: byte
For node: 0 expected fqn: int with type: Type10 got: byte
For node: 0 expected fqn: int with type: Type10 got: byte
Did not find solution for node: z with type Type3
{Checked=39, Analyzed=16, Unsolved=23, Incorrect=14, Correct=2}
int=NumberLiteral: {Checked=14, Analyzed=14, Unsolved=0, Incorrect=14, Correct=0}
java=MethodInvocation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=SimpleName: {Checked=14, Analyzed=0, Unsolved=14, Incorrect=0, Correct=0}
java=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=VariableDeclarationFragment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=39, Analyzed=16, Unsolved=23, Incorrect=14, Correct=2}
int=NumberLiteral: {Checked=14, Analyzed=14, Unsolved=0, Incorrect=14, Correct=0}
java=MethodInvocation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=SimpleName: {Checked=14, Analyzed=0, Unsolved=14, Incorrect=0, Correct=0}
java=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=StringLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=VariableDeclarationFragment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int,NumberLiteral,14,14,0,14,0
java,MethodInvocation,0,3,0,0,3
java,SimpleName,0,14,0,0,14
java,SimpleType,0,3,0,0,3
java,StringLiteral,1,1,1,0,0
java,VariableDeclarationFragment,0,3,0,0,3
void,PrimitiveType,1,1,1,0,0
