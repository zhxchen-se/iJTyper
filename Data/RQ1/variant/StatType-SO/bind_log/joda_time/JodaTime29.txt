echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/JodaTime29.java
Expect check=82
Cannot find matching typeVariable for: public class JodaTime29 {
  private static final int FIELD_COUNT=10;
  public static void main(  String[] args){
  }
  public DateTime parseDateTime(  final String text){
    DateTimeFormatter formatters[]=new DateTimeFormatter[20];
    if (text.isEmpty())     return null;
    int field=0;
    DateTime dateTime=null;
    IllegalArgumentException exception=null;
    for (; field < FIELD_COUNT; ++field) {
      if (null != formatters[field]) {
        try {
          dateTime=formatters[field].parseDateTime(text);
          break;
        }
 catch (        final IllegalArgumentException e) {
          exception=null != exception ? exception : e;
        }
      }
    }
    if (dateTime == null) {
      throw exception;
    }
    return dateTime;
  }
}

Did not find solution for node: JodaTime29 with type Type1
Did not find solution for node: int with type Type4
Cannot find matching typeVariable for: FIELD_COUNT=10
Did not find solution for node: FIELD_COUNT=10 with type Type4
Did not find solution for node: FIELD_COUNT with type Type4
For node: 10 expected fqn: int with type: Type5 got: byte
For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static void main(String[] args){
}

Cannot find matching typeVariable for: public class JodaTime29 {
  private static final int FIELD_COUNT=10;
  public static void main(  String[] args){
  }
  public DateTime parseDateTime(  final String text){
    DateTimeFormatter formatters[]=new DateTimeFormatter[20];
    if (text.isEmpty())     return null;
    int field=0;
    DateTime dateTime=null;
    IllegalArgumentException exception=null;
    for (; field < FIELD_COUNT; ++field) {
      if (null != formatters[field]) {
        try {
          dateTime=formatters[field].parseDateTime(text);
          break;
        }
 catch (        final IllegalArgumentException e) {
          exception=null != exception ? exception : e;
        }
      }
    }
    if (dateTime == null) {
      throw exception;
    }
    return dateTime;
  }
}

Cannot find matching typeVariable for: package jodatime;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormatter;
public class JodaTime29 {
  private static final int FIELD_COUNT=10;
  public static void main(  String[] args){
  }
  public DateTime parseDateTime(  final String text){
    DateTimeFormatter formatters[]=new DateTimeFormatter[20];
    if (text.isEmpty())     return null;
    int field=0;
    DateTime dateTime=null;
    IllegalArgumentException exception=null;
    for (; field < FIELD_COUNT; ++field) {
      if (null != formatters[field]) {
        try {
          dateTime=formatters[field].parseDateTime(text);
          break;
        }
 catch (        final IllegalArgumentException e) {
          exception=null != exception ? exception : e;
        }
      }
    }
    if (dateTime == null) {
      throw exception;
    }
    return dateTime;
  }
}

Cannot find matching typeVariable for: String[] args
For node: String[] args expected fqn: java.lang.String[] with type: Type7 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type7 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: args expected fqn: java.lang.String[] with type: Type7 got: java.lang.String[]
For node: DateTime expected fqn: org.joda.time.DateTime with type: Type2 got: org.joda.time.DateTime
For node: DateTime expected fqn: org.joda.time.DateTime with type: Type2 got: org.joda.time.DateTime
Cannot find matching typeVariable for: parseDateTime
Cannot find matching typeVariable for: public DateTime parseDateTime(final String text){
  DateTimeFormatter formatters[]=new DateTimeFormatter[20];
  if (text.isEmpty())   return null;
  int field=0;
  DateTime dateTime=null;
  IllegalArgumentException exception=null;
  for (; field < FIELD_COUNT; ++field) {
    if (null != formatters[field]) {
      try {
        dateTime=formatters[field].parseDateTime(text);
        break;
      }
 catch (      final IllegalArgumentException e) {
        exception=null != exception ? exception : e;
      }
    }
  }
  if (dateTime == null) {
    throw exception;
  }
  return dateTime;
}

Cannot find matching typeVariable for: public class JodaTime29 {
  private static final int FIELD_COUNT=10;
  public static void main(  String[] args){
  }
  public DateTime parseDateTime(  final String text){
    DateTimeFormatter formatters[]=new DateTimeFormatter[20];
    if (text.isEmpty())     return null;
    int field=0;
    DateTime dateTime=null;
    IllegalArgumentException exception=null;
    for (; field < FIELD_COUNT; ++field) {
      if (null != formatters[field]) {
        try {
          dateTime=formatters[field].parseDateTime(text);
          break;
        }
 catch (        final IllegalArgumentException e) {
          exception=null != exception ? exception : e;
        }
      }
    }
    if (dateTime == null) {
      throw exception;
    }
    return dateTime;
  }
}

Cannot find matching typeVariable for: package jodatime;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormatter;
public class JodaTime29 {
  private static final int FIELD_COUNT=10;
  public static void main(  String[] args){
  }
  public DateTime parseDateTime(  final String text){
    DateTimeFormatter formatters[]=new DateTimeFormatter[20];
    if (text.isEmpty())     return null;
    int field=0;
    DateTime dateTime=null;
    IllegalArgumentException exception=null;
    for (; field < FIELD_COUNT; ++field) {
      if (null != formatters[field]) {
        try {
          dateTime=formatters[field].parseDateTime(text);
          break;
        }
 catch (        final IllegalArgumentException e) {
          exception=null != exception ? exception : e;
        }
      }
    }
    if (dateTime == null) {
      throw exception;
    }
    return dateTime;
  }
}

Cannot find matching typeVariable for: final String text
For node: final String text expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: text expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: DateTimeFormatter expected fqn: org.joda.time.format.DateTimeFormatter with type: Type8 got: org.joda.time.format.DateTimeFormatter
For node: DateTimeFormatter expected fqn: org.joda.time.format.DateTimeFormatter with type: Type8 got: org.joda.time.format.DateTimeFormatter
Cannot find matching typeVariable for: formatters[]=new DateTimeFormatter[20]
For node: formatters[]=new DateTimeFormatter[20] expected fqn: org.joda.time.format.DateTimeFormatter[] with type: Type9 got: org.joda.time.format.DateTimeFormatter[]
For node: formatters expected fqn: org.joda.time.format.DateTimeFormatter[] with type: Type9 got: org.joda.time.format.DateTimeFormatter[]
For node: new DateTimeFormatter[20] expected fqn: org.joda.time.format.DateTimeFormatter[] with type: Type9 got: org.joda.time.format.DateTimeFormatter[]
For node: DateTimeFormatter[] expected fqn: org.joda.time.format.DateTimeFormatter[] with type: Type9 got: org.joda.time.format.DateTimeFormatter[]
For node: DateTimeFormatter expected fqn: org.joda.time.format.DateTimeFormatter with type: Type8 got: org.joda.time.format.DateTimeFormatter
For node: DateTimeFormatter expected fqn: org.joda.time.format.DateTimeFormatter with type: Type8 got: org.joda.time.format.DateTimeFormatter
For node: 20 expected fqn: int with type: Type5 got: byte
For node: text.isEmpty() expected fqn: boolean with type: Type10 got: boolean
For node: text expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: isEmpty
For node: isEmpty expected fqn: boolean with type: Type10 got: boolean
For node: null expected fqn: null with type: Type12 got: org.joda.time.DateTime
Did not find solution for node: int with type Type4
Cannot find matching typeVariable for: field=0
Did not find solution for node: field=0 with type Type4
Did not find solution for node: field with type Type4
For node: 0 expected fqn: int with type: Type5 got: byte
For node: DateTime expected fqn: org.joda.time.DateTime with type: Type2 got: org.joda.time.DateTime
For node: DateTime expected fqn: org.joda.time.DateTime with type: Type2 got: org.joda.time.DateTime
Cannot find matching typeVariable for: dateTime=null
For node: dateTime=null expected fqn: org.joda.time.DateTime with type: Type2 got: org.joda.time.DateTime
For node: dateTime expected fqn: org.joda.time.DateTime with type: Type2 got: org.joda.time.DateTime
For node: null expected fqn: null with type: Type13 got: org.joda.time.DateTime
Did not find solution for node: IllegalArgumentException with type Type14
Did not find solution for node: IllegalArgumentException with type Type14
Cannot find matching typeVariable for: exception=null
Did not find solution for node: exception=null with type Type14
Did not find solution for node: exception with type Type14
For node: null expected fqn: null with type: Type15 got: java.lang.IllegalArgumentException
For node: field < FIELD_COUNT expected fqn: boolean with type: Type16 got: boolean
Did not find solution for node: field with type Type4
Did not find solution for node: FIELD_COUNT with type Type4
Did not find solution for node: ++field with type Type4
Did not find solution for node: field with type Type4
For node: null != formatters[field] expected fqn: boolean with type: Type16 got: boolean
Did not find solution for node: null with type Type18
For node: formatters[field] expected fqn: org.joda.time.format.DateTimeFormatter with type: Type8 got: org.joda.time.format.DateTimeFormatter
For node: formatters expected fqn: org.joda.time.format.DateTimeFormatter[] with type: Type9 got: org.joda.time.format.DateTimeFormatter[]
Cannot find matching typeVariable for: field
For node: field expected fqn: int with type: Type8 got: org.joda.time.format.DateTimeFormatter
For node: dateTime=formatters[field].parseDateTime(text) expected fqn: org.joda.time.DateTime with type: Type2 got: org.joda.time.DateTime
For node: dateTime expected fqn: org.joda.time.DateTime with type: Type2 got: org.joda.time.DateTime
For node: formatters[field].parseDateTime(text) expected fqn: org.joda.time.DateTime with type: Type19 got: org.joda.time.DateTime
For node: formatters[field] expected fqn: org.joda.time.format.DateTimeFormatter with type: Type8 got: org.joda.time.format.DateTimeFormatter
For node: formatters expected fqn: org.joda.time.format.DateTimeFormatter[] with type: Type9 got: org.joda.time.format.DateTimeFormatter[]
Cannot find matching typeVariable for: field
For node: field expected fqn: int with type: Type8 got: org.joda.time.format.DateTimeFormatter
Cannot find matching typeVariable for: parseDateTime
For node: parseDateTime expected fqn: org.joda.time.DateTime with type: Type19 got: org.joda.time.DateTime
For node: text expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: final IllegalArgumentException e
Did not find solution for node: final IllegalArgumentException e with type Type14
Did not find solution for node: IllegalArgumentException with type Type14
Did not find solution for node: IllegalArgumentException with type Type14
Did not find solution for node: e with type Type14
Did not find solution for node: exception=null != exception ? exception : e with type Type14
Did not find solution for node: exception with type Type14
Did not find solution for node: null != exception ? exception : e with type Type23
For node: null != exception expected fqn: boolean with type: Type16 got: boolean
Did not find solution for node: null with type Type22
Did not find solution for node: exception with type Type14
Did not find solution for node: exception with type Type14
Cannot find matching typeVariable for: e
Did not find solution for node: e with type Type23
For node: dateTime == null expected fqn: boolean with type: Type16 got: boolean
For node: dateTime expected fqn: org.joda.time.DateTime with type: Type2 got: org.joda.time.DateTime
Did not find solution for node: null with type Type24
Cannot find matching typeVariable for: exception
Cannot find matching typeVariable for: throw exception;

Cannot find matching typeVariable for: {
  throw exception;
}

Cannot find matching typeVariable for: if (dateTime == null) {
  throw exception;
}

Cannot find matching typeVariable for: {
  DateTimeFormatter formatters[]=new DateTimeFormatter[20];
  if (text.isEmpty())   return null;
  int field=0;
  DateTime dateTime=null;
  IllegalArgumentException exception=null;
  for (; field < FIELD_COUNT; ++field) {
    if (null != formatters[field]) {
      try {
        dateTime=formatters[field].parseDateTime(text);
        break;
      }
 catch (      final IllegalArgumentException e) {
        exception=null != exception ? exception : e;
      }
    }
  }
  if (dateTime == null) {
    throw exception;
  }
  return dateTime;
}

Cannot find matching typeVariable for: public DateTime parseDateTime(final String text){
  DateTimeFormatter formatters[]=new DateTimeFormatter[20];
  if (text.isEmpty())   return null;
  int field=0;
  DateTime dateTime=null;
  IllegalArgumentException exception=null;
  for (; field < FIELD_COUNT; ++field) {
    if (null != formatters[field]) {
      try {
        dateTime=formatters[field].parseDateTime(text);
        break;
      }
 catch (      final IllegalArgumentException e) {
        exception=null != exception ? exception : e;
      }
    }
  }
  if (dateTime == null) {
    throw exception;
  }
  return dateTime;
}

Cannot find matching typeVariable for: public class JodaTime29 {
  private static final int FIELD_COUNT=10;
  public static void main(  String[] args){
  }
  public DateTime parseDateTime(  final String text){
    DateTimeFormatter formatters[]=new DateTimeFormatter[20];
    if (text.isEmpty())     return null;
    int field=0;
    DateTime dateTime=null;
    IllegalArgumentException exception=null;
    for (; field < FIELD_COUNT; ++field) {
      if (null != formatters[field]) {
        try {
          dateTime=formatters[field].parseDateTime(text);
          break;
        }
 catch (        final IllegalArgumentException e) {
          exception=null != exception ? exception : e;
        }
      }
    }
    if (dateTime == null) {
      throw exception;
    }
    return dateTime;
  }
}

Cannot find matching typeVariable for: package jodatime;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormatter;
public class JodaTime29 {
  private static final int FIELD_COUNT=10;
  public static void main(  String[] args){
  }
  public DateTime parseDateTime(  final String text){
    DateTimeFormatter formatters[]=new DateTimeFormatter[20];
    if (text.isEmpty())     return null;
    int field=0;
    DateTime dateTime=null;
    IllegalArgumentException exception=null;
    for (; field < FIELD_COUNT; ++field) {
      if (null != formatters[field]) {
        try {
          dateTime=formatters[field].parseDateTime(text);
          break;
        }
 catch (        final IllegalArgumentException e) {
          exception=null != exception ? exception : e;
        }
      }
    }
    if (dateTime == null) {
      throw exception;
    }
    return dateTime;
  }
}

For node: dateTime expected fqn: org.joda.time.DateTime with type: Type2 got: org.joda.time.DateTime
{Checked=78, Analyzed=50, Unsolved=28, Incorrect=8, Correct=42}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=3, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=SimpleName: {Checked=7, Analyzed=2, Unsolved=5, Incorrect=2, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ConditionalExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SimpleName: {Checked=14, Analyzed=6, Unsolved=8, Incorrect=0, Correct=6}
java=SimpleType: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
java=SingleVariableDeclaration: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
null=NullLiteral: {Checked=6, Analyzed=3, Unsolved=3, Incorrect=3, Correct=0}
org.joda.time.=ArrayAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=ArrayCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=SimpleName: {Checked=12, Analyzed=12, Unsolved=0, Incorrect=0, Correct=12}
org.joda.time.=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
org.joda.time.=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=78, Analyzed=50, Unsolved=28, Incorrect=8, Correct=42}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=3, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=SimpleName: {Checked=7, Analyzed=2, Unsolved=5, Incorrect=2, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ConditionalExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SimpleName: {Checked=14, Analyzed=6, Unsolved=8, Incorrect=0, Correct=6}
java=SimpleType: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
java=SingleVariableDeclaration: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
null=NullLiteral: {Checked=6, Analyzed=3, Unsolved=3, Incorrect=3, Correct=0}
org.joda.time.=ArrayAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=ArrayCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=SimpleName: {Checked=12, Analyzed=12, Unsolved=0, Incorrect=0, Correct=12}
org.joda.time.=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
org.joda.time.=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
,SimpleName,0,1,0,0,1
boolean,InfixExpression,4,4,4,0,0
boolean,MethodInvocation,1,1,1,0,0
boolean,SimpleName,1,1,1,0,0
int,NumberLiteral,3,3,0,3,0
int,PrefixExpression,0,1,0,0,1
int,PrimitiveType,0,2,0,0,2
int,SimpleName,2,7,0,2,5
int,VariableDeclarationFragment,0,2,0,0,2
java,ArrayType,1,1,1,0,0
java,Assignment,0,1,0,0,1
java,ConditionalExpression,0,1,0,0,1
java,SimpleName,6,14,6,0,8
java,SimpleType,2,4,2,0,2
java,SingleVariableDeclaration,2,3,2,0,1
java,VariableDeclarationFragment,0,1,0,0,1
null,NullLiteral,3,6,0,3,3
org.joda.time.,ArrayAccess,2,2,2,0,0
org.joda.time.,ArrayCreation,1,1,1,0,0
org.joda.time.,ArrayType,1,1,1,0,0
org.joda.time.,Assignment,1,1,1,0,0
org.joda.time.,MethodInvocation,1,1,1,0,0
org.joda.time.,SimpleName,12,12,12,0,0
org.joda.time.,SimpleType,4,4,4,0,0
org.joda.time.,VariableDeclarationFragment,2,2,2,0,0
void,PrimitiveType,1,1,1,0,0
