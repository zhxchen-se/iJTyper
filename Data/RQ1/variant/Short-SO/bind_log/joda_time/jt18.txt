echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/jt18.java
Expect check=28
Cannot find matching typeVariable for: public class jt18 {
  public static void h1() throws ParseException {
    SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    Date date=sdf.parse("dateValue");
    System.out.println(date);
  }
}

Cannot find matching typeVariable for: jt18
Cannot find matching typeVariable for: public class jt18 {
  public static void h1() throws ParseException {
    SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    Date date=sdf.parse("dateValue");
    System.out.println(date);
  }
}

Cannot find matching typeVariable for: package java.joda_time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
public class jt18 {
  public static void h1() throws ParseException {
    SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    Date date=sdf.parse("dateValue");
    System.out.println(date);
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: h1
Cannot find matching typeVariable for: public static void h1() throws ParseException {
  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
  Date date=sdf.parse("dateValue");
  System.out.println(date);
}

Cannot find matching typeVariable for: public class jt18 {
  public static void h1() throws ParseException {
    SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    Date date=sdf.parse("dateValue");
    System.out.println(date);
  }
}

Cannot find matching typeVariable for: package java.joda_time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
public class jt18 {
  public static void h1() throws ParseException {
    SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    Date date=sdf.parse("dateValue");
    System.out.println(date);
  }
}

For node: ParseException expected fqn: java.text.ParseException with type: Type3 got: java.text.ParseException
For node: ParseException expected fqn: java.text.ParseException with type: Type3 got: java.text.ParseException
For node: SimpleDateFormat expected fqn: java.text.SimpleDateFormat with type: Type4 got: java.text.SimpleDateFormat
For node: SimpleDateFormat expected fqn: java.text.SimpleDateFormat with type: Type4 got: java.text.SimpleDateFormat
Cannot find matching typeVariable for: sdf=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss")
For node: sdf=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss") expected fqn: java.text.SimpleDateFormat with type: Type4 got: java.text.SimpleDateFormat
For node: sdf expected fqn: java.text.SimpleDateFormat with type: Type4 got: java.text.SimpleDateFormat
For node: new SimpleDateFormat("dd/MM/yyyy HH:mm:ss") expected fqn: java.text.SimpleDateFormat with type: Type4 got: java.text.SimpleDateFormat
For node: SimpleDateFormat expected fqn: java.text.SimpleDateFormat with type: Type4 got: java.text.SimpleDateFormat
For node: SimpleDateFormat expected fqn: java.text.SimpleDateFormat with type: Type4 got: java.text.SimpleDateFormat
For node: "dd/MM/yyyy HH:mm:ss" expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: Date expected fqn: java.util.Date with type: Type8 got: java.util.Date
For node: Date expected fqn: java.util.Date with type: Type8 got: java.util.Date
Cannot find matching typeVariable for: date=sdf.parse("dateValue")
For node: date=sdf.parse("dateValue") expected fqn: java.util.Date with type: Type8 got: java.util.Date
For node: date expected fqn: java.util.Date with type: Type8 got: java.util.Date
For node: sdf.parse("dateValue") expected fqn: java.util.Date with type: Type9 got: java.util.Date
For node: sdf expected fqn: java.text.SimpleDateFormat with type: Type4 got: java.text.SimpleDateFormat
Cannot find matching typeVariable for: parse
For node: parse expected fqn: java.util.Date with type: Type9 got: java.util.Date
For node: "dateValue" expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: System.out.println(date) expected fqn: void with type: Type14 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type14 got: void
For node: System expected fqn: java.lang.System with type: Type12 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type13 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type14 got: void
For node: date expected fqn: java.util.Date with type: Type8 got: java.util.Date
{Checked=25, Analyzed=25, Unsolved=0, Incorrect=1, Correct=24}
java=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=SimpleName: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
java=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=25, Analyzed=25, Unsolved=0, Incorrect=1, Correct=24}
java=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=SimpleName: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
java=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java,ClassInstanceCreation,1,1,1,0,0
java,MethodInvocation,1,1,1,0,0
java,QualifiedName,1,1,0,1,0
java,SimpleName,11,11,11,0,0
java,SimpleType,4,4,4,0,0
java,StringLiteral,2,2,2,0,0
java,VariableDeclarationFragment,2,2,2,0,0
void,MethodInvocation,1,1,1,0,0
void,PrimitiveType,1,1,1,0,0
void,SimpleName,1,1,1,0,0
