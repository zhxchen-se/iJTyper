echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/hibernate_class_26.java
Expect check=293
Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Did not find solution for node: hibernate_class_26 with type Type2
For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type69 got: org.hibernate.SessionFactory
For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type69 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: sessionFactory
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type69 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: sessionFactory
Cannot find matching typeVariable for: private SessionFactory sessionFactory;

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static void main(String[] args){
  hibernate_class_26 d=new hibernate_class_26();
  d.run3();
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: String[] args
For node: String[] args expected fqn: java.lang.String[] with type: Type71 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type71 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type70 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type70 got: java.lang.String
For node: args expected fqn: java.lang.String[] with type: Type71 got: java.lang.String[]
Did not find solution for node: hibernate_class_26 with type Type2
Did not find solution for node: hibernate_class_26 with type Type2
Cannot find matching typeVariable for: d=new hibernate_class_26()
Did not find solution for node: d=new hibernate_class_26() with type Type2
Did not find solution for node: d with type Type2
Did not find solution for node: new hibernate_class_26() with type Type2
Did not find solution for node: hibernate_class_26 with type Type2
Did not find solution for node: hibernate_class_26 with type Type2
Did not find solution for node: d.run3() with type Type73
Did not find solution for node: d with type Type2
Cannot find matching typeVariable for: run3
Did not find solution for node: run3 with type Type73
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: run3
Cannot find matching typeVariable for: public void run3(){
  Session session=getSession();
  session.beginTransaction();
  createEntities(session);
  session.getTransaction().commit();
  System.out.println("NOW WITH A NEW TRANSACTION");
  session=getSession();
  session.beginTransaction();
  Query query=session.createQuery("from A");
  List results=query.list();
  for (int i=0; i < results.size(); i++) {
    System.out.println("Row " + i + " was:");
    A a=(A)results.get(i);
    System.out.println("Result " + i);
    System.out.println(a.toString());
  }
  session.getTransaction().commit();
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

For node: Session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: Session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: session=getSession()
For node: session=getSession() expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: getSession() expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: getSession
For node: getSession expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: session.beginTransaction() expected fqn: org.hibernate.Transaction with type: Type75 got: org.hibernate.Transaction
For node: session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: beginTransaction
For node: beginTransaction expected fqn: org.hibernate.Transaction with type: Type75 got: org.hibernate.Transaction
For node: createEntities(session) expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: createEntities
For node: createEntities expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: session
For node: session expected fqn: org.hibernate.Session with type: Type6 got: void
For node: session.getTransaction().commit() expected fqn: void with type: Type79 got: int
Did not find solution for node: session.getTransaction() with type Type77
For node: session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: getTransaction
Did not find solution for node: getTransaction with type Type77
Cannot find matching typeVariable for: commit
For node: commit expected fqn: void with type: Type79 got: int
For node: System.out.println("NOW WITH A NEW TRANSACTION") expected fqn: void with type: Type84 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type84 got: void
Did not find solution for node: System with type Type82
For node: out expected fqn: java.io.PrintStream with type: Type83 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type84 got: void
For node: "NOW WITH A NEW TRANSACTION" expected fqn: java.lang.String with type: Type81 got: java.lang.String
For node: session=getSession() expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: getSession() expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: getSession
For node: getSession expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: session.beginTransaction() expected fqn: org.hibernate.Transaction with type: Type76 got: org.hibernate.Transaction
For node: session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: beginTransaction
For node: beginTransaction expected fqn: org.hibernate.Transaction with type: Type76 got: org.hibernate.Transaction
For node: Query expected fqn: org.hibernate.Query with type: Type87 got: org.hibernate.Query
For node: Query expected fqn: org.hibernate.Query with type: Type87 got: org.hibernate.Query
Cannot find matching typeVariable for: query=session.createQuery("from A")
For node: query=session.createQuery("from A") expected fqn: org.hibernate.Query with type: Type87 got: org.hibernate.Query
For node: query expected fqn: org.hibernate.Query with type: Type87 got: org.hibernate.Query
For node: session.createQuery("from A") expected fqn: org.hibernate.query.Query with type: Type88 got: org.hibernate.Query
For node: session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: createQuery
For node: createQuery expected fqn: org.hibernate.query.Query with type: Type88 got: org.hibernate.Query
For node: "from A" expected fqn: java.lang.String with type: Type81 got: java.lang.String
For node: List expected fqn: java.util.List with type: Type91 got: java.util.List
For node: List expected fqn: java.util.List with type: Type91 got: java.util.List
Cannot find matching typeVariable for: results=query.list()
For node: results=query.list() expected fqn: java.util.List with type: Type91 got: java.util.List
For node: results expected fqn: java.util.List with type: Type91 got: java.util.List
For node: query.list() expected fqn: java.util.List with type: Type92 got: java.util.List
For node: query expected fqn: org.hibernate.Query with type: Type87 got: org.hibernate.Query
Cannot find matching typeVariable for: list
For node: list expected fqn: java.util.List with type: Type92 got: java.util.List
Cannot find matching typeVariable for: int i=0
Did not find solution for node: int i=0 with type Type94
Did not find solution for node: int with type Type94
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type94
Did not find solution for node: i with type Type94
For node: 0 expected fqn: int with type: Type95 got: byte
For node: i < results.size() expected fqn: boolean with type: Type98 got: boolean
Did not find solution for node: i with type Type94
For node: results.size() expected fqn: int with type: Type96 got: int
For node: results expected fqn: java.util.List with type: Type91 got: java.util.List
Cannot find matching typeVariable for: size
For node: size expected fqn: int with type: Type96 got: int
Did not find solution for node: i++ with type Type94
Did not find solution for node: i with type Type94
For node: System.out.println("Row " + i + " was:") expected fqn: void with type: Type86 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type86 got: void
Did not find solution for node: System with type Type82
For node: out expected fqn: java.io.PrintStream with type: Type83 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type86 got: void
For node: "Row " + i + " was:" expected fqn: java.lang.String with type: Type81 got: java.lang.String
For node: "Row " expected fqn: java.lang.String with type: Type81 got: java.lang.String
Did not find solution for node: i with type Type94
For node: " was:" expected fqn: java.lang.String with type: Type81 got: java.lang.String
Did not find solution for node: A with type Type1
Did not find solution for node: A with type Type1
Cannot find matching typeVariable for: a=(A)results.get(i)
Did not find solution for node: a=(A)results.get(i) with type Type1
Did not find solution for node: a with type Type1
Did not find solution for node: (A)results.get(i) with type Type1
Did not find solution for node: A with type Type1
Did not find solution for node: A with type Type1
For node: results.get(i) expected fqn: java.lang.Object with type: Type100 got: E
For node: results expected fqn: java.util.List with type: Type91 got: java.util.List
Cannot find matching typeVariable for: get
For node: get expected fqn: java.lang.Object with type: Type100 got: E
Did not find solution for node: i with type Type94
For node: System.out.println("Result " + i) expected fqn: void with type: Type86 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type86 got: void
Did not find solution for node: System with type Type82
For node: out expected fqn: java.io.PrintStream with type: Type83 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type86 got: void
For node: "Result " + i expected fqn: java.lang.String with type: Type81 got: java.lang.String
For node: "Result " expected fqn: java.lang.String with type: Type81 got: java.lang.String
Did not find solution for node: i with type Type94
For node: System.out.println(a.toString()) expected fqn: void with type: Type104 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type104 got: void
Did not find solution for node: System with type Type82
For node: out expected fqn: java.io.PrintStream with type: Type83 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type104 got: void
For node: a.toString() expected fqn: java.lang.String with type: Type103 got: java.lang.String
Did not find solution for node: a with type Type1
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type103 got: java.lang.String
For node: session.getTransaction().commit() expected fqn: void with type: Type107 got: void
Did not find solution for node: session.getTransaction() with type Type78
For node: session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: getTransaction
Did not find solution for node: getTransaction with type Type78
Cannot find matching typeVariable for: commit
For node: commit expected fqn: void with type: Type107 got: void
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: createEntities
Cannot find matching typeVariable for: public void createEntities(Session session){
  for (int i=0; i < 2; i++) {
    A a=new A();
    B b=new B();
    a.setB(b);
    session.save(a);
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: Session session
For node: Session session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: Session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: Session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: int i=0
Did not find solution for node: int i=0 with type Type94
Did not find solution for node: int with type Type94
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type94
Did not find solution for node: i with type Type94
For node: 0 expected fqn: int with type: Type95 got: byte
For node: i < 2 expected fqn: boolean with type: Type98 got: boolean
Did not find solution for node: i with type Type94
For node: 2 expected fqn: int with type: Type95 got: byte
Did not find solution for node: i++ with type Type94
Did not find solution for node: i with type Type94
Did not find solution for node: A with type Type1
Did not find solution for node: A with type Type1
Cannot find matching typeVariable for: a=new A()
Did not find solution for node: a=new A() with type Type1
Did not find solution for node: a with type Type1
Did not find solution for node: new A() with type Type1
Did not find solution for node: A with type Type1
Did not find solution for node: A with type Type1
Did not find solution for node: B with type Type3
Did not find solution for node: B with type Type3
Cannot find matching typeVariable for: b=new B()
Did not find solution for node: b=new B() with type Type3
Did not find solution for node: b with type Type3
Did not find solution for node: new B() with type Type3
Did not find solution for node: B with type Type3
Did not find solution for node: B with type Type3
Did not find solution for node: a.setB(b) with type Type111
Did not find solution for node: a with type Type1
Cannot find matching typeVariable for: setB
Did not find solution for node: setB with type Type111
Did not find solution for node: b with type Type3
For node: session.save(a) expected fqn: java.io.Serializable with type: Type114 got: java.io.Serializable
For node: session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: save
For node: save expected fqn: java.io.Serializable with type: Type114 got: java.io.Serializable
Did not find solution for node: a with type Type1
For node: Session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: Session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: getSession
Cannot find matching typeVariable for: public Session getSession(){
  if (sessionFactory == null) {
    AnnotationConfiguration config=new AnnotationConfiguration();
    config.addAnnotatedClass(A.class);
    config.addAnnotatedClass(B.class);
    config.configure();
    new SchemaExport(config).create(true,true);
    sessionFactory=config.buildSessionFactory();
  }
  Session session=sessionFactory.getCurrentSession();
  return session;
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

For node: sessionFactory == null expected fqn: boolean with type: Type98 got: boolean
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type69 got: org.hibernate.SessionFactory
Did not find solution for node: null with type Type117
For node: AnnotationConfiguration expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
For node: AnnotationConfiguration expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
Cannot find matching typeVariable for: config=new AnnotationConfiguration()
For node: config=new AnnotationConfiguration() expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
For node: config expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
For node: new AnnotationConfiguration() expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
For node: AnnotationConfiguration expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
For node: AnnotationConfiguration expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
For node: config.addAnnotatedClass(A.class) expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type121 got: org.hibernate.cfg.AnnotationConfiguration
For node: config expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
Cannot find matching typeVariable for: addAnnotatedClass
For node: addAnnotatedClass expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type121 got: org.hibernate.cfg.AnnotationConfiguration
For node: A.class expected fqn: java.lang.Class<hibernate_class_26.A> with type: Type120 got: java.lang.Class
Did not find solution for node: A with type Type1
Did not find solution for node: A with type Type1
For node: config.addAnnotatedClass(B.class) expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type123 got: org.hibernate.cfg.AnnotationConfiguration
For node: config expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
Cannot find matching typeVariable for: addAnnotatedClass
For node: addAnnotatedClass expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type123 got: org.hibernate.cfg.AnnotationConfiguration
For node: B.class expected fqn: java.lang.Class<hibernate_class_26.B> with type: Type120 got: java.lang.Class
Did not find solution for node: B with type Type3
Did not find solution for node: B with type Type3
For node: config.configure() expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type124 got: org.hibernate.cfg.AnnotationConfiguration
For node: config expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
Cannot find matching typeVariable for: configure
For node: configure expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type124 got: org.hibernate.cfg.AnnotationConfiguration
No match for actual type MethodInvocation: new SchemaExport(config).create(true,true) with type: Type129 got: void
For node: new SchemaExport(config) expected fqn: org.hibernate.tool.hbm2ddl.SchemaExport with type: Type126 got: org.hibernate.tool.hbm2ddl.SchemaExport
For node: SchemaExport expected fqn: org.hibernate.tool.hbm2ddl.SchemaExport with type: Type126 got: org.hibernate.tool.hbm2ddl.SchemaExport
For node: SchemaExport expected fqn: org.hibernate.tool.hbm2ddl.SchemaExport with type: Type126 got: org.hibernate.tool.hbm2ddl.SchemaExport
For node: config expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
Cannot find matching typeVariable for: create
For node: create expected fqn: void with type: Type129 got: void
For node: true expected fqn: boolean with type: Type98 got: boolean
For node: true expected fqn: boolean with type: Type98 got: boolean
For node: sessionFactory=config.buildSessionFactory() expected fqn: org.hibernate.SessionFactory with type: Type69 got: org.hibernate.SessionFactory
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type69 got: org.hibernate.SessionFactory
For node: config.buildSessionFactory() expected fqn: org.hibernate.SessionFactory with type: Type133 got: org.hibernate.SessionFactory
For node: config expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type118 got: org.hibernate.cfg.AnnotationConfiguration
Cannot find matching typeVariable for: buildSessionFactory
For node: buildSessionFactory expected fqn: org.hibernate.SessionFactory with type: Type133 got: org.hibernate.SessionFactory
For node: Session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: Session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: session=sessionFactory.getCurrentSession()
For node: session=sessionFactory.getCurrentSession() expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
For node: sessionFactory.getCurrentSession() expected fqn: org.hibernate.Session with type: Type135 got: org.hibernate.Session
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type69 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: getCurrentSession
For node: getCurrentSession expected fqn: org.hibernate.Session with type: Type135 got: org.hibernate.Session
For node: session expected fqn: org.hibernate.Session with type: Type8 got: org.hibernate.Session
Cannot find matching typeVariable for: public class A {
  private Integer id;
  private B b;
  public A(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
    return b;
  }
  public void setB(  B b){
    this.b=b;
  }
}

Did not find solution for node: A with type Type1
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
Cannot find matching typeVariable for: id
For node: id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
Cannot find matching typeVariable for: id
Cannot find matching typeVariable for: private Integer id;

Cannot find matching typeVariable for: public class A {
  private Integer id;
  private B b;
  public A(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
    return b;
  }
  public void setB(  B b){
    this.b=b;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Did not find solution for node: B with type Type3
Did not find solution for node: B with type Type3
Cannot find matching typeVariable for: b
Did not find solution for node: b with type Type3
Cannot find matching typeVariable for: b
Cannot find matching typeVariable for: private B b;

Cannot find matching typeVariable for: public class A {
  private Integer id;
  private B b;
  public A(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
    return b;
  }
  public void setB(  B b){
    this.b=b;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: A
Cannot find matching typeVariable for: public A(){
  super();
}

Cannot find matching typeVariable for: public class A {
  private Integer id;
  private B b;
  public A(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
    return b;
  }
  public void setB(  B b){
    this.b=b;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

For node: @Id expected fqn: javax.persistence.Id with type: Type138 got: javax.persistence.Id
For node: Id expected fqn: javax.persistence.Id with type: Type138 got: javax.persistence.Id
For node: @GeneratedValue expected fqn: javax.persistence.GeneratedValue with type: Type139 got: javax.persistence.GeneratedValue
For node: GeneratedValue expected fqn: javax.persistence.GeneratedValue with type: Type139 got: javax.persistence.GeneratedValue
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
Cannot find matching typeVariable for: getId
Cannot find matching typeVariable for: @Id @GeneratedValue public Integer getId(){
  return id;
}

Cannot find matching typeVariable for: public class A {
  private Integer id;
  private B b;
  public A(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
    return b;
  }
  public void setB(  B b){
    this.b=b;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

For node: id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: setId
Cannot find matching typeVariable for: public void setId(Integer id){
  this.id=id;
}

Cannot find matching typeVariable for: public class A {
  private Integer id;
  private B b;
  public A(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
    return b;
  }
  public void setB(  B b){
    this.b=b;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: Integer id
For node: Integer id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: this.id=id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: this.id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: id
For node: id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
Cannot find matching typeVariable for: id
For node: id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: @OneToOne(cascade=CascadeType.ALL) expected fqn: javax.persistence.OneToOne with type: Type140 got: javax.persistence.OneToOne
For node: OneToOne expected fqn: javax.persistence.OneToOne with type: Type140 got: javax.persistence.OneToOne
Cannot find matching typeVariable for: cascade
Cannot find matching typeVariable for: cascade=CascadeType.ALL
For node: cascade expected fqn: javax.persistence.CascadeType[] with type: Type140 got: javax.persistence.OneToOne
For node: CascadeType.ALL expected fqn: javax.persistence.CascadeType with type: Type142 got: org.hibernate.annotations.CascadeType
For node: CascadeType expected fqn: javax.persistence.CascadeType with type: Type141 got: org.hibernate.annotations.CascadeType
For node: ALL expected fqn: javax.persistence.CascadeType with type: Type142 got: org.hibernate.annotations.CascadeType
For node: @Fetch(FetchMode.JOIN) expected fqn: org.hibernate.annotations.Fetch with type: Type143 got: org.hibernate.annotations.Fetch
For node: Fetch expected fqn: org.hibernate.annotations.Fetch with type: Type143 got: org.hibernate.annotations.Fetch
For node: FetchMode.JOIN expected fqn: org.hibernate.annotations.FetchMode with type: Type145 got: org.hibernate.FetchMode
For node: FetchMode expected fqn: org.hibernate.annotations.FetchMode with type: Type144 got: org.hibernate.FetchMode
For node: JOIN expected fqn: org.hibernate.annotations.FetchMode with type: Type145 got: org.hibernate.FetchMode
Did not find solution for node: B with type Type3
Did not find solution for node: B with type Type3
Cannot find matching typeVariable for: getB
Cannot find matching typeVariable for: @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
  return b;
}

Cannot find matching typeVariable for: public class A {
  private Integer id;
  private B b;
  public A(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
    return b;
  }
  public void setB(  B b){
    this.b=b;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Did not find solution for node: b with type Type3
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: setB
Cannot find matching typeVariable for: public void setB(B b){
  this.b=b;
}

Cannot find matching typeVariable for: public class A {
  private Integer id;
  private B b;
  public A(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
    return b;
  }
  public void setB(  B b){
    this.b=b;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: B b
Did not find solution for node: B b with type Type3
Did not find solution for node: B with type Type3
Did not find solution for node: B with type Type3
Did not find solution for node: b with type Type3
Did not find solution for node: this.b=b with type Type3
Did not find solution for node: this.b with type Type3
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: b
Did not find solution for node: b with type Type3
Cannot find matching typeVariable for: b
Did not find solution for node: b with type Type3
Cannot find matching typeVariable for: @Entity public class B {
  private Integer id;
  public B(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
}

For node: @Entity expected fqn: javax.persistence.Entity with type: Type146 got: org.hibernate.annotations.Entity
For node: Entity expected fqn: javax.persistence.Entity with type: Type146 got: org.hibernate.annotations.Entity
Did not find solution for node: B with type Type3
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
Cannot find matching typeVariable for: id
For node: id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
Cannot find matching typeVariable for: id
Cannot find matching typeVariable for: private Integer id;

Cannot find matching typeVariable for: @Entity public class B {
  private Integer id;
  public B(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: B
Cannot find matching typeVariable for: public B(){
  super();
}

Cannot find matching typeVariable for: @Entity public class B {
  private Integer id;
  public B(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

For node: @Id expected fqn: javax.persistence.Id with type: Type138 got: javax.persistence.Id
For node: Id expected fqn: javax.persistence.Id with type: Type138 got: javax.persistence.Id
For node: @GeneratedValue expected fqn: javax.persistence.GeneratedValue with type: Type139 got: javax.persistence.GeneratedValue
For node: GeneratedValue expected fqn: javax.persistence.GeneratedValue with type: Type139 got: javax.persistence.GeneratedValue
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
Cannot find matching typeVariable for: getId
Cannot find matching typeVariable for: @Id @GeneratedValue public Integer getId(){
  return id;
}

Cannot find matching typeVariable for: @Entity public class B {
  private Integer id;
  public B(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

For node: id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: setId
Cannot find matching typeVariable for: public void setId(Integer id){
  this.id=id;
}

Cannot find matching typeVariable for: @Entity public class B {
  private Integer id;
  public B(){
    super();
  }
  @Id @GeneratedValue public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: import java.util.List;
import java.util.Map;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
public class hibernate_class_26 {
  private SessionFactory sessionFactory;
  public static void main(  String[] args){
    hibernate_class_26 d=new hibernate_class_26();
    d.run3();
  }
  public void run3(){
    Session session=getSession();
    session.beginTransaction();
    createEntities(session);
    session.getTransaction().commit();
    System.out.println("NOW WITH A NEW TRANSACTION");
    session=getSession();
    session.beginTransaction();
    Query query=session.createQuery("from A");
    List results=query.list();
    for (int i=0; i < results.size(); i++) {
      System.out.println("Row " + i + " was:");
      A a=(A)results.get(i);
      System.out.println("Result " + i);
      System.out.println(a.toString());
    }
    session.getTransaction().commit();
  }
  public void createEntities(  Session session){
    for (int i=0; i < 2; i++) {
      A a=new A();
      B b=new B();
      a.setB(b);
      session.save(a);
    }
  }
  public Session getSession(){
    if (sessionFactory == null) {
      AnnotationConfiguration config=new AnnotationConfiguration();
      config.addAnnotatedClass(A.class);
      config.addAnnotatedClass(B.class);
      config.configure();
      new SchemaExport(config).create(true,true);
      sessionFactory=config.buildSessionFactory();
    }
    Session session=sessionFactory.getCurrentSession();
    return session;
  }
public class A {
    private Integer id;
    private B b;
    public A(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
    @OneToOne(cascade=CascadeType.ALL) @Fetch(FetchMode.JOIN) public B getB(){
      return b;
    }
    public void setB(    B b){
      this.b=b;
    }
  }
@Entity public class B {
    private Integer id;
    public B(){
      super();
    }
    @Id @GeneratedValue public Integer getId(){
      return id;
    }
    public void setId(    Integer id){
      this.id=id;
    }
  }
}

Cannot find matching typeVariable for: Integer id
For node: Integer id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: Integer expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: this.id=id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
For node: this.id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
Did not find solution for node: this with type Type3
Cannot find matching typeVariable for: id
For node: id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
Cannot find matching typeVariable for: id
For node: id expected fqn: java.lang.Integer with type: Type7 got: java.lang.Integer
{Checked=274, Analyzed=187, Unsolved=87, Incorrect=25, Correct=162}
=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=FieldAccess: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=29, Analyzed=0, Unsolved=29, Incorrect=0, Correct=0}
=SimpleType: {Checked=13, Analyzed=0, Unsolved=13, Incorrect=0, Correct=0}
=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=InfixExpression: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=3, Correct=0}
int=PostfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=SimpleName: {Checked=10, Analyzed=1, Unsolved=9, Incorrect=0, Correct=1}
int=VariableDeclarationExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=FieldAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MarkerAnnotation: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=1, Correct=4}
java=MethodInvocation: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=1, Correct=3}
java=NormalAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=5, Correct=0}
java=SimpleName: {Checked=41, Analyzed=37, Unsolved=4, Incorrect=5, Correct=32}
java=SimpleType: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
java=SingleVariableDeclaration: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
java=TypeLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
java=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
null=NullLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=Assignment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.hibernate.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.hibernate.=MethodInvocation: {Checked=12, Analyzed=10, Unsolved=2, Incorrect=1, Correct=9}
org.hibernate.=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
org.hibernate.=SimpleName: {Checked=47, Analyzed=45, Unsolved=2, Incorrect=4, Correct=41}
org.hibernate.=SimpleType: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
org.hibernate.=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=VariableDeclarationFragment: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
void=MethodInvocation: {Checked=9, Analyzed=7, Unsolved=2, Incorrect=1, Correct=6}
void=PrimitiveType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
void=SimpleName: {Checked=10, Analyzed=8, Unsolved=2, Incorrect=1, Correct=7}
Total stats
{Checked=274, Analyzed=187, Unsolved=87, Incorrect=25, Correct=162}
=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=FieldAccess: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=29, Analyzed=0, Unsolved=29, Incorrect=0, Correct=0}
=SimpleType: {Checked=13, Analyzed=0, Unsolved=13, Incorrect=0, Correct=0}
=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=InfixExpression: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=3, Correct=0}
int=PostfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=SimpleName: {Checked=10, Analyzed=1, Unsolved=9, Incorrect=0, Correct=1}
int=VariableDeclarationExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=FieldAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MarkerAnnotation: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=1, Correct=4}
java=MethodInvocation: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=1, Correct=3}
java=NormalAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=5, Correct=0}
java=SimpleName: {Checked=41, Analyzed=37, Unsolved=4, Incorrect=5, Correct=32}
java=SimpleType: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
java=SingleVariableDeclaration: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
java=TypeLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
java=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
null=NullLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=Assignment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.hibernate.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.hibernate.=MethodInvocation: {Checked=12, Analyzed=10, Unsolved=2, Incorrect=1, Correct=9}
org.hibernate.=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
org.hibernate.=SimpleName: {Checked=47, Analyzed=45, Unsolved=2, Incorrect=4, Correct=41}
org.hibernate.=SimpleType: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
org.hibernate.=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=VariableDeclarationFragment: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
void=MethodInvocation: {Checked=9, Analyzed=7, Unsolved=2, Incorrect=1, Correct=6}
void=PrimitiveType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
void=SimpleName: {Checked=10, Analyzed=8, Unsolved=2, Incorrect=1, Correct=7}
,Assignment,0,1,0,0,1
,CastExpression,0,1,0,0,1
,ClassInstanceCreation,0,3,0,0,3
,FieldAccess,0,1,0,0,1
,SimpleName,0,29,0,0,29
,SimpleType,0,13,0,0,13
,SingleVariableDeclaration,0,1,0,0,1
,ThisExpression,0,3,0,0,3
,VariableDeclarationFragment,0,5,0,0,5
boolean,BooleanLiteral,2,2,2,0,0
boolean,InfixExpression,3,3,3,0,0
int,MethodInvocation,1,1,1,0,0
int,NumberLiteral,3,3,0,3,0
int,PostfixExpression,0,2,0,0,2
int,PrimitiveType,0,2,0,0,2
int,SimpleName,1,10,1,0,9
int,VariableDeclarationExpression,0,2,0,0,2
int,VariableDeclarationFragment,0,2,0,0,2
java,ArrayType,1,1,1,0,0
java,Assignment,2,2,2,0,0
java,FieldAccess,2,2,2,0,0
java,InfixExpression,2,2,2,0,0
java,MarkerAnnotation,5,5,4,1,0
java,MethodInvocation,4,4,3,1,0
java,NormalAnnotation,1,1,1,0,0
java,QualifiedName,5,5,0,5,0
java,SimpleName,37,41,32,5,4
java,SimpleType,8,8,8,0,0
java,SingleVariableDeclaration,3,3,3,0,0
java,StringLiteral,5,5,5,0,0
java,TypeLiteral,2,2,0,2,0
java,VariableDeclarationFragment,3,3,3,0,0
null,NullLiteral,0,1,0,0,1
org.hibernate.,Assignment,2,2,2,0,0
org.hibernate.,ClassInstanceCreation,2,2,2,0,0
org.hibernate.,MethodInvocation,10,12,9,1,2
org.hibernate.,QualifiedName,1,1,0,1,0
org.hibernate.,SimpleName,45,47,41,4,2
org.hibernate.,SimpleType,9,9,9,0,0
org.hibernate.,SingleMemberAnnotation,1,1,1,0,0
org.hibernate.,SingleVariableDeclaration,1,1,1,0,0
org.hibernate.,VariableDeclarationFragment,5,5,5,0,0
void,MethodInvocation,7,9,6,1,2
void,PrimitiveType,6,6,6,0,0
void,SimpleName,8,10,7,1,2
