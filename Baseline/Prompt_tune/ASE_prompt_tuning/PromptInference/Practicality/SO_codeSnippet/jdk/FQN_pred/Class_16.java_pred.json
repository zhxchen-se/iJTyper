[
  {
    "originalCode": "private static final Preferences userRoot = Preferences.userRoot();",
    "FQNCode": "private static final <MASK>.Preferences userRoot = <MASK>.Preferences.userRoot();",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.prefs.Preferences",
        "java.util.fs.Preferences",
        "java.util.prefs.preerences.Preferences",
        "java.util.preprefs.Preferences",
        "java.util.prefs.WindowsPrefParser.Preferences",
        "java.util.prefs.WindowsPrefsputil.Preferences",
        "java.util.prefs.WindowsPreSettings.spfs.Preferences",
        "java.util.prefs.Windowsixer.util.Preferences",
        "java.util.prefs.WindowsPrefer.Windows.Attributes.Preferences"
      ],
      [
        "java.util.prefs.Preferences",
        "java.util.prefs.Preferences.Preferences",
        "java.util.Preferences",
        "java.util.fs.Preferences",
        "java.prefs.Preferences",
        "java.util.prefsfs.Preferences",
        "java.util.prefs.fs.Preferences",
        "java.util.prefs.WindowsPrefParser.Preferences",
        "java.util.prefs.FilePreferencesutil.Preferences",
        "java.util.prefs.Windowsixer.util.Preferences",
        "java.util.prefs.WindowsPreferences.spfs.Preferences",
        "java.util.prefs.WindowsidererDataKey.Factory.Preferences",
        "java.util.prefs.Windowsiderer.ix.PrefParser.Preferences"
      ]
    ]
  },
  {
    "originalCode": "private static final Preferences systemRoot = Preferences.systemRoot();",
    "FQNCode": "private static final <MASK>.Preferences systemRoot = <MASK>.Preferences.systemRoot();",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.util.prefs.Preferences.Preferences",
        "java.prefs.Preferences",
        "java.util.fs.Preferences",
        "java.util.preprefs.Preferences",
        "java.util.prefs.WindowsPrefAttributes.Preferences",
        "java.util.prefs.Windowsidererences.spfs.Preferences",
        "java.util.prefs.TimeiderOffsetpolicyPalPrefFactory.Preferences",
        "java.util.prefs.TimeidererpolicyJPrefObjectemmlParser.Preferences",
        "java.util.prefs.Timeiderer.JPref.PrefKeyViewSet.Preferences"
      ],
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.util.prefs.Preferences.Preferences",
        "java.prefs.Preferences",
        "java.util.fs.Preferences",
        "java.util.prefsfs.Preferences",
        "java.util.prefs.WindowsPrefParser.Preferences",
        "java.util.prefs.WindowsPrefsputil.Preferences",
        "java.util.prefs.WindowsPreferences.spfs.Preferences",
        "java.util.prefs.WindowsidererpolicyLPrefFactory.Preferences",
        "java.util.prefs.Windowsiderer.spData.PrefImpl.Preferences",
        "java.util.prefs.Windowsiderer.JsIPPrefAttributes.Preferences",
        "java.util.prefs.Timeiderer.JPrefKeyXmlFactory.Preferences",
        "java.util.prefs.Timeiderer.JPref.PrefKeyPreManager.Preferences"
      ]
    ]
  },
  {
    "originalCode": "private static final Class<? extends Preferences> userClass = userRoot.getClass();",
    "FQNCode": "private static final Class<? extends <MASK>.Preferences> userClass = userRoot.getClass();",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.preference.Preferences",
        "java.util.fs.Preferences",
        "java.util.prefs.preider.Preferences",
        "java.util.pre.fs.Preferences",
        "java.util.prefs.VCPrefAttributes.Preferences",
        "com.util.prefs.Windows.erences.spfs.Preferences",
        "java.util.prefs.Timeiderer.JsPrefPrefAttributes.Preferences"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regOpenKey;",
    "FQNCode": "private static final <MASK>.Method regOpenKey;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method",
        "java.lang..Method",
        "com.sun.jnd.dev.r.rrite.mimemgex.CPath.Method",
        "java.r.spserver.UnICrPro.Method",
        "com.sun.jnd.devrr.rgi.MumgexValuelinkTest.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regCloseKey;",
    "FQNCode": "private static final <MASK>.Method regCloseKey;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.langreflect.Method",
        "java.lang.reflect.Method.Method",
        "java.lang.refl.commons.Method",
        "java.text.Attizer.REdaor.Method",
        "java.util.preserver.UnIC.R.Method",
        "com.sun.jmx.dev.r.rree.sMAccess.ULSy.RefTest.Method",
        "com.sun.jmx.dev.r.rree.sMAccessc.LFile.QueryRefor.Method",
        "java.util.jmx.names.mi.Defaultistry.ServerClassSy.ld.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regQueryValueEx;",
    "FQNCode": "private static final <MASK>.Method regQueryValueEx;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method",
        "java.lang.reflectreflect.Method",
        "java.awt.Method",
        "com.sun.jmx.dev.ap.rewrite.Method",
        "com.sun.jnd.query.ap.Defaultino.ObjectXFormatController.Method",
        "com.sun.jnd.query.mi.rrite.Object.miValueRewTest.Method",
        "com.sun.jnd.query.mi.rrite.rmimateldLookractor.Method",
        "com.sun.jnd.query.sp.rrite.classateSyniMethods.Method",
        "java.lang.invoke.riptName.Method",
        "j.ax.jaming.mserver.Query.Method",
        "com.sun.jwt.query.sp.rewrite.rmimiFactory.reached.SubRefHandler.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regEnumValue;",
    "FQNCode": "private static final <MASK>.Method regEnumValue;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.reflect.Method",
        "java.lang.reflectDesc.Method",
        "java.awt.Method",
        "com.sun.gmx.dev.ap.rewrite.Method",
        "com.sun.jnd.query.mi.rewrite.impl.FormatValueRewor.Method",
        "com.sun.jnd.query.ap.Aino.ObjValueFormatController.Method",
        "com.sun.jnd.query.sp.rewrite.class.Value.Desc.Method",
        "com.sun.jwt.query.Server.rewrite.rmi.ableTypeDescValuehetic.Method",
        "com.sun.jnd.query.mi.rewrite.implable.iscNameDataValue.Method",
        "com.sun.jwt.dev.Server.rewrite.smi.Factoryator.gex.Eninding.Method",
        "com.sun.jwt.dev.Server.rewrite.rmi.ma.ConstValueHostractor.Method",
        "j.sun.naming.mserver.Method.Method",
        "com.sun.jwt.dev.Server.rewrite.ParsermimiFactoryTestLValueSetEnRefHandler.Method",
        "com.sun.jwt.dev.Server.rewrite.ParsermimiClass.Datail.Enumclassor.Method",
        "com.sun.jwt.dev.Server.rewrite.implmi.query.DataValue.SubEndumclassExt.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regQueryInfoKey;",
    "FQNCode": "private static final <MASK>.Method regQueryInfoKey;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method",
        "java.awt.Method",
        "java.lang.Objectlect.Method",
        "com.sun.gwt.core.ap.rewrite.Method",
        "com.sun.gwt.dev.server.rewrite.impl.maValueRewor.Method",
        "com.sun.jnd.query.sp.rorb.ObjectXFormatFactory.Method",
        "com.sun.gwt.query.mi.rrite.implmimateNameLookractor.Method",
        "java.lang.invoke.ObjectName.Method",
        "com.sun.jwt.query.sp.rrite.classCTX.Class.Method",
        "com.sun.jwt.query.sp.rewrite.rmimiQueryTestMethodachedClassSubRefInstance.Method",
        "com.sun.jwt.query.sp.rewrite.rmimiQueryTestachedil.EnSubclassor.Method",
        "com.sun.gwt.dev.Server.rewrite.implmi.queryPLSearchFunctionRegType.Manyumngor.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regEnumKeyEx;",
    "FQNCode": "private static final <MASK>.Method regEnumKeyEx;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method",
        "java.awt.Method",
        "com.google.gwt.core.ap.rewrite.Method",
        "com.google.gwt.dev.server.rrite.impl.maValueRewor.Method",
        "com.google.gwt.dev.server.rrite.impl.mateExtDataractor.Method",
        "com.sun.jwt.dev.ap.rino.ObjectServiceFormatFactory.Method",
        "com.google.jnd.dev.ap.Aorb.RepInterfaceStream.Method",
        "com.sun.jwt.dev.server.rrite.Object.SyCheckMethods.Method",
        "com.google.gwt.dev.server.rrite.smiRefmaator.ldValueRefadata.Method",
        "com.google.gwt.dev.server.rrite.smi.ma.REValueKeyInstance.Method",
        "com.google.gwt.dev.server.rrite.smiRefFactoryTest.gexClassonRefContext.Method",
        "com.google.gwt.dev.server.rrite.smimiClassCheck.il.Enumoador.Method",
        "com.google.gwt.dev.S.rrite.smi.s.regex.Gener.LExt.edngor.Method",
        "com.sun.gwt.dev.S.rrite.rmi.java.reD.Parser.Ssr.ngor.Method",
        "com.google.gwt.dev.server.rrite.rmi.query.Dataon.For.Manyumoador.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regCreateKeyEx;",
    "FQNCode": "private static final <MASK>.Method regCreateKeyEx;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method",
        "java.langt.Method",
        "com.sun.jmx.core.ap.rewrite.Method",
        "com.sun.gwt.se.server.rrite.impl.maValueRewor.Method",
        "com.sun.jnd.se.ap.rorb.ObjectXationController.Method",
        "com.sun.jnd.se.ap.Aorb.Rep.or.Method",
        "com.sun.jnd.se.ap.rrite.EntityCTSy.Class.Method",
        "com.sun.gwt.dev.Server.rrite.implmimmaExtDataractor.Method",
        "com.sun.jwt.dev.Server.rrite.smimiFactory.MethodachedClassRefgexor.Method",
        "com.sun.jwt.dev.Server.rrite.rmimiClassCheckachedap.RegSuboador.Method",
        "com.sun.gwt.dev.server.rrite.rmi.query.achedon.TypeRldereoador.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regSetValueEx;",
    "FQNCode": "private static final <MASK>.Method regSetValueEx;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method",
        "java.langt.Method",
        "com.sun.jwt.se.ap.rino.ObjXFormatController.Method",
        "com.google.gwt.dev.server.rrite.impl.miValueRewor.Method",
        "com.google.gwt.core.shell.reworb.Method",
        "java.lang.invoke.riptName.Method",
        "com.google.gwt.dev.server.rrite.implmiServermaCompDataex.Method",
        "com.sun.gba.se.ap.Aorb.reInterfaceConnection.Method",
        "com.sun.jwt.se.ap.rhino.MImpl.Method",
        "com.sun.gwt.se.server.rino.implCTSy..Method",
        "com.google.gwt.dev.server.rrite.Parsermimima.DeachedClassRefoadContext.Method",
        "com.sun.jwt.dev.server.rrite.rmiRefmaator.ldValueRefinding.Method",
        "com.sun.gwt.dev.S.rrite.rmi.ma.UngexDataGener.ConstructExt.ortedoador.Method",
        "com.google.gwt.dev.S.rrite.rmi.Security.Dataon.TypeManagerldMultoador.Method",
        "com.sun.gwt.dev.S.rrite.rmi.java.regexGenerParser.SSortedngor.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regDeleteKey;",
    "FQNCode": "private static final <MASK>.Method regDeleteKey;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.reflect.Method",
        "java.langt.Method",
        "java.lang.invoke.riptName.Method",
        "com.sun.jmx.se.mi.rorb.ObjXClassObject.Method",
        "com.sun.jba.se.ap.AorbObjectRepSetHandler.Method",
        "com.sun.jmx.se.mi.rino.classCTLoc.Class.Method",
        "com.sun.jmx.se.mi.rpc.AbstractCTClassValueDescor.Method",
        "com.sun.jmx.se.ap.RMository.AnalyClass.Method",
        "com.sun.jba.se.S.rrite.Parsermi.Factory.DeISClassRefgexInstance.Method",
        "com.sun.jba.se.S.rrite.Parsermi.Class.Util.DeleteRefgexor.Method",
        "com.sun.jba.se.S.presentl.rmi.Open.RegularDatDataName.SSortedClassor.Method",
        "com.sun.jba.se.S.rl.rmi.Open.Regularon.TypeServerMany.onor.Method",
        "com.sun.jba.se.S.rrite.Parsermi.Class.UtValue.ToDeleteValueoador.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regDeleteValue;",
    "FQNCode": "private static final <MASK>.Method regDeleteValue;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.reflect.Method",
        "java.langreflect.Method",
        "java.lang.invoke.riptName.Method",
        "com.sun.jba.se.ap.Defaultorb.ObjectXClassObject.Method",
        "com.sun.jba.se.ap.DefaultorbanInterfaceSetHandler.Method",
        "com.sun.jba.se.mi.rBe.ObjectCTValue.Class.Method",
        "com.sun.corba.se.impl.rrite.Abstract.ClassValueLookor.Method",
        "java.rmi.rLDesc.or.Method",
        "com.sun.jba.se.Server.ration.Parsermi.Factory.DeISClassTablegexImpl.Method",
        "com.sun.jba.se.S.ration.Parsermi.Class.UtIS.DDescNSor.Method",
        "com.sun.jba.se.S.ration.rmi.Open.RegularMethodDataNot.SSortedNameared.Method",
        "com.sun.jba.se.S.presentation.rmi.Open.Regularon.TypeServerDelete.Classor.Method"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "public static Map<String, String> readStringValues(int hkey, String key)",
    "FQNCode": "public static <MASK>.Map<String, String> readStringValues(int hkey, String key)",
    "fqnToken": [
      [
        "java.util.Map",
        "java.util.Map.Map",
        "java.util.Hashtable.Map",
        "com.sun.tools.j.ac.util.Map",
        "java.awutil.Map",
        "com.sun.n.HashMap.Map",
        "java.util.res.Map.Map",
        "org.n.security.internalHandapping.Map"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "public static List<String> readStringSubKeys(int hkey, String key)",
    "FQNCode": "public static <MASK>.List<String> readStringSubKeys(int hkey, String key)",
    "fqnToken": [
      [
        "java.util.List",
        "java.util.util.List",
        "java.utilutil.List",
        "java.util.Colcurrent.List",
        "com.sun.tools.hat.ac.util.List",
        "com.google.gwt.dev.util.List",
        "c.n.S.list.List"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "private static int deleteValue(Preferences root, int hkey, String key, String value)",
    "FQNCode": "private static int deleteValue(<MASK>.Preferences root, int hkey, String key, String value)",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.security.util.Preferences",
        "java.preference.Preferences",
        "java.android.res.fs.Preferences",
        "java.util.prefs.Prefi.Preferences",
        "com.android.prefs.WindowsPrefAttributes.Preferences",
        "com.android.spfs.Windows.Servicei.fs.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "private static int deleteKey(Preferences root, int hkey, String key)",
    "FQNCode": "private static int deleteKey(<MASK>.Preferences root, int hkey, String key)",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.util.fs.Preferences",
        "java.preference.Preferences",
        "java.util.prefs.Preferences.Preferences",
        "java.util.pre.fs.Preferences",
        "java.util.prefs.fs.Preferences",
        "java.util.prefs.WindowsPrefParser.Preferences",
        "com.android.prefs.WindowsPrefer.util.Preferences",
        "com.util.prefs.WindowsPrefPrefpolicy.Prefutil.Preferences",
        "com.util.resfs.WindowsPrefServicepolicy.PrefKeyNamesPrefData.Preferences",
        "com.util.resfs.WindowsPrefServicepolicyspPref.MKeyPref.ixistence.Preferences",
        "com.util.regfs.TimePrefService.spPref.EnhancedService.core.PatternfsDataemMDataJavaToetISIdCollectionPrefImpl.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "private static String readString(Preferences root, int hkey, String key, String value)",
    "FQNCode": "private static String readString(<MASK>.Preferences root, int hkey, String key, String value)",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.prefs.Preferences",
        "java.util.Preferences",
        "java.util.fs.Preferences",
        "java.util.prefs.spfs.Preferences",
        "java.util.pre.fs.Preferences",
        "java.util.prefs.WindowsPrefAttributes.Preferences",
        "com.sun.org.apache.xmlService.spapping.MKeyUt.ixfs.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "private static Map<String, String> readStringValues(Preferences root, int hkey, String key)",
    "FQNCode": "private static <MASK>.Map<String, String> readStringValues(<MASK>.Preferences root, int hkey, String key)",
    "fqnToken": [
      [
        "java.util.Map",
        "java.util.Map.Map",
        "java.util.Profs.Map",
        "java.util.prefs.Preferences.Map",
        "java.util.prefs.WindowsPrefSystem.Map",
        "java.util..Map",
        "java.util.prefs.Path.Map",
        "java.util.prefs.TimePrefPrefutil.Map",
        "java.util.res.Path.Map",
        "java.util.prefs.WindowsPrefaged.table.Map",
        "java.util.prefs.Windowsidererences.ProCache.Map",
        "com.sun.formatfs.remoteaccore.DefaultPath.PrefPrefmxmbolMap.Map",
        "java.util.formatfs.remoteaccore.utilfs.PrefmlPrefmxLookmer.Map",
        "java.util.formatfs.remoteaccore.utilPrefPathPreffsPref.PrefnamePrefPath.Map",
        "java.sun.jfs.remoteaccore.linkfs.PreffsPool.Local.mlFRefverse.Map",
        "com.sun.formatfs.remoteacService.linkPref.PreffsP.SystemntFPropertyer.Map",
        "java.sun.jfs.remote.core.spfs.sfsUt.javaLFilePathMixImpl.Map",
        "java.util.formatfs.Fileaccore.utilfs.PrefixReferencePref.plementap.Map"
      ],
      [
        "java.util.Preferences",
        "java.util.prefs.Preferences",
        "java.util.util.Preferences",
        "java.preference.Preferences",
        "java.util.res.fs.Preferences",
        "java.util.pre.Preffs.Preferences",
        "java.util.prefs.Prefider.Preferences",
        "java.time.prefs.WindowsPrefService.Preferences",
        "com.sun.xmlfs.ference.Service.spPref.PersZonepaceUtutil.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "HashMap<String, String> results = new HashMap<String, String>();",
    "FQNCode": "<MASK>.HashMap<String, String> results = new <MASK>.HashMap<String, String>();",
    "fqnToken": [
      [
        "java.util.HashMap",
        "java.util.Map.HashMap",
        "java.util.Profs.HashMap",
        "java.awutil.HashMap",
        "java.util.prefs.Preferences.HashMap",
        "java.util.util.consumer.HashMap",
        "java.sun.nfs.internal.HashMap",
        "com.google.prefs.devPrefResource.HashMap",
        "com.sun.orgfs.remote.core.Mfs.ServiceImplPref.ationImpl.HashMap",
        "com.sun.jfs.remotexmlUt.spf.Forwardfs.cFilentfsDataMriL.airCache.HashMap"
      ],
      [
        "java.util.HashMap",
        "java.util.Map.HashMap",
        "java.util.confs.HashMap",
        "java.awutil.HashMap",
        "java.util.prefs.proverences.HashMap",
        "java.util.nfs.internal.HashMap",
        "com.android.prefs.devixcore.util.HashMap",
        "java.util.prefs.devPrefResource.HashMap",
        "java.util.resfsPath.HashMap",
        "com.sun.jmx.remote.Ut.spmt.sfs.cFilePathPathDataMpl.ValueLutilCachel.HashMap"
      ]
    ]
  },
  {
    "originalCode": "private static List<String> readStringSubKeys(Preferences root, int hkey, String key)",
    "FQNCode": "private static <MASK>.List<String> readStringSubKeys(<MASK>.Preferences root, int hkey, String key)",
    "fqnToken": [
      [
        "java.util.List",
        "java.util.util.List",
        "java.util.prefs.Preerences.List",
        "java.utilutil.List",
        "java.util.Preffs.List",
        "java.util.prefs.WindowsPrefAttributes.List",
        "java.android.prefs.FileacViewutil.List",
        "java.util.prefs.Path.List",
        "j.ax.res.Path.List",
        "java.android.prefs.Windowsixi.map.List",
        "java.android.prefs.WindowsPrefer.regPrefPath.List",
        "java.android.prefs.Windowsidererences.ProPath.List",
        "com.though.formatfs.Fileaccore.utilPathPathServiceixSupport.List",
        "com.google.formatfs.Fileaccore.util.PathPrefPrefixutil.List",
        "com.google.formatfs.remote.core.utilPath.SubPrefAIterutil.List",
        "com.google.formatfs.File.core.utilPath.mPathPrefJavaLooker.List",
        "com.sun.jfs.remote.core.Mcies.keysfs.coreagerCompmlPathObjectlImpl.List",
        "com.sun.orgfs.remote.core.Mcies.keysfs.cheragerCompPathToMimIconf.List",
        "com.sun.orgfs.remote.core.Mcies.keysfs.cherFilentFieldToclassSSstrumentf.List",
        "com.util.jfs.remote.Service.spcies.sfs.cherffPathFieldfRefsLL.CachePath.List"
      ],
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.preference.Preferences",
        "java.util.util.Preferences",
        "java.util.res.fs.Preferences",
        "java.util.prefs.Prefi.Preferences",
        "java.time.prefs.WindowsPrefProvider.Preferences",
        "com.util.xml.jferencePref.policyPrefPrefProvider.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "List<String> results = new ArrayList<String>();",
    "FQNCode": "<MASK>.List<String> results = new <MASK>.ArrayList<String>();",
    "fqnToken": [
      [
        "java.util.List",
        "java.util.reflect.List",
        "java.utilutil.List",
        "java.util.concurrent.List",
        "java.n.prefs.PrefList.List",
        "java.apache.nared.Path.List",
        "sun.android.prefs.SubPrefResource.List",
        "com.android.locfs.Windows.erences.RepPath.List",
        "c.ax.res.Path.List",
        "com.android.locfs.WindowsPrefer.regPathPath.List",
        "com.google.orgfs.dev.core.utilPath.mall.Iterutil.List",
        "com.google.orgfs.av.core.JPath.mcollectPrefJavaLooker.List",
        "com.google.orgfs.remote.core.APath.Prefref.View.ListPath.List",
        "com.sun.orgfs.remote.core.Af.keysfs.cagerAtPathPathObjectMLImpl.List",
        "com.sun.orgfs.dev.Ut.spf.sfs.coreFilePathixDataRefsLor.SubCacheObject.List",
        "com.sun.orgfs.remote.core.Aaj.keysfs.cheragerUtPathToMplSystemImpl.List",
        "com.sun.orgfs.dev.Ut.spf.sFile.core.PathPathDataMM.sazyMethodSubistryObject.List",
        "com.sun.orgfs.remote.core.spf.keysfs.cFileUtPathToclassSSIconf.List",
        "com.sun.orgfs.remote.Service.spf.sFile.cherFileMonFieldfMrefLFIconl.List"
      ],
      [
        "java.util.ArrayList",
        "java.util.List.ArrayList",
        "java.awutil.ArrayList",
        "java.util.concurrent.ArrayList",
        "com.android.tools.j.ac.util.ArrayList",
        "com.android.provfs.dev.core.util.ArrayList",
        "com.android.orgfs.Windows.erences.placel.ArrayList",
        "java.n.resfs.colerences.ArrayList",
        "com.android.resfs.SubPrefResource.ArrayList",
        "com.google.orgfs.dev.core.utilPath.SuballReference.ypes.ArrayList",
        "com.google.orgfs.dev.core.linkPath.PrefCachePrefJava.mer.ArrayList",
        "com.google.orgfs.dev.core.APath.mref.View.mbolPath.ArrayList",
        "com.google.orgfs.remote.core.spf.TypeumSub.ViewnameputedPath.ArrayList",
        "com.sun.orgfs.remote.core.spf.keysfs.cUSchedPathPathRefKey.ArrayList",
        "com.sun.orgfs.remote.core.spf.keysfs.ClassSystemntSubDataPath.ArrayList",
        "com.sun.orgfs.remote.core.spf.keysFile.cUcherPathPathObjectplImpl.ArrayList",
        "com.sun.jfs.dev.Ut.spf.sFile.coreFilePathixDataRefersInedxtedlistl.ArrayList",
        "com.android.orgfs.remote.core.spf.ForwardFile.cFileMPathToclassimeDataicalr.ArrayList",
        "com.android.orgfs.remote.core.spf.ForwardFile.coreFileSixToachePathManyDataarchyl.ArrayList",
        "com.android.orgfs.dev.core.spf.sFile.cFileSixfacheClient.s.Listl.ArrayList"
      ]
    ]
  },
  {
    "originalCode": "private static int[] createKey(Preferences root, int hkey, String key)",
    "FQNCode": "private static int[] createKey(<MASK>.Preferences root, int hkey, String key)",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.util.fs.Preferences",
        "java.prefs.Preferences",
        "java.util.prefs.sperences.Preferences",
        "java.util.prefs.fs.Preferences",
        "java.util.pre.fs.Preferences",
        "java.util.prefs.WindowsPrefAttributes.Preferences",
        "java.util.prefs.TimePrefsputil.Preferences",
        "com.util.prefs.ferencePreferpolicypacePrefutil.Preferences",
        "com.util.formatfs.TimePref.policy.PrefPrefNamesPrefManager.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "private static void writeStringValue(Preferences root, int hkey, String key, String valueName, String value)",
    "FQNCode": "private static void writeStringValue(<MASK>.Preferences root, int hkey, String key, String valueName, String value)",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.prefs.Preferences",
        "java.util.fs.Preferences",
        "java.util.prefs.sperences.Preferences",
        "java.util.pre.fs.Preferences",
        "java.util.prefs.WindowsPrefAttributes.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException",
        "java.rlang.InvocationTargetException",
        "com.sun.corba.sn.impl.rity.InvocationTargetException",
        "com.sun.corba.se.impl.log.qlil.reflect.InvocationTargetException",
        "sun.n.jCOR.internal.able.InvocationTargetException"
      ]
    ]
  }
]