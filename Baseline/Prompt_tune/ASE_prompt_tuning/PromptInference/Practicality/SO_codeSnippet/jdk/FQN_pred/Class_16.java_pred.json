[
  {
    "originalCode": "private static final Preferences userRoot = Preferences.userRoot();",
    "FQNCode": "private static final <MASK>.Preferences userRoot = <MASK>.Preferences.userRoot();",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.prefs.Preferences"
      ],
      [
        "java.util.prefs.Preferences",
        "java.util.prefs.Preferences.Preferences",
        "java.util.Preferences"
      ]
    ]
  },
  {
    "originalCode": "private static final Preferences systemRoot = Preferences.systemRoot();",
    "FQNCode": "private static final <MASK>.Preferences systemRoot = <MASK>.Preferences.systemRoot();",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.util.prefs.Preferences.Preferences"
      ],
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.util.prefs.Preferences.Preferences"
      ]
    ]
  },
  {
    "originalCode": "private static final Class<? extends Preferences> userClass = userRoot.getClass();",
    "FQNCode": "private static final Class<? extends <MASK>.Preferences> userClass = userRoot.getClass();",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.preference.Preferences"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regOpenKey;",
    "FQNCode": "private static final <MASK>.Method regOpenKey;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regCloseKey;",
    "FQNCode": "private static final <MASK>.Method regCloseKey;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.langreflect.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regQueryValueEx;",
    "FQNCode": "private static final <MASK>.Method regQueryValueEx;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regEnumValue;",
    "FQNCode": "private static final <MASK>.Method regEnumValue;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.reflect.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regQueryInfoKey;",
    "FQNCode": "private static final <MASK>.Method regQueryInfoKey;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regEnumKeyEx;",
    "FQNCode": "private static final <MASK>.Method regEnumKeyEx;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regCreateKeyEx;",
    "FQNCode": "private static final <MASK>.Method regCreateKeyEx;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regSetValueEx;",
    "FQNCode": "private static final <MASK>.Method regSetValueEx;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.Method.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regDeleteKey;",
    "FQNCode": "private static final <MASK>.Method regDeleteKey;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.reflect.Method"
      ]
    ]
  },
  {
    "originalCode": "private static final Method regDeleteValue;",
    "FQNCode": "private static final <MASK>.Method regDeleteValue;",
    "fqnToken": [
      [
        "java.lang.reflect.Method",
        "java.lang.Method",
        "java.lang.reflect.reflect.Method"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "public static Map<String, String> readStringValues(int hkey, String key)",
    "FQNCode": "public static <MASK>.Map<String, String> readStringValues(int hkey, String key)",
    "fqnToken": [
      [
        "java.util.Map",
        "java.util.Map.Map",
        "java.util.Hashtable.Map"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "public static List<String> readStringSubKeys(int hkey, String key)",
    "FQNCode": "public static <MASK>.List<String> readStringSubKeys(int hkey, String key)",
    "fqnToken": [
      [
        "java.util.List",
        "java.util.util.List",
        "java.utilutil.List"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "private static int deleteValue(Preferences root, int hkey, String key, String value)",
    "FQNCode": "private static int deleteValue(<MASK>.Preferences root, int hkey, String key, String value)",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.security.util.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "private static int deleteKey(Preferences root, int hkey, String key)",
    "FQNCode": "private static int deleteKey(<MASK>.Preferences root, int hkey, String key)",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.util.fs.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "private static String readString(Preferences root, int hkey, String key, String value)",
    "FQNCode": "private static String readString(<MASK>.Preferences root, int hkey, String key, String value)",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.prefs.Preferences",
        "java.util.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "private static Map<String, String> readStringValues(Preferences root, int hkey, String key)",
    "FQNCode": "private static <MASK>.Map<String, String> readStringValues(<MASK>.Preferences root, int hkey, String key)",
    "fqnToken": [
      [
        "java.util.Map",
        "java.util.Map.Map",
        "java.util.Profs.Map"
      ],
      [
        "java.util.Preferences",
        "java.util.prefs.Preferences",
        "java.util.util.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "HashMap<String, String> results = new HashMap<String, String>();",
    "FQNCode": "<MASK>.HashMap<String, String> results = new <MASK>.HashMap<String, String>();",
    "fqnToken": [
      [
        "java.util.HashMap",
        "java.util.Map.HashMap",
        "java.util.Profs.HashMap"
      ],
      [
        "java.util.HashMap",
        "java.util.Map.HashMap",
        "java.util.confs.HashMap"
      ]
    ]
  },
  {
    "originalCode": "private static List<String> readStringSubKeys(Preferences root, int hkey, String key)",
    "FQNCode": "private static <MASK>.List<String> readStringSubKeys(<MASK>.Preferences root, int hkey, String key)",
    "fqnToken": [
      [
        "java.util.List",
        "java.util.util.List",
        "java.util.prefs.Preerences.List"
      ],
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.preference.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "List<String> results = new ArrayList<String>();",
    "FQNCode": "<MASK>.List<String> results = new <MASK>.ArrayList<String>();",
    "fqnToken": [
      [
        "java.util.List",
        "java.util.reflect.List",
        "java.utilutil.List"
      ],
      [
        "java.util.ArrayList",
        "java.util.List.ArrayList",
        "java.awutil.ArrayList"
      ]
    ]
  },
  {
    "originalCode": "private static int[] createKey(Preferences root, int hkey, String key)",
    "FQNCode": "private static int[] createKey(<MASK>.Preferences root, int hkey, String key)",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.util.fs.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  },
  {
    "originalCode": "private static void writeStringValue(Preferences root, int hkey, String key, String valueName, String value)",
    "FQNCode": "private static void writeStringValue(<MASK>.Preferences root, int hkey, String key, String valueName, String value)",
    "fqnToken": [
      [
        "java.util.prefs.Preferences",
        "java.util.Preferences",
        "java.prefs.Preferences"
      ]
    ]
  },
  {
    "originalCode": "throws IllegalArgumentException, IllegalAccessException, InvocationTargetException",
    "FQNCode": "throws IllegalArgumentException, IllegalAccessException, <MASK>.InvocationTargetException",
    "fqnToken": [
      [
        "java.lang.InvocationTargetException",
        "java.lang.reflect.InvocationTargetException",
        "java.lang.annotation.InvocationTargetException"
      ]
    ]
  }
]