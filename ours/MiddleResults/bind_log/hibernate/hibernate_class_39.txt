echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/hibernate_class_39.java
Expect check=369
Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: hibernate_class_39
Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Did not find solution for node: @Transactional with type Type12
Did not find solution for node: Transactional with type Type12
For node: @SuppressWarnings("unchecked") expected fqn: java.lang.SuppressWarnings with type: Type14 got: java.lang.SuppressWarnings
For node: SuppressWarnings expected fqn: java.lang.SuppressWarnings with type: Type14 got: java.lang.SuppressWarnings
Did not find solution for node: "unchecked" with type Type13
Did not find solution for node: GenericDaoImpl with type Type1
Cannot find matching typeVariable for: T
Cannot find matching typeVariable for: T
Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: ID extends Serializable
Cannot find matching typeVariable for: ID
Cannot find matching typeVariable for: ID extends Serializable
Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

For node: Serializable expected fqn: java.io.Serializable with type: Type15 got: java.io.Serializable
For node: Serializable expected fqn: java.io.Serializable with type: Type15 got: java.io.Serializable
Did not find solution for node: GenericDao<T,ID> with type Type5=Type2<Type3,Type4>
Did not find solution for node: GenericDao with type Type2
Did not find solution for node: GenericDao with type Type2
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Did not find solution for node: ID with type Type4
Did not find solution for node: ID with type Type4
For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: sessionFactory
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: sessionFactory
Cannot find matching typeVariable for: private SessionFactory sessionFactory;

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

For node: void expected fqn: void with type: Type9 got: void
Cannot find matching typeVariable for: setSessionFactory
Cannot find matching typeVariable for: public void setSessionFactory(final SessionFactory sessionFactory){
  this.sessionFactory=sessionFactory;
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: final SessionFactory sessionFactory
For node: final SessionFactory sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
For node: SessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
For node: this.sessionFactory=sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
For node: this.sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: sessionFactory
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: sessionFactory
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
Did not find solution for node: ID with type Type4
Did not find solution for node: ID with type Type4
Cannot find matching typeVariable for: create
Cannot find matching typeVariable for: public ID create(final T newInstance){
  ID id=null;
  final Session session=sessionFactory.openSession();
  final Transaction tx=session.beginTransaction();
  try {
    id=(ID)session.save(newInstance);
    tx.commit();
    session.close();
  }
 catch (  final Exception e) {
    if (tx != null) {
      tx.rollback();
    }
    e.printStackTrace();
  }
 finally {
    if (session.isOpen()) {
      session.close();
    }
  }
  return id;
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: final T newInstance
For node: final T newInstance expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: newInstance expected fqn: T with type: Type3 got: java.lang.Object
Did not find solution for node: ID with type Type4
Did not find solution for node: ID with type Type4
Cannot find matching typeVariable for: id=null
Did not find solution for node: id=null with type Type4
Did not find solution for node: id with type Type4
Did not find solution for node: null with type Type16
Did not find solution for node: Session with type Type17
Did not find solution for node: Session with type Type17
Cannot find matching typeVariable for: session=sessionFactory.openSession()
Did not find solution for node: session=sessionFactory.openSession() with type Type17
Did not find solution for node: session with type Type17
Did not find solution for node: sessionFactory.openSession() with type Type18
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: openSession
Did not find solution for node: openSession with type Type18
Did not find solution for node: Transaction with type Type20
Did not find solution for node: Transaction with type Type20
Cannot find matching typeVariable for: tx=session.beginTransaction()
Did not find solution for node: tx=session.beginTransaction() with type Type20
Did not find solution for node: tx with type Type20
Did not find solution for node: session.beginTransaction() with type Type21
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: beginTransaction
Did not find solution for node: beginTransaction with type Type21
Did not find solution for node: id=(ID)session.save(newInstance) with type Type4
Did not find solution for node: id with type Type4
Did not find solution for node: (ID)session.save(newInstance) with type Type4
Did not find solution for node: ID with type Type4
Did not find solution for node: ID with type Type4
Did not find solution for node: session.save(newInstance) with type Type23
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: save
Did not find solution for node: save with type Type23
For node: newInstance expected fqn: T with type: Type3 got: java.lang.Object
For node: tx.commit() expected fqn: void with type: Type26 got: void
Did not find solution for node: tx with type Type20
Cannot find matching typeVariable for: commit
For node: commit expected fqn: void with type: Type26 got: void
Did not find solution for node: session.close() with type Type28
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: close
Did not find solution for node: close with type Type28
Cannot find matching typeVariable for: final Exception e
For node: final Exception e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: tx != null expected fqn: boolean with type: Type10 got: boolean
Did not find solution for node: tx with type Type20
Did not find solution for node: null with type Type31
For node: tx.rollback() expected fqn: void with type: Type32 got: void
Did not find solution for node: tx with type Type20
Cannot find matching typeVariable for: rollback
For node: rollback expected fqn: void with type: Type32 got: void
For node: e.printStackTrace() expected fqn: void with type: Type34 got: void
For node: e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
Cannot find matching typeVariable for: printStackTrace
For node: printStackTrace expected fqn: void with type: Type34 got: void
Did not find solution for node: session.isOpen() with type Type36
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: isOpen
Did not find solution for node: isOpen with type Type36
Did not find solution for node: session.close() with type Type29
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: close
Did not find solution for node: close with type Type29
Did not find solution for node: id with type Type4
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: read
Cannot find matching typeVariable for: public T read(final ID primaryKey){
  T id=null;
  final Session session=sessionFactory.openSession();
  final Transaction tx=session.beginTransaction();
  try {
    id=(T)session.get("aaa",primaryKey);
    tx.commit();
    session.close();
  }
 catch (  final Exception e) {
    if (tx != null) {
      tx.rollback();
    }
    e.printStackTrace();
  }
 finally {
    if (session.isOpen()) {
      session.close();
    }
  }
  return id;
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: final ID primaryKey
Did not find solution for node: final ID primaryKey with type Type4
Did not find solution for node: ID with type Type4
Did not find solution for node: ID with type Type4
Did not find solution for node: primaryKey with type Type4
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: id=null
For node: id=null expected fqn: T with type: Type3 got: java.lang.Object
For node: id expected fqn: T with type: Type3 got: java.lang.Object
For node: null expected fqn: null with type: Type38 got: java.lang.Object
Did not find solution for node: Session with type Type17
Did not find solution for node: Session with type Type17
Cannot find matching typeVariable for: session=sessionFactory.openSession()
Did not find solution for node: session=sessionFactory.openSession() with type Type17
Did not find solution for node: session with type Type17
Did not find solution for node: sessionFactory.openSession() with type Type19
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: openSession
Did not find solution for node: openSession with type Type19
Did not find solution for node: Transaction with type Type20
Did not find solution for node: Transaction with type Type20
Cannot find matching typeVariable for: tx=session.beginTransaction()
Did not find solution for node: tx=session.beginTransaction() with type Type20
Did not find solution for node: tx with type Type20
Did not find solution for node: session.beginTransaction() with type Type22
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: beginTransaction
Did not find solution for node: beginTransaction with type Type22
For node: id=(T)session.get("aaa",primaryKey) expected fqn: T with type: Type3 got: java.lang.Object
For node: id expected fqn: T with type: Type3 got: java.lang.Object
For node: (T)session.get("aaa",primaryKey) expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Did not find solution for node: session.get("aaa",primaryKey) with type Type39
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: get
Did not find solution for node: get with type Type39
Did not find solution for node: "aaa" with type Type13
Did not find solution for node: primaryKey with type Type4
Did not find solution for node: tx.commit() with type Type27
Did not find solution for node: tx with type Type20
Cannot find matching typeVariable for: commit
Did not find solution for node: commit with type Type27
Did not find solution for node: session.close() with type Type29
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: close
Did not find solution for node: close with type Type29
Cannot find matching typeVariable for: final Exception e
For node: final Exception e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: tx != null expected fqn: boolean with type: Type10 got: boolean
Did not find solution for node: tx with type Type20
Did not find solution for node: null with type Type43
Did not find solution for node: tx.rollback() with type Type33
Did not find solution for node: tx with type Type20
Cannot find matching typeVariable for: rollback
Did not find solution for node: rollback with type Type33
For node: e.printStackTrace() expected fqn: void with type: Type35 got: void
For node: e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
Cannot find matching typeVariable for: printStackTrace
For node: printStackTrace expected fqn: void with type: Type35 got: void
Did not find solution for node: session.isOpen() with type Type37
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: isOpen
Did not find solution for node: isOpen with type Type37
Did not find solution for node: session.close() with type Type29
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: close
Did not find solution for node: close with type Type29
For node: id expected fqn: T with type: Type3 got: java.lang.Object
For node: void expected fqn: void with type: Type9 got: void
Cannot find matching typeVariable for: update
Cannot find matching typeVariable for: public void update(final T transientObject){
  final Session session=sessionFactory.openSession();
  final Transaction tx=session.beginTransaction();
  try {
    session.saveOrUpdate(transientObject);
    tx.commit();
    session.close();
  }
 catch (  final Exception e) {
    if (tx != null) {
      tx.rollback();
    }
    e.printStackTrace();
  }
 finally {
    if (session.isOpen()) {
      session.close();
    }
  }
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: final T transientObject
For node: final T transientObject expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: transientObject expected fqn: T with type: Type3 got: java.lang.Object
Did not find solution for node: Session with type Type17
Did not find solution for node: Session with type Type17
Cannot find matching typeVariable for: session=sessionFactory.openSession()
Did not find solution for node: session=sessionFactory.openSession() with type Type17
Did not find solution for node: session with type Type17
Did not find solution for node: sessionFactory.openSession() with type Type19
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: openSession
Did not find solution for node: openSession with type Type19
Did not find solution for node: Transaction with type Type20
Did not find solution for node: Transaction with type Type20
Cannot find matching typeVariable for: tx=session.beginTransaction()
Did not find solution for node: tx=session.beginTransaction() with type Type20
Did not find solution for node: tx with type Type20
Did not find solution for node: session.beginTransaction() with type Type22
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: beginTransaction
Did not find solution for node: beginTransaction with type Type22
Did not find solution for node: session.saveOrUpdate(transientObject) with type Type44
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: saveOrUpdate
Did not find solution for node: saveOrUpdate with type Type44
For node: transientObject expected fqn: T with type: Type3 got: java.lang.Object
Did not find solution for node: tx.commit() with type Type27
Did not find solution for node: tx with type Type20
Cannot find matching typeVariable for: commit
Did not find solution for node: commit with type Type27
Did not find solution for node: session.close() with type Type29
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: close
Did not find solution for node: close with type Type29
Cannot find matching typeVariable for: final Exception e
For node: final Exception e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: tx != null expected fqn: boolean with type: Type10 got: boolean
Did not find solution for node: tx with type Type20
Did not find solution for node: null with type Type47
Did not find solution for node: tx.rollback() with type Type33
Did not find solution for node: tx with type Type20
Cannot find matching typeVariable for: rollback
Did not find solution for node: rollback with type Type33
For node: e.printStackTrace() expected fqn: void with type: Type35 got: void
For node: e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
Cannot find matching typeVariable for: printStackTrace
For node: printStackTrace expected fqn: void with type: Type35 got: void
Did not find solution for node: session.isOpen() with type Type37
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: isOpen
Did not find solution for node: isOpen with type Type37
Did not find solution for node: session.close() with type Type29
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: close
Did not find solution for node: close with type Type29
For node: void expected fqn: void with type: Type9 got: void
Cannot find matching typeVariable for: delete
Cannot find matching typeVariable for: public void delete(final T persistentObject){
  final Session session=sessionFactory.openSession();
  final Transaction tx=session.beginTransaction();
  try {
    session.delete(persistentObject);
    tx.commit();
    session.close();
  }
 catch (  final Exception e) {
    if (tx != null) {
      tx.rollback();
    }
    e.printStackTrace();
  }
 finally {
    if (session.isOpen()) {
      session.close();
    }
  }
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: final T persistentObject
For node: final T persistentObject expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: persistentObject expected fqn: T with type: Type3 got: java.lang.Object
Did not find solution for node: Session with type Type17
Did not find solution for node: Session with type Type17
Cannot find matching typeVariable for: session=sessionFactory.openSession()
Did not find solution for node: session=sessionFactory.openSession() with type Type17
Did not find solution for node: session with type Type17
Did not find solution for node: sessionFactory.openSession() with type Type19
For node: sessionFactory expected fqn: org.hibernate.SessionFactory with type: Type11 got: org.hibernate.SessionFactory
Cannot find matching typeVariable for: openSession
Did not find solution for node: openSession with type Type19
Did not find solution for node: Transaction with type Type20
Did not find solution for node: Transaction with type Type20
Cannot find matching typeVariable for: tx=session.beginTransaction()
Did not find solution for node: tx=session.beginTransaction() with type Type20
Did not find solution for node: tx with type Type20
Did not find solution for node: session.beginTransaction() with type Type22
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: beginTransaction
Did not find solution for node: beginTransaction with type Type22
Did not find solution for node: session.delete(persistentObject) with type Type48
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: delete
Did not find solution for node: delete with type Type48
For node: persistentObject expected fqn: T with type: Type3 got: java.lang.Object
Did not find solution for node: tx.commit() with type Type27
Did not find solution for node: tx with type Type20
Cannot find matching typeVariable for: commit
Did not find solution for node: commit with type Type27
Did not find solution for node: session.close() with type Type29
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: close
Did not find solution for node: close with type Type29
Cannot find matching typeVariable for: final Exception e
For node: final Exception e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
For node: tx != null expected fqn: boolean with type: Type10 got: boolean
Did not find solution for node: tx with type Type20
Did not find solution for node: null with type Type51
Did not find solution for node: tx.rollback() with type Type33
Did not find solution for node: tx with type Type20
Cannot find matching typeVariable for: rollback
Did not find solution for node: rollback with type Type33
For node: e.printStackTrace() expected fqn: void with type: Type35 got: void
For node: e expected fqn: java.lang.Exception with type: Type30 got: java.lang.Exception
Cannot find matching typeVariable for: printStackTrace
For node: printStackTrace expected fqn: void with type: Type35 got: void
Did not find solution for node: session.isOpen() with type Type37
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: isOpen
Did not find solution for node: isOpen with type Type37
Did not find solution for node: session.close() with type Type29
Did not find solution for node: session with type Type17
Cannot find matching typeVariable for: close
Did not find solution for node: close with type Type29
For node: @Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: boolean expected fqn: boolean with type: Type10 got: boolean
Cannot find matching typeVariable for: exists
Cannot find matching typeVariable for: @Override public boolean exists(ID arg0){
  return false;
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: ID arg0
Did not find solution for node: ID arg0 with type Type4
Did not find solution for node: ID with type Type4
Did not find solution for node: ID with type Type4
Did not find solution for node: arg0 with type Type4
For node: false expected fqn: boolean with type: Type10 got: boolean
For node: @Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: List<T> expected fqn: java.util.List<T> with type: Type8=Type7<Type3> got: java.util.List<java.lang.Object>
For node: List expected fqn: java.util.List<T> with type: Type7 got: java.util.List
For node: List expected fqn: java.util.List<T> with type: Type7 got: java.util.List
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: findByNamedQuery
Cannot find matching typeVariable for: @Override public List<T> findByNamedQuery(String arg0,Map<String,Object> arg1){
  return null;
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: String arg0
Did not find solution for node: String arg0 with type Type13
Did not find solution for node: String with type Type13
Did not find solution for node: String with type Type13
Did not find solution for node: arg0 with type Type13
Cannot find matching typeVariable for: Map<String,Object> arg1
Did not find solution for node: Map<String,Object> arg1 with type Type55=Type53<Type13,Type54>
Did not find solution for node: Map<String,Object> with type Type55=Type53<Type13,Type54>
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.Object> with type: Type53 got: java.util.Map
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.Object> with type: Type53 got: java.util.Map
Did not find solution for node: String with type Type13
Did not find solution for node: String with type Type13
For node: Object expected fqn: java.lang.Object with type: Type54 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type54 got: java.lang.Object
Did not find solution for node: arg1 with type Type55=Type53<Type13,Type54>
For node: null expected fqn: null with type: Type56 got: java.util.List
For node: @Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: get
Cannot find matching typeVariable for: @Override public T get(ID arg0){
  return null;
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: ID arg0
Did not find solution for node: ID arg0 with type Type4
Did not find solution for node: ID with type Type4
Did not find solution for node: ID with type Type4
Did not find solution for node: arg0 with type Type4
For node: null expected fqn: null with type: Type57 got: java.lang.Object
For node: @Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: List<T> expected fqn: java.util.List<T> with type: Type8=Type7<Type3> got: java.util.List<java.lang.Object>
For node: List expected fqn: java.util.List<T> with type: Type7 got: java.util.List
For node: List expected fqn: java.util.List<T> with type: Type7 got: java.util.List
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: getAll
Cannot find matching typeVariable for: @Override public List<T> getAll(){
  return null;
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

For node: null expected fqn: null with type: Type58 got: java.util.List
For node: @Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: List<T> expected fqn: java.util.List<T> with type: Type8=Type7<Type3> got: java.util.List<java.lang.Object>
For node: List expected fqn: java.util.List<T> with type: Type7 got: java.util.List
For node: List expected fqn: java.util.List<T> with type: Type7 got: java.util.List
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: getAllDistinct
Cannot find matching typeVariable for: @Override public List<T> getAllDistinct(){
  return null;
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

For node: null expected fqn: null with type: Type59 got: java.util.List
For node: @Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: void expected fqn: void with type: Type9 got: void
Cannot find matching typeVariable for: reindex
Cannot find matching typeVariable for: @Override public void reindex(){
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

For node: @Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: void expected fqn: void with type: Type9 got: void
Cannot find matching typeVariable for: reindexAll
Cannot find matching typeVariable for: @Override public void reindexAll(boolean arg0){
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: boolean arg0
For node: boolean arg0 expected fqn: boolean with type: Type10 got: boolean
For node: boolean expected fqn: boolean with type: Type10 got: boolean
For node: arg0 expected fqn: boolean with type: Type10 got: boolean
For node: @Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: void expected fqn: void with type: Type9 got: void
Cannot find matching typeVariable for: remove
Cannot find matching typeVariable for: @Override public void remove(T arg0){
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: T arg0
For node: T arg0 expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: arg0 expected fqn: T with type: Type3 got: java.lang.Object
For node: @Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: void expected fqn: void with type: Type9 got: void
Cannot find matching typeVariable for: remove
Cannot find matching typeVariable for: @Override public void remove(ID arg0){
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: ID arg0
Did not find solution for node: ID arg0 with type Type4
Did not find solution for node: ID with type Type4
Did not find solution for node: ID with type Type4
Did not find solution for node: arg0 with type Type4
For node: @Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: save
Cannot find matching typeVariable for: @Override public T save(T arg0){
  return null;
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: T arg0
For node: T arg0 expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: arg0 expected fqn: T with type: Type3 got: java.lang.Object
For node: null expected fqn: null with type: Type60 got: java.lang.Object
For node: @Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type52 got: java.lang.Override
For node: List<T> expected fqn: java.util.List<T> with type: Type8=Type7<Type3> got: java.util.List<java.lang.Object>
For node: List expected fqn: java.util.List<T> with type: Type7 got: java.util.List
For node: List expected fqn: java.util.List<T> with type: Type7 got: java.util.List
For node: T expected fqn: T with type: Type3 got: java.lang.Object
For node: T expected fqn: T with type: Type3 got: java.lang.Object
Cannot find matching typeVariable for: search
Cannot find matching typeVariable for: @Override public List<T> search(String arg0) throws SearchException {
  return null;
}

Cannot find matching typeVariable for: @Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
  private SessionFactory sessionFactory;
  public void setSessionFactory(  final SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  public ID create(  final T newInstance){
    ID id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(ID)session.save(newInstance);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public T read(  final ID primaryKey){
    T id=null;
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      id=(T)session.get("aaa",primaryKey);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
    return id;
  }
  public void update(  final T transientObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.saveOrUpdate(transientObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  public void delete(  final T persistentObject){
    final Session session=sessionFactory.openSession();
    final Transaction tx=session.beginTransaction();
    try {
      session.delete(persistentObject);
      tx.commit();
      session.close();
    }
 catch (    final Exception e) {
      if (tx != null) {
        tx.rollback();
      }
      e.printStackTrace();
    }
 finally {
      if (session.isOpen()) {
        session.close();
      }
    }
  }
  @Override public boolean exists(  ID arg0){
    return false;
  }
  @Override public List<T> findByNamedQuery(  String arg0,  Map<String,Object> arg1){
    return null;
  }
  @Override public T get(  ID arg0){
    return null;
  }
  @Override public List<T> getAll(){
    return null;
  }
  @Override public List<T> getAllDistinct(){
    return null;
  }
  @Override public void reindex(){
  }
  @Override public void reindexAll(  boolean arg0){
  }
  @Override public void remove(  T arg0){
  }
  @Override public void remove(  ID arg0){
  }
  @Override public T save(  T arg0){
    return null;
  }
  @Override public List<T> search(  String arg0) throws SearchException {
    return null;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.appfuse.dao.GenericDao;
import org.appfuse.dao.SearchException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.transaction.annotation.Transactional;
public class hibernate_class_39 {
@Transactional @SuppressWarnings("unchecked") public class GenericDaoImpl<T,ID extends Serializable> implements GenericDao<T,ID> {
    private SessionFactory sessionFactory;
    public void setSessionFactory(    final SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    public ID create(    final T newInstance){
      ID id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(ID)session.save(newInstance);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public T read(    final ID primaryKey){
      T id=null;
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        id=(T)session.get("aaa",primaryKey);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
      return id;
    }
    public void update(    final T transientObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.saveOrUpdate(transientObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    public void delete(    final T persistentObject){
      final Session session=sessionFactory.openSession();
      final Transaction tx=session.beginTransaction();
      try {
        session.delete(persistentObject);
        tx.commit();
        session.close();
      }
 catch (      final Exception e) {
        if (tx != null) {
          tx.rollback();
        }
        e.printStackTrace();
      }
 finally {
        if (session.isOpen()) {
          session.close();
        }
      }
    }
    @Override public boolean exists(    ID arg0){
      return false;
    }
    @Override public List<T> findByNamedQuery(    String arg0,    Map<String,Object> arg1){
      return null;
    }
    @Override public T get(    ID arg0){
      return null;
    }
    @Override public List<T> getAll(){
      return null;
    }
    @Override public List<T> getAllDistinct(){
      return null;
    }
    @Override public void reindex(){
    }
    @Override public void reindexAll(    boolean arg0){
    }
    @Override public void remove(    T arg0){
    }
    @Override public void remove(    ID arg0){
    }
    @Override public T save(    T arg0){
      return null;
    }
    @Override public List<T> search(    String arg0) throws SearchException {
      return null;
    }
  }
}

Cannot find matching typeVariable for: String arg0
Did not find solution for node: String arg0 with type Type13
Did not find solution for node: String with type Type13
Did not find solution for node: String with type Type13
Did not find solution for node: arg0 with type Type13
Did not find solution for node: SearchException with type Type61
Did not find solution for node: SearchException with type Type61
For node: null expected fqn: null with type: Type62 got: java.util.List
{Checked=345, Analyzed=161, Unsolved=184, Incorrect=70, Correct=91}
=Assignment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
=CastExpression: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
=MarkerAnnotation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ParameterizedType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=46, Analyzed=26, Unsolved=20, Incorrect=26, Correct=0}
=SimpleType: {Checked=25, Analyzed=15, Unsolved=10, Incorrect=15, Correct=0}
=SingleVariableDeclaration: {Checked=9, Analyzed=5, Unsolved=4, Incorrect=5, Correct=0}
=ThisExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
boolean=BooleanLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=InfixExpression: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
boolean=MethodInvocation: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
boolean=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=SimpleName: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=0, Correct=1}
boolean=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
java=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ParameterizedType: {Checked=5, Analyzed=4, Unsolved=1, Incorrect=4, Correct=0}
java=SimpleName: {Checked=39, Analyzed=31, Unsolved=8, Incorrect=5, Correct=26}
java=SimpleType: {Checked=14, Analyzed=11, Unsolved=3, Incorrect=5, Correct=6}
java=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SingleVariableDeclaration: {Checked=7, Analyzed=4, Unsolved=3, Incorrect=0, Correct=4}
java=StringLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
null=NullLiteral: {Checked=12, Analyzed=7, Unsolved=5, Incorrect=7, Correct=0}
org.hibernate.=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=FieldAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=MethodInvocation: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
org.hibernate.=SimpleName: {Checked=65, Analyzed=9, Unsolved=56, Incorrect=0, Correct=9}
org.hibernate.=SimpleType: {Checked=10, Analyzed=2, Unsolved=8, Incorrect=0, Correct=2}
org.hibernate.=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=VariableDeclarationFragment: {Checked=9, Analyzed=1, Unsolved=8, Incorrect=0, Correct=1}
void=MethodInvocation: {Checked=22, Analyzed=6, Unsolved=16, Incorrect=0, Correct=6}
void=PrimitiveType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
void=SimpleName: {Checked=22, Analyzed=6, Unsolved=16, Incorrect=0, Correct=6}
Total stats
{Checked=345, Analyzed=161, Unsolved=184, Incorrect=70, Correct=91}
=Assignment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
=CastExpression: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
=MarkerAnnotation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ParameterizedType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=46, Analyzed=26, Unsolved=20, Incorrect=26, Correct=0}
=SimpleType: {Checked=25, Analyzed=15, Unsolved=10, Incorrect=15, Correct=0}
=SingleVariableDeclaration: {Checked=9, Analyzed=5, Unsolved=4, Incorrect=5, Correct=0}
=ThisExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
boolean=BooleanLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=InfixExpression: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
boolean=MethodInvocation: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
boolean=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=SimpleName: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=0, Correct=1}
boolean=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
java=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ParameterizedType: {Checked=5, Analyzed=4, Unsolved=1, Incorrect=4, Correct=0}
java=SimpleName: {Checked=39, Analyzed=31, Unsolved=8, Incorrect=5, Correct=26}
java=SimpleType: {Checked=14, Analyzed=11, Unsolved=3, Incorrect=5, Correct=6}
java=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SingleVariableDeclaration: {Checked=7, Analyzed=4, Unsolved=3, Incorrect=0, Correct=4}
java=StringLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
null=NullLiteral: {Checked=12, Analyzed=7, Unsolved=5, Incorrect=7, Correct=0}
org.hibernate.=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=FieldAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=MethodInvocation: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
org.hibernate.=SimpleName: {Checked=65, Analyzed=9, Unsolved=56, Incorrect=0, Correct=9}
org.hibernate.=SimpleType: {Checked=10, Analyzed=2, Unsolved=8, Incorrect=0, Correct=2}
org.hibernate.=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=VariableDeclarationFragment: {Checked=9, Analyzed=1, Unsolved=8, Incorrect=0, Correct=1}
void=MethodInvocation: {Checked=22, Analyzed=6, Unsolved=16, Incorrect=0, Correct=6}
void=PrimitiveType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
void=SimpleName: {Checked=22, Analyzed=6, Unsolved=16, Incorrect=0, Correct=6}
,Assignment,1,2,0,1,1
,CastExpression,1,2,0,1,1
,MarkerAnnotation,0,1,0,0,1
,ParameterizedType,0,1,0,0,1
,SimpleName,26,46,0,26,20
,SimpleType,15,25,0,15,10
,SingleVariableDeclaration,5,9,0,5,4
,ThisExpression,0,1,0,0,1
,VariableDeclarationFragment,1,2,0,1,1
boolean,BooleanLiteral,1,1,1,0,0
boolean,InfixExpression,4,4,4,0,0
boolean,MethodInvocation,0,4,0,0,4
boolean,PrimitiveType,2,2,2,0,0
boolean,SimpleName,1,5,1,0,4
boolean,SingleVariableDeclaration,1,1,1,0,0
java,MarkerAnnotation,11,11,11,0,0
java,MethodInvocation,0,2,0,0,2
java,ParameterizedType,4,5,0,4,1
java,SimpleName,31,39,26,5,8
java,SimpleType,11,14,6,5,3
java,SingleMemberAnnotation,1,1,1,0,0
java,SingleVariableDeclaration,4,7,4,0,3
java,StringLiteral,0,2,0,0,2
null,NullLiteral,7,12,0,7,5
org.hibernate.,Assignment,1,1,1,0,0
org.hibernate.,FieldAccess,1,1,1,0,0
org.hibernate.,MethodInvocation,0,8,0,0,8
org.hibernate.,SimpleName,9,65,9,0,56
org.hibernate.,SimpleType,2,10,2,0,8
org.hibernate.,SingleVariableDeclaration,1,1,1,0,0
org.hibernate.,VariableDeclarationFragment,1,9,1,0,8
void,MethodInvocation,6,22,6,0,16
void,PrimitiveType,7,7,7,0,0
void,SimpleName,6,22,6,0,16
