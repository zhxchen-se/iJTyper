echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/hibernate_class_3.java
Expect check=311
Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: hibernate_class_3
Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Did not find solution for node: SQLiteDialect with type Type1
For node: Dialect expected fqn: org.hibernate.dialect.Dialect with type: Type2 got: org.hibernate.dialect.Dialect
For node: Dialect expected fqn: org.hibernate.dialect.Dialect with type: Type2 got: org.hibernate.dialect.Dialect
Cannot find matching typeVariable for: SQLiteDialect
Cannot find matching typeVariable for: public SQLiteDialect(){
  super();
  registerColumnType(Types.BIT,"integer");
  registerColumnType(Types.TINYINT,"tinyint");
  registerColumnType(Types.SMALLINT,"smallint");
  registerColumnType(Types.INTEGER,"integer");
  registerColumnType(Types.BIGINT,"bigint");
  registerColumnType(Types.FLOAT,"float");
  registerColumnType(Types.REAL,"real");
  registerColumnType(Types.DOUBLE,"double");
  registerColumnType(Types.NUMERIC,"numeric");
  registerColumnType(Types.DECIMAL,"decimal");
  registerColumnType(Types.CHAR,"char");
  registerColumnType(Types.VARCHAR,"varchar");
  registerColumnType(Types.LONGVARCHAR,"longvarchar");
  registerColumnType(Types.DATE,"date");
  registerColumnType(Types.TIME,"time");
  registerColumnType(Types.TIMESTAMP,"timestamp");
  registerColumnType(Types.BINARY,"blob");
  registerColumnType(Types.VARBINARY,"blob");
  registerColumnType(Types.LONGVARBINARY,"blob");
  registerColumnType(Types.BLOB,"blob");
  registerColumnType(Types.CLOB,"clob");
  registerColumnType(Types.BOOLEAN,"integer");
  registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
  registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
  registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
  registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: registerColumnType(Types.BIT,"integer") expected fqn: void with type: Type62 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type62 got: void
Cannot find matching typeVariable for: Types.BIT
For node: Types.BIT expected fqn: int with type: Type62 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: BIT expected fqn: int with type: Type61 got: int
For node: "integer" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.TINYINT,"tinyint") expected fqn: void with type: Type67 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type67 got: void
Cannot find matching typeVariable for: Types.TINYINT
For node: Types.TINYINT expected fqn: int with type: Type67 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: TINYINT expected fqn: int with type: Type66 got: int
For node: "tinyint" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.SMALLINT,"smallint") expected fqn: void with type: Type72 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type72 got: void
Cannot find matching typeVariable for: Types.SMALLINT
For node: Types.SMALLINT expected fqn: int with type: Type72 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: SMALLINT expected fqn: int with type: Type71 got: int
For node: "smallint" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.INTEGER,"integer") expected fqn: void with type: Type77 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type77 got: void
Cannot find matching typeVariable for: Types.INTEGER
For node: Types.INTEGER expected fqn: int with type: Type77 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: INTEGER expected fqn: int with type: Type76 got: int
For node: "integer" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.BIGINT,"bigint") expected fqn: void with type: Type82 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type82 got: void
Cannot find matching typeVariable for: Types.BIGINT
For node: Types.BIGINT expected fqn: int with type: Type82 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: BIGINT expected fqn: int with type: Type81 got: int
For node: "bigint" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.FLOAT,"float") expected fqn: void with type: Type87 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type87 got: void
Cannot find matching typeVariable for: Types.FLOAT
For node: Types.FLOAT expected fqn: int with type: Type87 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: FLOAT expected fqn: int with type: Type86 got: int
For node: "float" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.REAL,"real") expected fqn: void with type: Type92 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type92 got: void
Cannot find matching typeVariable for: Types.REAL
For node: Types.REAL expected fqn: int with type: Type92 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: REAL expected fqn: int with type: Type91 got: int
For node: "real" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.DOUBLE,"double") expected fqn: void with type: Type97 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type97 got: void
Cannot find matching typeVariable for: Types.DOUBLE
For node: Types.DOUBLE expected fqn: int with type: Type97 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: DOUBLE expected fqn: int with type: Type96 got: int
For node: "double" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.NUMERIC,"numeric") expected fqn: void with type: Type102 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type102 got: void
Cannot find matching typeVariable for: Types.NUMERIC
For node: Types.NUMERIC expected fqn: int with type: Type102 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: NUMERIC expected fqn: int with type: Type101 got: int
For node: "numeric" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.DECIMAL,"decimal") expected fqn: void with type: Type107 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type107 got: void
Cannot find matching typeVariable for: Types.DECIMAL
For node: Types.DECIMAL expected fqn: int with type: Type107 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: DECIMAL expected fqn: int with type: Type106 got: int
For node: "decimal" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.CHAR,"char") expected fqn: void with type: Type112 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type112 got: void
Cannot find matching typeVariable for: Types.CHAR
For node: Types.CHAR expected fqn: int with type: Type112 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: CHAR expected fqn: int with type: Type111 got: int
For node: "char" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.VARCHAR,"varchar") expected fqn: void with type: Type117 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type117 got: void
Cannot find matching typeVariable for: Types.VARCHAR
For node: Types.VARCHAR expected fqn: int with type: Type117 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: VARCHAR expected fqn: int with type: Type116 got: int
For node: "varchar" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.LONGVARCHAR,"longvarchar") expected fqn: void with type: Type122 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type122 got: void
Cannot find matching typeVariable for: Types.LONGVARCHAR
For node: Types.LONGVARCHAR expected fqn: int with type: Type122 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: LONGVARCHAR expected fqn: int with type: Type121 got: int
For node: "longvarchar" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.DATE,"date") expected fqn: void with type: Type127 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type127 got: void
Cannot find matching typeVariable for: Types.DATE
For node: Types.DATE expected fqn: int with type: Type127 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: DATE expected fqn: int with type: Type126 got: int
For node: "date" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.TIME,"time") expected fqn: void with type: Type132 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type132 got: void
Cannot find matching typeVariable for: Types.TIME
For node: Types.TIME expected fqn: int with type: Type132 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: TIME expected fqn: int with type: Type131 got: int
For node: "time" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.TIMESTAMP,"timestamp") expected fqn: void with type: Type137 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type137 got: void
Cannot find matching typeVariable for: Types.TIMESTAMP
For node: Types.TIMESTAMP expected fqn: int with type: Type137 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: TIMESTAMP expected fqn: int with type: Type136 got: int
For node: "timestamp" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.BINARY,"blob") expected fqn: void with type: Type142 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type142 got: void
Cannot find matching typeVariable for: Types.BINARY
For node: Types.BINARY expected fqn: int with type: Type142 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: BINARY expected fqn: int with type: Type141 got: int
For node: "blob" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.VARBINARY,"blob") expected fqn: void with type: Type147 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type147 got: void
Cannot find matching typeVariable for: Types.VARBINARY
For node: Types.VARBINARY expected fqn: int with type: Type147 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: VARBINARY expected fqn: int with type: Type146 got: int
For node: "blob" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.LONGVARBINARY,"blob") expected fqn: void with type: Type152 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type152 got: void
Cannot find matching typeVariable for: Types.LONGVARBINARY
For node: Types.LONGVARBINARY expected fqn: int with type: Type152 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: LONGVARBINARY expected fqn: int with type: Type151 got: int
For node: "blob" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.BLOB,"blob") expected fqn: void with type: Type157 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type157 got: void
Cannot find matching typeVariable for: Types.BLOB
For node: Types.BLOB expected fqn: int with type: Type157 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: BLOB expected fqn: int with type: Type156 got: int
For node: "blob" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.CLOB,"clob") expected fqn: void with type: Type162 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type162 got: void
Cannot find matching typeVariable for: Types.CLOB
For node: Types.CLOB expected fqn: int with type: Type162 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: CLOB expected fqn: int with type: Type161 got: int
For node: "clob" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerColumnType(Types.BOOLEAN,"integer") expected fqn: void with type: Type167 got: void
Cannot find matching typeVariable for: registerColumnType
For node: registerColumnType expected fqn: void with type: Type167 got: void
Cannot find matching typeVariable for: Types.BOOLEAN
For node: Types.BOOLEAN expected fqn: int with type: Type167 got: void
For node: Types expected fqn: java.sql.Types with type: Type60 got: java.sql.Types
For node: BOOLEAN expected fqn: int with type: Type166 got: int
For node: "integer" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||","")) expected fqn: void with type: Type179 got: void
Cannot find matching typeVariable for: registerFunction
For node: registerFunction expected fqn: void with type: Type179 got: void
For node: "concat" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: new VarArgsSQLFunction(Hibernate.STRING,"","||","") expected fqn: org.hibernate.dialect.function.VarArgsSQLFunction with type: Type171 got: org.hibernate.dialect.function.VarArgsSQLFunction
For node: VarArgsSQLFunction expected fqn: org.hibernate.dialect.function.VarArgsSQLFunction with type: Type171 got: org.hibernate.dialect.function.VarArgsSQLFunction
For node: VarArgsSQLFunction expected fqn: org.hibernate.dialect.function.VarArgsSQLFunction with type: Type171 got: org.hibernate.dialect.function.VarArgsSQLFunction
For node: Hibernate expected fqn: org.hibernate.Hibernate with type: Type172 got: org.hibernate.Hibernate
No match for actual type SimpleName: STRING with type: Type173 got: org.hibernate.type.NullableType
For node: "" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: "||" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: "" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2")) expected fqn: void with type: Type188 got: void
Cannot find matching typeVariable for: registerFunction
For node: registerFunction expected fqn: void with type: Type188 got: void
For node: "mod" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2") expected fqn: org.hibernate.dialect.function.SQLFunctionTemplate with type: Type183 got: org.hibernate.dialect.function.SQLFunctionTemplate
For node: SQLFunctionTemplate expected fqn: org.hibernate.dialect.function.SQLFunctionTemplate with type: Type183 got: org.hibernate.dialect.function.SQLFunctionTemplate
For node: SQLFunctionTemplate expected fqn: org.hibernate.dialect.function.SQLFunctionTemplate with type: Type183 got: org.hibernate.dialect.function.SQLFunctionTemplate
For node: Hibernate expected fqn: org.hibernate.Hibernate with type: Type172 got: org.hibernate.Hibernate
No match for actual type SimpleName: INTEGER with type: Type184 got: org.hibernate.type.NullableType
For node: "?1 % ?2" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING)) expected fqn: void with type: Type196 got: void
Cannot find matching typeVariable for: registerFunction
For node: registerFunction expected fqn: void with type: Type196 got: void
For node: "substr" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: new StandardSQLFunction("substr",Hibernate.STRING) expected fqn: org.hibernate.dialect.function.StandardSQLFunction with type: Type192 got: org.hibernate.dialect.function.StandardSQLFunction
For node: StandardSQLFunction expected fqn: org.hibernate.dialect.function.StandardSQLFunction with type: Type192 got: org.hibernate.dialect.function.StandardSQLFunction
For node: StandardSQLFunction expected fqn: org.hibernate.dialect.function.StandardSQLFunction with type: Type192 got: org.hibernate.dialect.function.StandardSQLFunction
For node: "substr" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: Hibernate expected fqn: org.hibernate.Hibernate with type: Type172 got: org.hibernate.Hibernate
No match for actual type SimpleName: STRING with type: Type173 got: org.hibernate.type.NullableType
For node: registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING)) expected fqn: void with type: Type199 got: void
Cannot find matching typeVariable for: registerFunction
For node: registerFunction expected fqn: void with type: Type199 got: void
For node: "substring" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: new StandardSQLFunction("substr",Hibernate.STRING) expected fqn: org.hibernate.dialect.function.StandardSQLFunction with type: Type192 got: org.hibernate.dialect.function.StandardSQLFunction
For node: StandardSQLFunction expected fqn: org.hibernate.dialect.function.StandardSQLFunction with type: Type192 got: org.hibernate.dialect.function.StandardSQLFunction
For node: StandardSQLFunction expected fqn: org.hibernate.dialect.function.StandardSQLFunction with type: Type192 got: org.hibernate.dialect.function.StandardSQLFunction
For node: "substr" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: Hibernate expected fqn: org.hibernate.Hibernate with type: Type172 got: org.hibernate.Hibernate
No match for actual type SimpleName: STRING with type: Type173 got: org.hibernate.type.NullableType
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: supportsIdentityColumns
Cannot find matching typeVariable for: public boolean supportsIdentityColumns(){
  return true;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: true expected fqn: boolean with type: Type4 got: boolean
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: hasDataTypeInIdentityColumn
Cannot find matching typeVariable for: public boolean hasDataTypeInIdentityColumn(){
  return false;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: false expected fqn: boolean with type: Type4 got: boolean
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getIdentityColumnString
Cannot find matching typeVariable for: public String getIdentityColumnString(){
  return "integer";
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: "integer" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getIdentitySelectString
Cannot find matching typeVariable for: public String getIdentitySelectString(){
  return "select last_insert_rowid()";
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: "select last_insert_rowid()" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: supportsLimit
Cannot find matching typeVariable for: public boolean supportsLimit(){
  return true;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: true expected fqn: boolean with type: Type4 got: boolean
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getLimitString
Cannot find matching typeVariable for: public String getLimitString(String query,boolean hasOffset){
  return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: String query
For node: String query expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: query expected fqn: java.lang.String with type: Type59 got: java.lang.String
Cannot find matching typeVariable for: boolean hasOffset
For node: boolean hasOffset expected fqn: boolean with type: Type4 got: boolean
For node: boolean expected fqn: boolean with type: Type4 got: boolean
For node: hasOffset expected fqn: boolean with type: Type4 got: boolean
For node: new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString() expected fqn: java.lang.String with type: Type213 got: java.lang.String
For node: new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?") expected fqn: java.lang.StringBuffer with type: Type210 got: java.io.Writer
Did not find solution for node: new StringBuffer(query.length() + 20).append(query) with type Type206
Did not find solution for node: new StringBuffer(query.length() + 20) with type Type200
Did not find solution for node: StringBuffer with type Type200
Did not find solution for node: StringBuffer with type Type200
Did not find solution for node: query.length() + 20 with type Type201
Did not find solution for node: query.length() with type Type201
For node: query expected fqn: java.lang.String with type: Type59 got: java.lang.String
Cannot find matching typeVariable for: length
Did not find solution for node: length with type Type201
Did not find solution for node: 20 with type Type203
Cannot find matching typeVariable for: append
Did not find solution for node: append with type Type206
For node: query expected fqn: java.lang.String with type: Type59 got: java.lang.String
Cannot find matching typeVariable for: append
For node: append expected fqn: java.lang.StringBuffer with type: Type210 got: java.io.Writer
For node: hasOffset ? " limit ? offset ?" : " limit ?" expected fqn: java.lang.String with type: Type209 got: java.lang.Boolean
Cannot find matching typeVariable for: hasOffset
For node: hasOffset expected fqn: boolean with type: Type209 got: java.lang.Boolean
For node: " limit ? offset ?" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: " limit ?" expected fqn: java.lang.String with type: Type59 got: java.lang.String
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type213 got: java.lang.String
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: supportsTemporaryTables
Cannot find matching typeVariable for: public boolean supportsTemporaryTables(){
  return true;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: true expected fqn: boolean with type: Type4 got: boolean
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getCreateTemporaryTableString
Cannot find matching typeVariable for: public String getCreateTemporaryTableString(){
  return "create temporary table if not exists";
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: "create temporary table if not exists" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: dropTemporaryTableAfterUse
Cannot find matching typeVariable for: public boolean dropTemporaryTableAfterUse(){
  return false;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: false expected fqn: boolean with type: Type4 got: boolean
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: supportsCurrentTimestampSelection
Cannot find matching typeVariable for: public boolean supportsCurrentTimestampSelection(){
  return true;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: true expected fqn: boolean with type: Type4 got: boolean
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: isCurrentTimestampSelectStringCallable
Cannot find matching typeVariable for: public boolean isCurrentTimestampSelectStringCallable(){
  return false;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: false expected fqn: boolean with type: Type4 got: boolean
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getCurrentTimestampSelectString
Cannot find matching typeVariable for: public String getCurrentTimestampSelectString(){
  return "select current_timestamp";
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: "select current_timestamp" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: supportsUnionAll
Cannot find matching typeVariable for: public boolean supportsUnionAll(){
  return true;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: true expected fqn: boolean with type: Type4 got: boolean
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: hasAlterTable
Cannot find matching typeVariable for: public boolean hasAlterTable(){
  return false;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: false expected fqn: boolean with type: Type4 got: boolean
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: dropConstraints
Cannot find matching typeVariable for: public boolean dropConstraints(){
  return false;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: false expected fqn: boolean with type: Type4 got: boolean
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getAddColumnString
Cannot find matching typeVariable for: public String getAddColumnString(){
  return "add column";
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: "add column" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getForUpdateString
Cannot find matching typeVariable for: public String getForUpdateString(){
  return "";
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: "" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: supportsOuterJoinForUpdate
Cannot find matching typeVariable for: public boolean supportsOuterJoinForUpdate(){
  return false;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: false expected fqn: boolean with type: Type4 got: boolean
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getDropForeignKeyString
Cannot find matching typeVariable for: public String getDropForeignKeyString(){
  throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Did not find solution for node: new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect") with type Type214
Did not find solution for node: UnsupportedOperationException with type Type214
Did not find solution for node: UnsupportedOperationException with type Type214
For node: "No drop foreign key syntax supported by SQLiteDialect" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getAddForeignKeyConstraintString
Cannot find matching typeVariable for: public String getAddForeignKeyConstraintString(String constraintName,String[] foreignKey,String referencedTable,String[] primaryKey,boolean referencesPrimaryKey){
  throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: String constraintName
For node: String constraintName expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: constraintName expected fqn: java.lang.String with type: Type59 got: java.lang.String
Cannot find matching typeVariable for: String[] foreignKey
Did not find solution for node: String[] foreignKey with type Type217
Did not find solution for node: String[] with type Type217
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
Did not find solution for node: foreignKey with type Type217
Cannot find matching typeVariable for: String referencedTable
For node: String referencedTable expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: referencedTable expected fqn: java.lang.String with type: Type59 got: java.lang.String
Cannot find matching typeVariable for: String[] primaryKey
Did not find solution for node: String[] primaryKey with type Type217
Did not find solution for node: String[] with type Type217
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
Did not find solution for node: primaryKey with type Type217
Cannot find matching typeVariable for: boolean referencesPrimaryKey
For node: boolean referencesPrimaryKey expected fqn: boolean with type: Type4 got: boolean
For node: boolean expected fqn: boolean with type: Type4 got: boolean
For node: referencesPrimaryKey expected fqn: boolean with type: Type4 got: boolean
Did not find solution for node: new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect") with type Type214
Did not find solution for node: UnsupportedOperationException with type Type214
Did not find solution for node: UnsupportedOperationException with type Type214
For node: "No add foreign key syntax supported by SQLiteDialect" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type5 got: java.lang.String
Cannot find matching typeVariable for: getAddPrimaryKeyConstraintString
Cannot find matching typeVariable for: public String getAddPrimaryKeyConstraintString(String constraintName){
  throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: String constraintName
For node: String constraintName expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: constraintName expected fqn: java.lang.String with type: Type59 got: java.lang.String
Did not find solution for node: new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect") with type Type214
Did not find solution for node: UnsupportedOperationException with type Type214
Did not find solution for node: UnsupportedOperationException with type Type214
For node: "No add primary key syntax supported by SQLiteDialect" expected fqn: java.lang.String with type: Type59 got: java.lang.String
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: supportsIfExistsBeforeTableName
Cannot find matching typeVariable for: public boolean supportsIfExistsBeforeTableName(){
  return true;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: true expected fqn: boolean with type: Type4 got: boolean
For node: boolean expected fqn: boolean with type: Type4 got: boolean
Cannot find matching typeVariable for: supportsCascadeDelete
Cannot find matching typeVariable for: public boolean supportsCascadeDelete(){
  return false;
}

Cannot find matching typeVariable for: public class SQLiteDialect extends Dialect {
  public SQLiteDialect(){
    super();
    registerColumnType(Types.BIT,"integer");
    registerColumnType(Types.TINYINT,"tinyint");
    registerColumnType(Types.SMALLINT,"smallint");
    registerColumnType(Types.INTEGER,"integer");
    registerColumnType(Types.BIGINT,"bigint");
    registerColumnType(Types.FLOAT,"float");
    registerColumnType(Types.REAL,"real");
    registerColumnType(Types.DOUBLE,"double");
    registerColumnType(Types.NUMERIC,"numeric");
    registerColumnType(Types.DECIMAL,"decimal");
    registerColumnType(Types.CHAR,"char");
    registerColumnType(Types.VARCHAR,"varchar");
    registerColumnType(Types.LONGVARCHAR,"longvarchar");
    registerColumnType(Types.DATE,"date");
    registerColumnType(Types.TIME,"time");
    registerColumnType(Types.TIMESTAMP,"timestamp");
    registerColumnType(Types.BINARY,"blob");
    registerColumnType(Types.VARBINARY,"blob");
    registerColumnType(Types.LONGVARBINARY,"blob");
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
    registerColumnType(Types.BOOLEAN,"integer");
    registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
    registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
    registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
    registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
  }
  public boolean supportsIdentityColumns(){
    return true;
  }
  public boolean hasDataTypeInIdentityColumn(){
    return false;
  }
  public String getIdentityColumnString(){
    return "integer";
  }
  public String getIdentitySelectString(){
    return "select last_insert_rowid()";
  }
  public boolean supportsLimit(){
    return true;
  }
  public String getLimitString(  String query,  boolean hasOffset){
    return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
  }
  public boolean supportsTemporaryTables(){
    return true;
  }
  public String getCreateTemporaryTableString(){
    return "create temporary table if not exists";
  }
  public boolean dropTemporaryTableAfterUse(){
    return false;
  }
  public boolean supportsCurrentTimestampSelection(){
    return true;
  }
  public boolean isCurrentTimestampSelectStringCallable(){
    return false;
  }
  public String getCurrentTimestampSelectString(){
    return "select current_timestamp";
  }
  public boolean supportsUnionAll(){
    return true;
  }
  public boolean hasAlterTable(){
    return false;
  }
  public boolean dropConstraints(){
    return false;
  }
  public String getAddColumnString(){
    return "add column";
  }
  public String getForUpdateString(){
    return "";
  }
  public boolean supportsOuterJoinForUpdate(){
    return false;
  }
  public String getDropForeignKeyString(){
    throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
  }
  public String getAddForeignKeyConstraintString(  String constraintName,  String[] foreignKey,  String referencedTable,  String[] primaryKey,  boolean referencesPrimaryKey){
    throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
  }
  public String getAddPrimaryKeyConstraintString(  String constraintName){
    throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
  }
  public boolean supportsIfExistsBeforeTableName(){
    return true;
  }
  public boolean supportsCascadeDelete(){
    return false;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

Cannot find matching typeVariable for: import java.sql.Types;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.function.StandardSQLFunction;
import org.hibernate.dialect.function.SQLFunctionTemplate;
import org.hibernate.dialect.function.VarArgsSQLFunction;
import org.hibernate.Hibernate;
public class hibernate_class_3 {
public class SQLiteDialect extends Dialect {
    public SQLiteDialect(){
      super();
      registerColumnType(Types.BIT,"integer");
      registerColumnType(Types.TINYINT,"tinyint");
      registerColumnType(Types.SMALLINT,"smallint");
      registerColumnType(Types.INTEGER,"integer");
      registerColumnType(Types.BIGINT,"bigint");
      registerColumnType(Types.FLOAT,"float");
      registerColumnType(Types.REAL,"real");
      registerColumnType(Types.DOUBLE,"double");
      registerColumnType(Types.NUMERIC,"numeric");
      registerColumnType(Types.DECIMAL,"decimal");
      registerColumnType(Types.CHAR,"char");
      registerColumnType(Types.VARCHAR,"varchar");
      registerColumnType(Types.LONGVARCHAR,"longvarchar");
      registerColumnType(Types.DATE,"date");
      registerColumnType(Types.TIME,"time");
      registerColumnType(Types.TIMESTAMP,"timestamp");
      registerColumnType(Types.BINARY,"blob");
      registerColumnType(Types.VARBINARY,"blob");
      registerColumnType(Types.LONGVARBINARY,"blob");
      registerColumnType(Types.BLOB,"blob");
      registerColumnType(Types.CLOB,"clob");
      registerColumnType(Types.BOOLEAN,"integer");
      registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"","||",""));
      registerFunction("mod",new SQLFunctionTemplate(Hibernate.INTEGER,"?1 % ?2"));
      registerFunction("substr",new StandardSQLFunction("substr",Hibernate.STRING));
      registerFunction("substring",new StandardSQLFunction("substr",Hibernate.STRING));
    }
    public boolean supportsIdentityColumns(){
      return true;
    }
    public boolean hasDataTypeInIdentityColumn(){
      return false;
    }
    public String getIdentityColumnString(){
      return "integer";
    }
    public String getIdentitySelectString(){
      return "select last_insert_rowid()";
    }
    public boolean supportsLimit(){
      return true;
    }
    public String getLimitString(    String query,    boolean hasOffset){
      return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? " limit ? offset ?" : " limit ?").toString();
    }
    public boolean supportsTemporaryTables(){
      return true;
    }
    public String getCreateTemporaryTableString(){
      return "create temporary table if not exists";
    }
    public boolean dropTemporaryTableAfterUse(){
      return false;
    }
    public boolean supportsCurrentTimestampSelection(){
      return true;
    }
    public boolean isCurrentTimestampSelectStringCallable(){
      return false;
    }
    public String getCurrentTimestampSelectString(){
      return "select current_timestamp";
    }
    public boolean supportsUnionAll(){
      return true;
    }
    public boolean hasAlterTable(){
      return false;
    }
    public boolean dropConstraints(){
      return false;
    }
    public String getAddColumnString(){
      return "add column";
    }
    public String getForUpdateString(){
      return "";
    }
    public boolean supportsOuterJoinForUpdate(){
      return false;
    }
    public String getDropForeignKeyString(){
      throw new UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
    }
    public String getAddForeignKeyConstraintString(    String constraintName,    String[] foreignKey,    String referencedTable,    String[] primaryKey,    boolean referencesPrimaryKey){
      throw new UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
    }
    public String getAddPrimaryKeyConstraintString(    String constraintName){
      throw new UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
    }
    public boolean supportsIfExistsBeforeTableName(){
      return true;
    }
    public boolean supportsCascadeDelete(){
      return false;
    }
  }
}

For node: false expected fqn: boolean with type: Type4 got: boolean
{Checked=284, Analyzed=259, Unsolved=25, Incorrect=26, Correct=233}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=13, Analyzed=13, Unsolved=0, Incorrect=0, Correct=13}
boolean=PrimitiveType: {Checked=15, Analyzed=15, Unsolved=0, Incorrect=0, Correct=15}
boolean=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=1, Correct=2}
boolean=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=InfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=22, Analyzed=22, Unsolved=0, Incorrect=22, Correct=0}
int=SimpleName: {Checked=23, Analyzed=22, Unsolved=1, Incorrect=0, Correct=22}
java=ArrayType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
java=ConditionalExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=MethodInvocation: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=1, Correct=1}
java=SimpleName: {Checked=53, Analyzed=46, Unsolved=7, Incorrect=1, Correct=45}
java=SimpleType: {Checked=20, Analyzed=16, Unsolved=4, Incorrect=0, Correct=16}
java=SingleVariableDeclaration: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=0, Correct=4}
java=StringLiteral: {Checked=43, Analyzed=43, Unsolved=0, Incorrect=0, Correct=43}
org.hibernate.=ClassInstanceCreation: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
org.hibernate.=SimpleName: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
org.hibernate.=SimpleType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
void=MethodInvocation: {Checked=26, Analyzed=26, Unsolved=0, Incorrect=0, Correct=26}
void=SimpleName: {Checked=26, Analyzed=26, Unsolved=0, Incorrect=0, Correct=26}
Total stats
{Checked=284, Analyzed=259, Unsolved=25, Incorrect=26, Correct=233}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=13, Analyzed=13, Unsolved=0, Incorrect=0, Correct=13}
boolean=PrimitiveType: {Checked=15, Analyzed=15, Unsolved=0, Incorrect=0, Correct=15}
boolean=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=1, Correct=2}
boolean=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=InfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=22, Analyzed=22, Unsolved=0, Incorrect=22, Correct=0}
int=SimpleName: {Checked=23, Analyzed=22, Unsolved=1, Incorrect=0, Correct=22}
java=ArrayType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
java=ConditionalExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=MethodInvocation: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=1, Correct=1}
java=SimpleName: {Checked=53, Analyzed=46, Unsolved=7, Incorrect=1, Correct=45}
java=SimpleType: {Checked=20, Analyzed=16, Unsolved=4, Incorrect=0, Correct=16}
java=SingleVariableDeclaration: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=0, Correct=4}
java=StringLiteral: {Checked=43, Analyzed=43, Unsolved=0, Incorrect=0, Correct=43}
org.hibernate.=ClassInstanceCreation: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
org.hibernate.=SimpleName: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
org.hibernate.=SimpleType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
void=MethodInvocation: {Checked=26, Analyzed=26, Unsolved=0, Incorrect=0, Correct=26}
void=SimpleName: {Checked=26, Analyzed=26, Unsolved=0, Incorrect=0, Correct=26}
,SimpleName,0,1,0,0,1
boolean,BooleanLiteral,13,13,13,0,0
boolean,PrimitiveType,15,15,15,0,0
boolean,SimpleName,3,3,2,1,0
boolean,SingleVariableDeclaration,2,2,2,0,0
int,InfixExpression,0,1,0,0,1
int,MethodInvocation,0,1,0,0,1
int,NumberLiteral,0,1,0,0,1
int,QualifiedName,22,22,0,22,0
int,SimpleName,22,23,22,0,1
java,ArrayType,0,2,0,0,2
java,ClassInstanceCreation,0,4,0,0,4
java,ConditionalExpression,1,1,0,1,0
java,MethodInvocation,2,3,1,1,1
java,SimpleName,46,53,45,1,7
java,SimpleType,16,20,16,0,4
java,SingleVariableDeclaration,4,6,4,0,2
java,StringLiteral,43,43,43,0,0
org.hibernate.,ClassInstanceCreation,4,4,4,0,0
org.hibernate.,SimpleName,9,9,9,0,0
org.hibernate.,SimpleType,5,5,5,0,0
void,MethodInvocation,26,26,26,0,0
void,SimpleName,26,26,26,0,0
