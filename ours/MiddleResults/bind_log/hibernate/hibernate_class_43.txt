echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/hibernate_class_43.java
Expect check=124
Cannot find matching typeVariable for: public class hibernate_class_43 {
  private static Logger log=Logger.getLogger(hibernate_class_43.class);
  private static org.hibernate.SessionFactory sessionFactory;
  private static String confFile="hibernate-test.properties";
  private static final ThreadLocal<Session> threadSession=new ThreadLocal<Session>();
  private hibernate_class_43(){
  }
  public static void buildSessionFactory(){
    Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
      if (sessionFactory == null) {
        try {
          Properties properties=new Properties();
          properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
          configuration.setProperties(properties);
        }
 catch (        Exception e) {
          log.fatal("cannot load the specified hibernate properties file: " + confFile);
          throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
        }
        sessionFactory=configuration.configure().buildSessionFactory();
      }
    }
  }
  public static SessionFactory getSessionFactory(){
    if (sessionFactory == null) {
      buildSessionFactory();
    }
    return sessionFactory;
  }
  public static Session getCurrentSession(){
    if (!getSessionFactory().getCurrentSession().isOpen())     getSessionFactory().openSession();
    return getSessionFactory().getCurrentSession();
  }
}

Did not find solution for node: hibernate_class_43 with type Type1
Did not find solution for node: Logger with type Type20
Did not find solution for node: Logger with type Type20
Cannot find matching typeVariable for: log=Logger.getLogger(hibernate_class_43.class)
Did not find solution for node: log=Logger.getLogger(hibernate_class_43.class) with type Type20
Did not find solution for node: log with type Type20
Did not find solution for node: Logger.getLogger(hibernate_class_43.class) with type Type28
Did not find solution for node: Logger with type Type20
Cannot find matching typeVariable for: getLogger
Did not find solution for node: getLogger with type Type28
Did not find solution for node: hibernate_class_43.class with type Type27
Did not find solution for node: hibernate_class_43 with type Type1
Did not find solution for node: hibernate_class_43 with type Type1
Did not find solution for node: org.hibernate.SessionFactory with type Type21
Did not find solution for node: org.hibernate.SessionFactory with type Type21
No match for actual type QualifiedName: org.hibernate and also not find solution for: Type22
No match for actual type SimpleName: org and also not find solution for: Type23
Cannot find matching typeVariable for: SessionFactory
Did not find solution for node: SessionFactory with type Type21
Cannot find matching typeVariable for: sessionFactory
Did not find solution for node: sessionFactory with type Type21
Cannot find matching typeVariable for: sessionFactory
Cannot find matching typeVariable for: private static org.hibernate.SessionFactory sessionFactory;

Cannot find matching typeVariable for: public class hibernate_class_43 {
  private static Logger log=Logger.getLogger(hibernate_class_43.class);
  private static org.hibernate.SessionFactory sessionFactory;
  private static String confFile="hibernate-test.properties";
  private static final ThreadLocal<Session> threadSession=new ThreadLocal<Session>();
  private hibernate_class_43(){
  }
  public static void buildSessionFactory(){
    Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
      if (sessionFactory == null) {
        try {
          Properties properties=new Properties();
          properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
          configuration.setProperties(properties);
        }
 catch (        Exception e) {
          log.fatal("cannot load the specified hibernate properties file: " + confFile);
          throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
        }
        sessionFactory=configuration.configure().buildSessionFactory();
      }
    }
  }
  public static SessionFactory getSessionFactory(){
    if (sessionFactory == null) {
      buildSessionFactory();
    }
    return sessionFactory;
  }
  public static Session getCurrentSession(){
    if (!getSessionFactory().getCurrentSession().isOpen())     getSessionFactory().openSession();
    return getSessionFactory().getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.Properties;
import org.apache.log4j.Logger;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
public class hibernate_class_43 {
  private static Logger log=Logger.getLogger(hibernate_class_43.class);
  private static org.hibernate.SessionFactory sessionFactory;
  private static String confFile="hibernate-test.properties";
  private static final ThreadLocal<Session> threadSession=new ThreadLocal<Session>();
  private hibernate_class_43(){
  }
  public static void buildSessionFactory(){
    Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
      if (sessionFactory == null) {
        try {
          Properties properties=new Properties();
          properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
          configuration.setProperties(properties);
        }
 catch (        Exception e) {
          log.fatal("cannot load the specified hibernate properties file: " + confFile);
          throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
        }
        sessionFactory=configuration.configure().buildSessionFactory();
      }
    }
  }
  public static SessionFactory getSessionFactory(){
    if (sessionFactory == null) {
      buildSessionFactory();
    }
    return sessionFactory;
  }
  public static Session getCurrentSession(){
    if (!getSessionFactory().getCurrentSession().isOpen())     getSessionFactory().openSession();
    return getSessionFactory().getCurrentSession();
  }
}

For node: String expected fqn: java.lang.String with type: Type24 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type24 got: java.lang.String
Cannot find matching typeVariable for: confFile="hibernate-test.properties"
For node: confFile="hibernate-test.properties" expected fqn: java.lang.String with type: Type24 got: java.lang.String
For node: confFile expected fqn: java.lang.String with type: Type24 got: java.lang.String
For node: "hibernate-test.properties" expected fqn: java.lang.String with type: Type31 got: java.lang.String
For node: ThreadLocal<Session> expected fqn: java.lang.ThreadLocal<org.hibernate.Session> with type: Type26=Type25<Type3> got: java.lang.ThreadLocal<org.hibernate.Session>
For node: ThreadLocal expected fqn: java.lang.ThreadLocal<org.hibernate.Session> with type: Type25 got: java.lang.ThreadLocal
For node: ThreadLocal expected fqn: java.lang.ThreadLocal<org.hibernate.Session> with type: Type25 got: java.lang.ThreadLocal
For node: Session expected fqn: org.hibernate.Session with type: Type3 got: org.hibernate.Session
For node: Session expected fqn: org.hibernate.Session with type: Type3 got: org.hibernate.Session
Cannot find matching typeVariable for: threadSession=new ThreadLocal<Session>()
For node: threadSession=new ThreadLocal<Session>() expected fqn: java.lang.ThreadLocal<org.hibernate.Session> with type: Type26=Type25<Type3> got: java.lang.ThreadLocal<org.hibernate.Session>
For node: threadSession expected fqn: java.lang.ThreadLocal<org.hibernate.Session> with type: Type26=Type25<Type3> got: java.lang.ThreadLocal<org.hibernate.Session>
For node: new ThreadLocal<Session>() expected fqn: java.lang.ThreadLocal<org.hibernate.Session> with type: Type26=Type25<Type3> got: java.lang.ThreadLocal<org.hibernate.Session>
For node: ThreadLocal<Session> expected fqn: java.lang.ThreadLocal<org.hibernate.Session> with type: Type26=Type25<Type3> got: java.lang.ThreadLocal<org.hibernate.Session>
For node: ThreadLocal expected fqn: java.lang.ThreadLocal<org.hibernate.Session> with type: Type25 got: java.lang.ThreadLocal
For node: ThreadLocal expected fqn: java.lang.ThreadLocal<org.hibernate.Session> with type: Type25 got: java.lang.ThreadLocal
For node: Session expected fqn: org.hibernate.Session with type: Type3 got: org.hibernate.Session
For node: Session expected fqn: org.hibernate.Session with type: Type3 got: org.hibernate.Session
Cannot find matching typeVariable for: hibernate_class_43
Cannot find matching typeVariable for: private hibernate_class_43(){
}

Cannot find matching typeVariable for: public class hibernate_class_43 {
  private static Logger log=Logger.getLogger(hibernate_class_43.class);
  private static org.hibernate.SessionFactory sessionFactory;
  private static String confFile="hibernate-test.properties";
  private static final ThreadLocal<Session> threadSession=new ThreadLocal<Session>();
  private hibernate_class_43(){
  }
  public static void buildSessionFactory(){
    Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
      if (sessionFactory == null) {
        try {
          Properties properties=new Properties();
          properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
          configuration.setProperties(properties);
        }
 catch (        Exception e) {
          log.fatal("cannot load the specified hibernate properties file: " + confFile);
          throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
        }
        sessionFactory=configuration.configure().buildSessionFactory();
      }
    }
  }
  public static SessionFactory getSessionFactory(){
    if (sessionFactory == null) {
      buildSessionFactory();
    }
    return sessionFactory;
  }
  public static Session getCurrentSession(){
    if (!getSessionFactory().getCurrentSession().isOpen())     getSessionFactory().openSession();
    return getSessionFactory().getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.Properties;
import org.apache.log4j.Logger;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
public class hibernate_class_43 {
  private static Logger log=Logger.getLogger(hibernate_class_43.class);
  private static org.hibernate.SessionFactory sessionFactory;
  private static String confFile="hibernate-test.properties";
  private static final ThreadLocal<Session> threadSession=new ThreadLocal<Session>();
  private hibernate_class_43(){
  }
  public static void buildSessionFactory(){
    Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
      if (sessionFactory == null) {
        try {
          Properties properties=new Properties();
          properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
          configuration.setProperties(properties);
        }
 catch (        Exception e) {
          log.fatal("cannot load the specified hibernate properties file: " + confFile);
          throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
        }
        sessionFactory=configuration.configure().buildSessionFactory();
      }
    }
  }
  public static SessionFactory getSessionFactory(){
    if (sessionFactory == null) {
      buildSessionFactory();
    }
    return sessionFactory;
  }
  public static Session getCurrentSession(){
    if (!getSessionFactory().getCurrentSession().isOpen())     getSessionFactory().openSession();
    return getSessionFactory().getCurrentSession();
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: buildSessionFactory
Cannot find matching typeVariable for: public static void buildSessionFactory(){
  Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
    if (sessionFactory == null) {
      try {
        Properties properties=new Properties();
        properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
        configuration.setProperties(properties);
      }
 catch (      Exception e) {
        log.fatal("cannot load the specified hibernate properties file: " + confFile);
        throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
      }
      sessionFactory=configuration.configure().buildSessionFactory();
    }
  }
}

Cannot find matching typeVariable for: public class hibernate_class_43 {
  private static Logger log=Logger.getLogger(hibernate_class_43.class);
  private static org.hibernate.SessionFactory sessionFactory;
  private static String confFile="hibernate-test.properties";
  private static final ThreadLocal<Session> threadSession=new ThreadLocal<Session>();
  private hibernate_class_43(){
  }
  public static void buildSessionFactory(){
    Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
      if (sessionFactory == null) {
        try {
          Properties properties=new Properties();
          properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
          configuration.setProperties(properties);
        }
 catch (        Exception e) {
          log.fatal("cannot load the specified hibernate properties file: " + confFile);
          throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
        }
        sessionFactory=configuration.configure().buildSessionFactory();
      }
    }
  }
  public static SessionFactory getSessionFactory(){
    if (sessionFactory == null) {
      buildSessionFactory();
    }
    return sessionFactory;
  }
  public static Session getCurrentSession(){
    if (!getSessionFactory().getCurrentSession().isOpen())     getSessionFactory().openSession();
    return getSessionFactory().getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.Properties;
import org.apache.log4j.Logger;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
public class hibernate_class_43 {
  private static Logger log=Logger.getLogger(hibernate_class_43.class);
  private static org.hibernate.SessionFactory sessionFactory;
  private static String confFile="hibernate-test.properties";
  private static final ThreadLocal<Session> threadSession=new ThreadLocal<Session>();
  private hibernate_class_43(){
  }
  public static void buildSessionFactory(){
    Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
      if (sessionFactory == null) {
        try {
          Properties properties=new Properties();
          properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
          configuration.setProperties(properties);
        }
 catch (        Exception e) {
          log.fatal("cannot load the specified hibernate properties file: " + confFile);
          throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
        }
        sessionFactory=configuration.configure().buildSessionFactory();
      }
    }
  }
  public static SessionFactory getSessionFactory(){
    if (sessionFactory == null) {
      buildSessionFactory();
    }
    return sessionFactory;
  }
  public static Session getCurrentSession(){
    if (!getSessionFactory().getCurrentSession().isOpen())     getSessionFactory().openSession();
    return getSessionFactory().getCurrentSession();
  }
}

For node: Configuration expected fqn: org.hibernate.cfg.Configuration with type: Type35 got: org.hibernate.cfg.Configuration
For node: Configuration expected fqn: org.hibernate.cfg.Configuration with type: Type35 got: org.hibernate.cfg.Configuration
Cannot find matching typeVariable for: configuration=new Configuration()
For node: configuration=new Configuration() expected fqn: org.hibernate.cfg.Configuration with type: Type35 got: org.hibernate.cfg.Configuration
For node: configuration expected fqn: org.hibernate.cfg.Configuration with type: Type35 got: org.hibernate.cfg.Configuration
For node: new Configuration() expected fqn: org.hibernate.cfg.Configuration with type: Type35 got: org.hibernate.cfg.Configuration
For node: Configuration expected fqn: org.hibernate.cfg.Configuration with type: Type35 got: org.hibernate.cfg.Configuration
For node: Configuration expected fqn: org.hibernate.cfg.Configuration with type: Type35 got: org.hibernate.cfg.Configuration
Did not find solution for node: hibernate_class_43.class with type Type27
Did not find solution for node: hibernate_class_43 with type Type1
Did not find solution for node: hibernate_class_43 with type Type1
For node: sessionFactory == null expected fqn: boolean with type: Type38 got: boolean
Did not find solution for node: sessionFactory with type Type21
Did not find solution for node: null with type Type37
Did not find solution for node: Properties with type Type39
Did not find solution for node: Properties with type Type39
Cannot find matching typeVariable for: properties=new Properties()
Did not find solution for node: properties=new Properties() with type Type39
Did not find solution for node: properties with type Type39
Did not find solution for node: new Properties() with type Type39
Did not find solution for node: Properties with type Type39
Did not find solution for node: Properties with type Type39
Did not find solution for node: properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile)) with type Type46
Did not find solution for node: properties with type Type39
Cannot find matching typeVariable for: load
Did not find solution for node: load with type Type46
Did not find solution for node: hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile) with type Type43
Did not find solution for node: hibernate_class_43.class.getClassLoader() with type Type41
Did not find solution for node: hibernate_class_43.class with type Type27
Did not find solution for node: hibernate_class_43 with type Type1
Did not find solution for node: hibernate_class_43 with type Type1
Cannot find matching typeVariable for: getClassLoader
Did not find solution for node: getClassLoader with type Type41
Cannot find matching typeVariable for: getResourceAsStream
Did not find solution for node: getResourceAsStream with type Type43
For node: confFile expected fqn: java.lang.String with type: Type24 got: java.lang.String
For node: configuration.setProperties(properties) expected fqn: org.hibernate.cfg.Configuration with type: Type49 got: org.hibernate.cfg.Configuration
For node: configuration expected fqn: org.hibernate.cfg.Configuration with type: Type35 got: org.hibernate.cfg.Configuration
Cannot find matching typeVariable for: setProperties
For node: setProperties expected fqn: org.hibernate.cfg.Configuration with type: Type49 got: org.hibernate.cfg.Configuration
Did not find solution for node: properties with type Type39
Cannot find matching typeVariable for: Exception e
For node: Exception e expected fqn: java.lang.Exception with type: Type52 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type52 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type52 got: java.lang.Exception
For node: e expected fqn: java.lang.Exception with type: Type52 got: java.lang.Exception
Did not find solution for node: log.fatal("cannot load the specified hibernate properties file: " + confFile) with type Type53
Did not find solution for node: log with type Type20
Cannot find matching typeVariable for: fatal
Did not find solution for node: fatal with type Type53
For node: "cannot load the specified hibernate properties file: " + confFile expected fqn: java.lang.String with type: Type31 got: java.lang.String
For node: "cannot load the specified hibernate properties file: " expected fqn: java.lang.String with type: Type31 got: java.lang.String
For node: confFile expected fqn: java.lang.String with type: Type24 got: java.lang.String
For node: new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e) expected fqn: java.lang.RuntimeException with type: Type56 got: java.lang.RuntimeException
For node: RuntimeException expected fqn: java.lang.RuntimeException with type: Type56 got: java.lang.RuntimeException
For node: RuntimeException expected fqn: java.lang.RuntimeException with type: Type56 got: java.lang.RuntimeException
For node: "cannot load the specified hibernate properties file : " + confFile expected fqn: java.lang.String with type: Type31 got: java.lang.String
For node: "cannot load the specified hibernate properties file : " expected fqn: java.lang.String with type: Type31 got: java.lang.String
For node: confFile expected fqn: java.lang.String with type: Type24 got: java.lang.String
For node: e expected fqn: java.lang.Exception with type: Type52 got: java.lang.Exception
Did not find solution for node: sessionFactory=configuration.configure().buildSessionFactory() with type Type21
Did not find solution for node: sessionFactory with type Type21
Did not find solution for node: configuration.configure().buildSessionFactory() with type Type62
For node: configuration.configure() expected fqn: org.hibernate.cfg.Configuration with type: Type60 got: org.hibernate.cfg.Configuration
For node: configuration expected fqn: org.hibernate.cfg.Configuration with type: Type35 got: org.hibernate.cfg.Configuration
Cannot find matching typeVariable for: configure
For node: configure expected fqn: org.hibernate.cfg.Configuration with type: Type60 got: org.hibernate.cfg.Configuration
Cannot find matching typeVariable for: buildSessionFactory
Did not find solution for node: buildSessionFactory with type Type62
Did not find solution for node: SessionFactory with type Type5
Did not find solution for node: SessionFactory with type Type5
Cannot find matching typeVariable for: getSessionFactory
Cannot find matching typeVariable for: public static SessionFactory getSessionFactory(){
  if (sessionFactory == null) {
    buildSessionFactory();
  }
  return sessionFactory;
}

Cannot find matching typeVariable for: public class hibernate_class_43 {
  private static Logger log=Logger.getLogger(hibernate_class_43.class);
  private static org.hibernate.SessionFactory sessionFactory;
  private static String confFile="hibernate-test.properties";
  private static final ThreadLocal<Session> threadSession=new ThreadLocal<Session>();
  private hibernate_class_43(){
  }
  public static void buildSessionFactory(){
    Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
      if (sessionFactory == null) {
        try {
          Properties properties=new Properties();
          properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
          configuration.setProperties(properties);
        }
 catch (        Exception e) {
          log.fatal("cannot load the specified hibernate properties file: " + confFile);
          throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
        }
        sessionFactory=configuration.configure().buildSessionFactory();
      }
    }
  }
  public static SessionFactory getSessionFactory(){
    if (sessionFactory == null) {
      buildSessionFactory();
    }
    return sessionFactory;
  }
  public static Session getCurrentSession(){
    if (!getSessionFactory().getCurrentSession().isOpen())     getSessionFactory().openSession();
    return getSessionFactory().getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.Properties;
import org.apache.log4j.Logger;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
public class hibernate_class_43 {
  private static Logger log=Logger.getLogger(hibernate_class_43.class);
  private static org.hibernate.SessionFactory sessionFactory;
  private static String confFile="hibernate-test.properties";
  private static final ThreadLocal<Session> threadSession=new ThreadLocal<Session>();
  private hibernate_class_43(){
  }
  public static void buildSessionFactory(){
    Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
      if (sessionFactory == null) {
        try {
          Properties properties=new Properties();
          properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
          configuration.setProperties(properties);
        }
 catch (        Exception e) {
          log.fatal("cannot load the specified hibernate properties file: " + confFile);
          throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
        }
        sessionFactory=configuration.configure().buildSessionFactory();
      }
    }
  }
  public static SessionFactory getSessionFactory(){
    if (sessionFactory == null) {
      buildSessionFactory();
    }
    return sessionFactory;
  }
  public static Session getCurrentSession(){
    if (!getSessionFactory().getCurrentSession().isOpen())     getSessionFactory().openSession();
    return getSessionFactory().getCurrentSession();
  }
}

For node: sessionFactory == null expected fqn: boolean with type: Type38 got: boolean
Did not find solution for node: sessionFactory with type Type21
Did not find solution for node: null with type Type64
For node: buildSessionFactory() expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: buildSessionFactory
For node: buildSessionFactory expected fqn: void with type: Type2 got: void
Did not find solution for node: sessionFactory with type Type21
For node: Session expected fqn: org.hibernate.Session with type: Type3 got: org.hibernate.Session
For node: Session expected fqn: org.hibernate.Session with type: Type3 got: org.hibernate.Session
Cannot find matching typeVariable for: getCurrentSession
Cannot find matching typeVariable for: public static Session getCurrentSession(){
  if (!getSessionFactory().getCurrentSession().isOpen())   getSessionFactory().openSession();
  return getSessionFactory().getCurrentSession();
}

Cannot find matching typeVariable for: public class hibernate_class_43 {
  private static Logger log=Logger.getLogger(hibernate_class_43.class);
  private static org.hibernate.SessionFactory sessionFactory;
  private static String confFile="hibernate-test.properties";
  private static final ThreadLocal<Session> threadSession=new ThreadLocal<Session>();
  private hibernate_class_43(){
  }
  public static void buildSessionFactory(){
    Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
      if (sessionFactory == null) {
        try {
          Properties properties=new Properties();
          properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
          configuration.setProperties(properties);
        }
 catch (        Exception e) {
          log.fatal("cannot load the specified hibernate properties file: " + confFile);
          throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
        }
        sessionFactory=configuration.configure().buildSessionFactory();
      }
    }
  }
  public static SessionFactory getSessionFactory(){
    if (sessionFactory == null) {
      buildSessionFactory();
    }
    return sessionFactory;
  }
  public static Session getCurrentSession(){
    if (!getSessionFactory().getCurrentSession().isOpen())     getSessionFactory().openSession();
    return getSessionFactory().getCurrentSession();
  }
}

Cannot find matching typeVariable for: import java.util.Properties;
import org.apache.log4j.Logger;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
public class hibernate_class_43 {
  private static Logger log=Logger.getLogger(hibernate_class_43.class);
  private static org.hibernate.SessionFactory sessionFactory;
  private static String confFile="hibernate-test.properties";
  private static final ThreadLocal<Session> threadSession=new ThreadLocal<Session>();
  private hibernate_class_43(){
  }
  public static void buildSessionFactory(){
    Configuration configuration=new Configuration();
synchronized (hibernate_class_43.class) {
      if (sessionFactory == null) {
        try {
          Properties properties=new Properties();
          properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
          configuration.setProperties(properties);
        }
 catch (        Exception e) {
          log.fatal("cannot load the specified hibernate properties file: " + confFile);
          throw new RuntimeException("cannot load the specified hibernate properties file : " + confFile,e);
        }
        sessionFactory=configuration.configure().buildSessionFactory();
      }
    }
  }
  public static SessionFactory getSessionFactory(){
    if (sessionFactory == null) {
      buildSessionFactory();
    }
    return sessionFactory;
  }
  public static Session getCurrentSession(){
    if (!getSessionFactory().getCurrentSession().isOpen())     getSessionFactory().openSession();
    return getSessionFactory().getCurrentSession();
  }
}

For node: !getSessionFactory().getCurrentSession().isOpen() expected fqn: boolean with type: Type67 got: java.lang.Number
For node: getSessionFactory().getCurrentSession().isOpen() expected fqn: boolean with type: Type67 got: java.lang.Number
Did not find solution for node: getSessionFactory().getCurrentSession() with type Type65
Did not find solution for node: getSessionFactory() with type Type5
Cannot find matching typeVariable for: getSessionFactory
Did not find solution for node: getSessionFactory with type Type5
Cannot find matching typeVariable for: getCurrentSession
Did not find solution for node: getCurrentSession with type Type65
Cannot find matching typeVariable for: isOpen
For node: isOpen expected fqn: boolean with type: Type67 got: java.lang.Number
Did not find solution for node: getSessionFactory().openSession() with type Type70
Did not find solution for node: getSessionFactory() with type Type5
Cannot find matching typeVariable for: getSessionFactory
Did not find solution for node: getSessionFactory with type Type5
Cannot find matching typeVariable for: openSession
Did not find solution for node: openSession with type Type70
Did not find solution for node: getSessionFactory().getCurrentSession() with type Type66
Did not find solution for node: getSessionFactory() with type Type5
Cannot find matching typeVariable for: getSessionFactory
Did not find solution for node: getSessionFactory with type Type5
Cannot find matching typeVariable for: getCurrentSession
Did not find solution for node: getCurrentSession with type Type66
{Checked=118, Analyzed=56, Unsolved=62, Incorrect=7, Correct=49}
=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
boolean=PrefixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=ClassInstanceCreation: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ParameterizedType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SimpleName: {Checked=19, Analyzed=12, Unsolved=7, Incorrect=2, Correct=10}
java=SimpleType: {Checked=7, Analyzed=5, Unsolved=2, Incorrect=2, Correct=3}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=TypeLiteral: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
null=NullLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.apache.=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.apache.=SimpleName: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
org.apache.=SimpleType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.apache.=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=MethodInvocation: {Checked=9, Analyzed=2, Unsolved=7, Incorrect=0, Correct=2}
org.hibernate.=QualifiedName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=SimpleName: {Checked=23, Analyzed=10, Unsolved=13, Incorrect=0, Correct=10}
org.hibernate.=SimpleType: {Checked=7, Analyzed=5, Unsolved=2, Incorrect=0, Correct=5}
org.hibernate.=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
void=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
Total stats
{Checked=118, Analyzed=56, Unsolved=62, Incorrect=7, Correct=49}
=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
boolean=PrefixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=ClassInstanceCreation: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ParameterizedType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SimpleName: {Checked=19, Analyzed=12, Unsolved=7, Incorrect=2, Correct=10}
java=SimpleType: {Checked=7, Analyzed=5, Unsolved=2, Incorrect=2, Correct=3}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=TypeLiteral: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
null=NullLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.apache.=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.apache.=SimpleName: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
org.apache.=SimpleType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.apache.=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=MethodInvocation: {Checked=9, Analyzed=2, Unsolved=7, Incorrect=0, Correct=2}
org.hibernate.=QualifiedName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=SimpleName: {Checked=23, Analyzed=10, Unsolved=13, Incorrect=0, Correct=10}
org.hibernate.=SimpleType: {Checked=7, Analyzed=5, Unsolved=2, Incorrect=0, Correct=5}
org.hibernate.=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
void=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
,SimpleName,0,4,0,0,4
,SimpleType,0,3,0,0,3
boolean,InfixExpression,2,2,2,0,0
boolean,MethodInvocation,1,1,0,1,0
boolean,PrefixExpression,1,1,0,1,0
boolean,SimpleName,1,1,0,1,0
java,ClassInstanceCreation,2,3,2,0,1
java,InfixExpression,2,2,2,0,0
java,MethodInvocation,0,2,0,0,2
java,ParameterizedType,2,2,2,0,0
java,SimpleName,12,19,10,2,7
java,SimpleType,5,7,3,2,2
java,SingleVariableDeclaration,1,1,1,0,0
java,StringLiteral,3,3,3,0,0
java,TypeLiteral,0,3,0,0,3
java,VariableDeclarationFragment,2,3,2,0,1
null,NullLiteral,0,2,0,0,2
org.apache.,MethodInvocation,0,1,0,0,1
org.apache.,SimpleName,0,5,0,0,5
org.apache.,SimpleType,0,1,0,0,1
org.apache.,VariableDeclarationFragment,0,1,0,0,1
org.hibernate.,Assignment,0,1,0,0,1
org.hibernate.,ClassInstanceCreation,1,1,1,0,0
org.hibernate.,MethodInvocation,2,9,2,0,7
org.hibernate.,QualifiedName,0,1,0,0,1
org.hibernate.,SimpleName,10,23,10,0,13
org.hibernate.,SimpleType,5,7,5,0,2
org.hibernate.,VariableDeclarationFragment,1,2,1,0,1
void,MethodInvocation,1,3,1,0,2
void,PrimitiveType,1,1,1,0,0
void,SimpleName,1,3,1,0,2
