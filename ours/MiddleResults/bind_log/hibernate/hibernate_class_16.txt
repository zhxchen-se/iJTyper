echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/hibernate_class_16.java
Expect check=62
Cannot find matching typeVariable for: /** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

Cannot find matching typeVariable for: hibernate_class_16
Cannot find matching typeVariable for: /** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import java.awt.Event;
import java.util.*;
/** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

Cannot find matching typeVariable for: public class Events {
  org.hibernate.Session hibernateSession;
  public void setHibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  public void sethibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  @SuppressWarnings("unchecked") public String execute(){
    List<Event> events=hibernateSession.createQuery("from Event").list();
    for (    Event theEvent : events) {
    }
    return "success";
  }
}

Did not find solution for node: Events with type Type2
Did not find solution for node: org.hibernate.Session with type Type5
Did not find solution for node: org.hibernate.Session with type Type5
No match for actual type QualifiedName: org.hibernate and also not find solution for: Type6
No match for actual type SimpleName: org and also not find solution for: Type7
Cannot find matching typeVariable for: Session
Did not find solution for node: Session with type Type5
Cannot find matching typeVariable for: hibernateSession
Did not find solution for node: hibernateSession with type Type5
Cannot find matching typeVariable for: hibernateSession
Cannot find matching typeVariable for: org.hibernate.Session hibernateSession;

Cannot find matching typeVariable for: public class Events {
  org.hibernate.Session hibernateSession;
  public void setHibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  public void sethibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  @SuppressWarnings("unchecked") public String execute(){
    List<Event> events=hibernateSession.createQuery("from Event").list();
    for (    Event theEvent : events) {
    }
    return "success";
  }
}

Cannot find matching typeVariable for: /** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import java.awt.Event;
import java.util.*;
/** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: setHibernateSession
Cannot find matching typeVariable for: public void setHibernateSession(org.hibernate.Session hibernateSession) throws Exception {
  this.hibernateSession=hibernateSession;
}

Cannot find matching typeVariable for: public class Events {
  org.hibernate.Session hibernateSession;
  public void setHibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  public void sethibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  @SuppressWarnings("unchecked") public String execute(){
    List<Event> events=hibernateSession.createQuery("from Event").list();
    for (    Event theEvent : events) {
    }
    return "success";
  }
}

Cannot find matching typeVariable for: /** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import java.awt.Event;
import java.util.*;
/** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

Cannot find matching typeVariable for: org.hibernate.Session hibernateSession
Did not find solution for node: org.hibernate.Session hibernateSession with type Type5
Did not find solution for node: org.hibernate.Session with type Type5
Did not find solution for node: org.hibernate.Session with type Type5
No match for actual type QualifiedName: org.hibernate and also not find solution for: Type6
No match for actual type SimpleName: org and also not find solution for: Type7
Cannot find matching typeVariable for: Session
Did not find solution for node: Session with type Type5
Did not find solution for node: hibernateSession with type Type5
For node: Exception expected fqn: java.lang.Exception with type: Type8 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type8 got: java.lang.Exception
Did not find solution for node: this.hibernateSession=hibernateSession with type Type5
Did not find solution for node: this.hibernateSession with type Type5
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: hibernateSession
Did not find solution for node: hibernateSession with type Type5
Cannot find matching typeVariable for: hibernateSession
Did not find solution for node: hibernateSession with type Type5
For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: sethibernateSession
Cannot find matching typeVariable for: public void sethibernateSession(org.hibernate.Session hibernateSession) throws Exception {
  this.hibernateSession=hibernateSession;
}

Cannot find matching typeVariable for: public class Events {
  org.hibernate.Session hibernateSession;
  public void setHibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  public void sethibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  @SuppressWarnings("unchecked") public String execute(){
    List<Event> events=hibernateSession.createQuery("from Event").list();
    for (    Event theEvent : events) {
    }
    return "success";
  }
}

Cannot find matching typeVariable for: /** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import java.awt.Event;
import java.util.*;
/** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

Cannot find matching typeVariable for: org.hibernate.Session hibernateSession
Did not find solution for node: org.hibernate.Session hibernateSession with type Type5
Did not find solution for node: org.hibernate.Session with type Type5
Did not find solution for node: org.hibernate.Session with type Type5
No match for actual type QualifiedName: org.hibernate and also not find solution for: Type6
No match for actual type SimpleName: org and also not find solution for: Type7
Cannot find matching typeVariable for: Session
Did not find solution for node: Session with type Type5
Did not find solution for node: hibernateSession with type Type5
For node: Exception expected fqn: java.lang.Exception with type: Type8 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type8 got: java.lang.Exception
Did not find solution for node: this.hibernateSession=hibernateSession with type Type5
Did not find solution for node: this.hibernateSession with type Type5
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: hibernateSession
Did not find solution for node: hibernateSession with type Type5
Cannot find matching typeVariable for: hibernateSession
Did not find solution for node: hibernateSession with type Type5
For node: @SuppressWarnings("unchecked") expected fqn: java.lang.SuppressWarnings with type: Type10 got: java.lang.SuppressWarnings
For node: SuppressWarnings expected fqn: java.lang.SuppressWarnings with type: Type10 got: java.lang.SuppressWarnings
For node: "unchecked" expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: execute
Cannot find matching typeVariable for: @SuppressWarnings("unchecked") public String execute(){
  List<Event> events=hibernateSession.createQuery("from Event").list();
  for (  Event theEvent : events) {
  }
  return "success";
}

Cannot find matching typeVariable for: public class Events {
  org.hibernate.Session hibernateSession;
  public void setHibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  public void sethibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  @SuppressWarnings("unchecked") public String execute(){
    List<Event> events=hibernateSession.createQuery("from Event").list();
    for (    Event theEvent : events) {
    }
    return "success";
  }
}

Cannot find matching typeVariable for: /** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import java.awt.Event;
import java.util.*;
/** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

Did not find solution for node: List<Event> with type Type13=Type11<Type12>
For node: List expected fqn: java.util.List<java.awt.Event> with type: Type11 got: java.util.List
For node: List expected fqn: java.util.List<java.awt.Event> with type: Type11 got: java.util.List
Did not find solution for node: Event with type Type12
Did not find solution for node: Event with type Type12
Cannot find matching typeVariable for: events=hibernateSession.createQuery("from Event").list()
Did not find solution for node: events=hibernateSession.createQuery("from Event").list() with type Type13=Type11<Type12>
Did not find solution for node: events with type Type13=Type11<Type12>
Did not find solution for node: hibernateSession.createQuery("from Event").list() with type Type17
Did not find solution for node: hibernateSession.createQuery("from Event") with type Type14
Did not find solution for node: hibernateSession with type Type5
Cannot find matching typeVariable for: createQuery
Did not find solution for node: createQuery with type Type14
For node: "from Event" expected fqn: java.lang.String with type: Type9 got: java.lang.String
Cannot find matching typeVariable for: list
Did not find solution for node: list with type Type17
Cannot find matching typeVariable for: Event theEvent
Did not find solution for node: Event theEvent with type Type12
Did not find solution for node: Event with type Type12
Did not find solution for node: Event with type Type12
Did not find solution for node: theEvent with type Type12
Cannot find matching typeVariable for: events
Cannot find matching typeVariable for: for (Event theEvent : events) {
}

Cannot find matching typeVariable for: {
  List<Event> events=hibernateSession.createQuery("from Event").list();
  for (  Event theEvent : events) {
  }
  return "success";
}

Cannot find matching typeVariable for: @SuppressWarnings("unchecked") public String execute(){
  List<Event> events=hibernateSession.createQuery("from Event").list();
  for (  Event theEvent : events) {
  }
  return "success";
}

Cannot find matching typeVariable for: public class Events {
  org.hibernate.Session hibernateSession;
  public void setHibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  public void sethibernateSession(  org.hibernate.Session hibernateSession) throws Exception {
    this.hibernateSession=hibernateSession;
  }
  @SuppressWarnings("unchecked") public String execute(){
    List<Event> events=hibernateSession.createQuery("from Event").list();
    for (    Event theEvent : events) {
    }
    return "success";
  }
}

Cannot find matching typeVariable for: /** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import java.awt.Event;
import java.util.*;
/** 
 * This class represents the data mapper for an employee to the database.
 */
public class hibernate_class_16 {
public class Events {
    org.hibernate.Session hibernateSession;
    public void setHibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    public void sethibernateSession(    org.hibernate.Session hibernateSession) throws Exception {
      this.hibernateSession=hibernateSession;
    }
    @SuppressWarnings("unchecked") public String execute(){
      List<Event> events=hibernateSession.createQuery("from Event").list();
      for (      Event theEvent : events) {
      }
      return "success";
    }
  }
}

For node: "success" expected fqn: java.lang.String with type: Type9 got: java.lang.String
{Checked=54, Analyzed=15, Unsolved=39, Incorrect=2, Correct=13}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ParameterizedType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SimpleName: {Checked=10, Analyzed=5, Unsolved=5, Incorrect=1, Correct=4}
java=SimpleType: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=1, Correct=3}
java=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=StringLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=FieldAccess: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=QualifiedName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
org.hibernate.=SimpleName: {Checked=11, Analyzed=0, Unsolved=11, Incorrect=0, Correct=0}
org.hibernate.=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
org.hibernate.=SingleVariableDeclaration: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
Total stats
{Checked=54, Analyzed=15, Unsolved=39, Incorrect=2, Correct=13}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ParameterizedType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SimpleName: {Checked=10, Analyzed=5, Unsolved=5, Incorrect=1, Correct=4}
java=SimpleType: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=1, Correct=3}
java=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=StringLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=FieldAccess: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=QualifiedName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
org.hibernate.=SimpleName: {Checked=11, Analyzed=0, Unsolved=11, Incorrect=0, Correct=0}
org.hibernate.=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
org.hibernate.=SingleVariableDeclaration: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
,SimpleName,0,1,0,0,1
,ThisExpression,0,2,0,0,2
java,MethodInvocation,0,1,0,0,1
java,ParameterizedType,0,1,0,0,1
java,SimpleName,5,10,4,1,5
java,SimpleType,4,6,3,1,2
java,SingleMemberAnnotation,1,1,1,0,0
java,SingleVariableDeclaration,0,1,0,0,1
java,StringLiteral,3,3,3,0,0
java,VariableDeclarationFragment,0,1,0,0,1
org.hibernate.,Assignment,0,2,0,0,2
org.hibernate.,FieldAccess,0,2,0,0,2
org.hibernate.,MethodInvocation,0,1,0,0,1
org.hibernate.,QualifiedName,0,3,0,0,3
org.hibernate.,SimpleName,0,11,0,0,11
org.hibernate.,SimpleType,0,3,0,0,3
org.hibernate.,SingleVariableDeclaration,0,2,0,0,2
org.hibernate.,VariableDeclarationFragment,0,1,0,0,1
void,PrimitiveType,2,2,2,0,0
