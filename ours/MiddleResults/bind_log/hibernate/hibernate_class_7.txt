echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/hibernate_class_7.java
Expect check=43
Cannot find matching typeVariable for: public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

Cannot find matching typeVariable for: hibernate_class_7
Cannot find matching typeVariable for: public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

Cannot find matching typeVariable for: public class HibernateUtils {
  private final SessionFactory sessionFactory;
  private Session session;
  public HibernateUtils(){
    this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
  }
  public HibernateUtils(  SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
  public Session requestSession(){
    session=sessionFactory.openSession();
    return session;
  }
}

Did not find solution for node: HibernateUtils with type Type2
Did not find solution for node: SessionFactory with type Type13
Did not find solution for node: SessionFactory with type Type13
Cannot find matching typeVariable for: sessionFactory
Did not find solution for node: sessionFactory with type Type13
Cannot find matching typeVariable for: sessionFactory
Cannot find matching typeVariable for: private final SessionFactory sessionFactory;

Cannot find matching typeVariable for: public class HibernateUtils {
  private final SessionFactory sessionFactory;
  private Session session;
  public HibernateUtils(){
    this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
  }
  public HibernateUtils(  SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
  public Session requestSession(){
    session=sessionFactory.openSession();
    return session;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

For node: Session expected fqn: org.hibernate.Session with type: Type4 got: org.hibernate.Session
For node: Session expected fqn: org.hibernate.Session with type: Type4 got: org.hibernate.Session
Cannot find matching typeVariable for: session
For node: session expected fqn: org.hibernate.Session with type: Type4 got: org.hibernate.Session
Cannot find matching typeVariable for: session
Cannot find matching typeVariable for: private Session session;

Cannot find matching typeVariable for: public class HibernateUtils {
  private final SessionFactory sessionFactory;
  private Session session;
  public HibernateUtils(){
    this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
  }
  public HibernateUtils(  SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
  public Session requestSession(){
    session=sessionFactory.openSession();
    return session;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

Cannot find matching typeVariable for: HibernateUtils
Cannot find matching typeVariable for: public HibernateUtils(){
  this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
}

Cannot find matching typeVariable for: public class HibernateUtils {
  private final SessionFactory sessionFactory;
  private Session session;
  public HibernateUtils(){
    this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
  }
  public HibernateUtils(  SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
  public Session requestSession(){
    session=sessionFactory.openSession();
    return session;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

Did not find solution for node: this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory() with type Type13
Did not find solution for node: this.sessionFactory with type Type13
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: sessionFactory
Did not find solution for node: sessionFactory with type Type13
Did not find solution for node: new AnnotationConfiguration().configure().buildSessionFactory() with type Type19
For node: new AnnotationConfiguration().configure() expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type17 got: org.hibernate.cfg.AnnotationConfiguration
For node: new AnnotationConfiguration() expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type14 got: org.hibernate.cfg.AnnotationConfiguration
For node: AnnotationConfiguration expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type14 got: org.hibernate.cfg.AnnotationConfiguration
For node: AnnotationConfiguration expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type14 got: org.hibernate.cfg.AnnotationConfiguration
Cannot find matching typeVariable for: configure
For node: configure expected fqn: org.hibernate.cfg.AnnotationConfiguration with type: Type17 got: org.hibernate.cfg.AnnotationConfiguration
Cannot find matching typeVariable for: buildSessionFactory
Did not find solution for node: buildSessionFactory with type Type19
Cannot find matching typeVariable for: HibernateUtils
Cannot find matching typeVariable for: public HibernateUtils(SessionFactory sessionFactory){
  this.sessionFactory=sessionFactory;
}

Cannot find matching typeVariable for: public class HibernateUtils {
  private final SessionFactory sessionFactory;
  private Session session;
  public HibernateUtils(){
    this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
  }
  public HibernateUtils(  SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
  public Session requestSession(){
    session=sessionFactory.openSession();
    return session;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

Cannot find matching typeVariable for: SessionFactory sessionFactory
Did not find solution for node: SessionFactory sessionFactory with type Type13
Did not find solution for node: SessionFactory with type Type13
Did not find solution for node: SessionFactory with type Type13
Did not find solution for node: sessionFactory with type Type13
Did not find solution for node: this.sessionFactory=sessionFactory with type Type13
Did not find solution for node: this.sessionFactory with type Type13
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: sessionFactory
Did not find solution for node: sessionFactory with type Type13
Cannot find matching typeVariable for: sessionFactory
Did not find solution for node: sessionFactory with type Type13
For node: Session expected fqn: org.hibernate.Session with type: Type4 got: org.hibernate.Session
For node: Session expected fqn: org.hibernate.Session with type: Type4 got: org.hibernate.Session
Cannot find matching typeVariable for: requestSession
Cannot find matching typeVariable for: /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
public Session requestSession(){
  session=sessionFactory.openSession();
  return session;
}

Cannot find matching typeVariable for: public class HibernateUtils {
  private final SessionFactory sessionFactory;
  private Session session;
  public HibernateUtils(){
    this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
  }
  public HibernateUtils(  SessionFactory sessionFactory){
    this.sessionFactory=sessionFactory;
  }
  /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
  public Session requestSession(){
    session=sessionFactory.openSession();
    return session;
  }
}

Cannot find matching typeVariable for: public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

Cannot find matching typeVariable for: import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
public class hibernate_class_7 {
public class HibernateUtils {
    private final SessionFactory sessionFactory;
    private Session session;
    public HibernateUtils(){
      this.sessionFactory=new AnnotationConfiguration().configure().buildSessionFactory();
    }
    public HibernateUtils(    SessionFactory sessionFactory){
      this.sessionFactory=sessionFactory;
    }
    /** 
 * this is the function that return a session.So i'm free to implements any type of session in here.
 */
    public Session requestSession(){
      session=sessionFactory.openSession();
      return session;
    }
  }
}

For node: session=sessionFactory.openSession() expected fqn: org.hibernate.Session with type: Type4 got: org.hibernate.Session
For node: session expected fqn: org.hibernate.Session with type: Type4 got: org.hibernate.Session
Did not find solution for node: sessionFactory.openSession() with type Type21
Did not find solution for node: sessionFactory with type Type13
Cannot find matching typeVariable for: openSession
Did not find solution for node: openSession with type Type21
For node: session expected fqn: org.hibernate.Session with type: Type4 got: org.hibernate.Session
{Checked=35, Analyzed=13, Unsolved=22, Incorrect=0, Correct=13}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=Assignment: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
org.hibernate.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=FieldAccess: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
org.hibernate.=SimpleName: {Checked=15, Analyzed=6, Unsolved=9, Incorrect=0, Correct=6}
org.hibernate.=SimpleType: {Checked=5, Analyzed=3, Unsolved=2, Incorrect=0, Correct=3}
org.hibernate.=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
Total stats
{Checked=35, Analyzed=13, Unsolved=22, Incorrect=0, Correct=13}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=Assignment: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
org.hibernate.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.hibernate.=FieldAccess: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.hibernate.=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
org.hibernate.=SimpleName: {Checked=15, Analyzed=6, Unsolved=9, Incorrect=0, Correct=6}
org.hibernate.=SimpleType: {Checked=5, Analyzed=3, Unsolved=2, Incorrect=0, Correct=3}
org.hibernate.=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.hibernate.=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
,SimpleName,0,1,0,0,1
,ThisExpression,0,2,0,0,2
org.hibernate.,Assignment,1,3,1,0,2
org.hibernate.,ClassInstanceCreation,1,1,1,0,0
org.hibernate.,FieldAccess,0,2,0,0,2
org.hibernate.,MethodInvocation,1,3,1,0,2
org.hibernate.,SimpleName,6,15,6,0,9
org.hibernate.,SimpleType,3,5,3,0,2
org.hibernate.,SingleVariableDeclaration,0,1,0,0,1
org.hibernate.,VariableDeclarationFragment,1,2,1,0,1
