echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/Android38.java
Expect check=626
Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Did not find solution for node: Android38 with type Type1
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: serviceDomain="http://staging.abaqus.net"
For node: serviceDomain="http://staging.abaqus.net" expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: serviceDomain expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: "http://staging.abaqus.net" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: postUrl=serviceDomain + "/geo/upl/wupload/pictures"
For node: postUrl=serviceDomain + "/geo/upl/wupload/pictures" expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: postUrl expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: serviceDomain + "/geo/upl/wupload/pictures" expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: serviceDomain expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: "/geo/upl/wupload/pictures" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: CRLF="\r\n"
For node: CRLF="\r\n" expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: CRLF expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: "\r\n" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: twoHyphens="--"
For node: twoHyphens="--" expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: twoHyphens expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: "--" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: boundary="*****mgd*****"
For node: boundary="*****mgd*****" expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: boundary expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: "*****mgd*****" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: name=null
For node: name=null expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: name expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: null expected fqn: null with type: Type47 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: password=null
For node: password=null expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: password expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: null expected fqn: null with type: Type48 got: java.lang.String
For node: DataOutputStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
For node: DataOutputStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: dataStream=null
For node: dataStream=null expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
For node: null expected fqn: null with type: Type49 got: java.io.DataOutputStream
Cannot find matching typeVariable for: enum ReturnCode {noPicture, unknown, http201, http400, http401, http403, http404, http500}

Cannot find matching typeVariable for: ReturnCode
Cannot find matching typeVariable for: enum ReturnCode {noPicture, unknown, http201, http400, http401, http403, http404, http500}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: noPicture
Cannot find matching typeVariable for: enum ReturnCode {noPicture, unknown, http201, http400, http401, http403, http404, http500}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: unknown
Cannot find matching typeVariable for: enum ReturnCode {noPicture, unknown, http201, http400, http401, http403, http404, http500}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: http201
Cannot find matching typeVariable for: enum ReturnCode {noPicture, unknown, http201, http400, http401, http403, http404, http500}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: http400
Cannot find matching typeVariable for: enum ReturnCode {noPicture, unknown, http201, http400, http401, http403, http404, http500}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: http401
Cannot find matching typeVariable for: enum ReturnCode {noPicture, unknown, http201, http400, http401, http403, http404, http500}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: http403
Cannot find matching typeVariable for: enum ReturnCode {noPicture, unknown, http201, http400, http401, http403, http404, http500}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: http404
Cannot find matching typeVariable for: enum ReturnCode {noPicture, unknown, http201, http400, http401, http403, http404, http500}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: http500
Cannot find matching typeVariable for: enum ReturnCode {noPicture, unknown, http201, http400, http401, http403, http404, http500}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: Android38
Cannot find matching typeVariable for: public Android38(String name,String password){
  this.name=name;
  this.password=password;
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: String name
For node: String name expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: name expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: String password
For node: String password expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: password expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: this.name=name expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: this.name expected fqn: java.lang.String with type: Type2 got: java.lang.String
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: name
For node: name expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: name
For node: name expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: this.password=password expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: this.password expected fqn: java.lang.String with type: Type2 got: java.lang.String
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: password
For node: password expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: password
For node: password expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: void expected fqn: void with type: Type4 got: void
Cannot find matching typeVariable for: setServiceDomain
Cannot find matching typeVariable for: public static void setServiceDomain(String domainName){
  serviceDomain=domainName;
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: String domainName
For node: String domainName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: domainName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: serviceDomain=domainName expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: serviceDomain expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: domainName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: getServiceDomain
Cannot find matching typeVariable for: public static String getServiceDomain(){
  return serviceDomain;
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

For node: serviceDomain expected fqn: java.lang.String with type: Type2 got: java.lang.String
Did not find solution for node: ReturnCode with type Type5
Did not find solution for node: ReturnCode with type Type5
Cannot find matching typeVariable for: uploadPicture
Cannot find matching typeVariable for: public ReturnCode uploadPicture(String pictureFileName){
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: String pictureFileName
For node: String pictureFileName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: pictureFileName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: File expected fqn: java.io.File with type: Type50 got: java.io.File
For node: File expected fqn: java.io.File with type: Type50 got: java.io.File
Cannot find matching typeVariable for: uploadFile=new File(pictureFileName)
For node: uploadFile=new File(pictureFileName) expected fqn: java.io.File with type: Type50 got: java.io.File
For node: uploadFile expected fqn: java.io.File with type: Type50 got: java.io.File
For node: new File(pictureFileName) expected fqn: java.io.File with type: Type50 got: java.io.File
For node: File expected fqn: java.io.File with type: Type50 got: java.io.File
For node: File expected fqn: java.io.File with type: Type50 got: java.io.File
For node: pictureFileName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: uploadFile.exists() expected fqn: boolean with type: Type53 got: boolean
For node: uploadFile expected fqn: java.io.File with type: Type50 got: java.io.File
Cannot find matching typeVariable for: exists
For node: exists expected fqn: boolean with type: Type53 got: boolean
For node: FileInputStream expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
For node: FileInputStream expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
Cannot find matching typeVariable for: fileInputStream=new FileInputStream(uploadFile)
For node: fileInputStream=new FileInputStream(uploadFile) expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
For node: fileInputStream expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
For node: new FileInputStream(uploadFile) expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
For node: FileInputStream expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
For node: FileInputStream expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
For node: uploadFile expected fqn: java.io.File with type: Type50 got: java.io.File
For node: URL expected fqn: java.net.URL with type: Type58 got: java.net.URL
For node: URL expected fqn: java.net.URL with type: Type58 got: java.net.URL
Cannot find matching typeVariable for: connectURL=new URL(postUrl)
For node: connectURL=new URL(postUrl) expected fqn: java.net.URL with type: Type58 got: java.net.URL
For node: connectURL expected fqn: java.net.URL with type: Type58 got: java.net.URL
For node: new URL(postUrl) expected fqn: java.net.URL with type: Type58 got: java.net.URL
For node: URL expected fqn: java.net.URL with type: Type58 got: java.net.URL
For node: URL expected fqn: java.net.URL with type: Type58 got: java.net.URL
For node: postUrl expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: HttpURLConnection expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: HttpURLConnection expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: conn=(HttpURLConnection)connectURL.openConnection()
For node: conn=(HttpURLConnection)connectURL.openConnection() expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: (HttpURLConnection)connectURL.openConnection() expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: HttpURLConnection expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: HttpURLConnection expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Did not find solution for node: connectURL.openConnection() with type Type62
For node: connectURL expected fqn: java.net.URL with type: Type58 got: java.net.URL
Cannot find matching typeVariable for: openConnection
Did not find solution for node: openConnection with type Type62
For node: conn.setDoInput(true) expected fqn: void with type: Type65 got: void
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: setDoInput
For node: setDoInput expected fqn: void with type: Type65 got: void
For node: true expected fqn: boolean with type: Type64 got: boolean
For node: conn.setDoOutput(true) expected fqn: void with type: Type68 got: void
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: setDoOutput
For node: setDoOutput expected fqn: void with type: Type68 got: void
For node: true expected fqn: boolean with type: Type64 got: boolean
For node: conn.setUseCaches(false) expected fqn: void with type: Type71 got: void
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: setUseCaches
For node: setUseCaches expected fqn: void with type: Type71 got: void
For node: false expected fqn: boolean with type: Type64 got: boolean
For node: conn.setRequestMethod("POST") expected fqn: void with type: Type74 got: void
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: setRequestMethod
For node: setRequestMethod expected fqn: void with type: Type74 got: void
For node: "POST" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: conn.setRequestProperty("User-Agent","myGeodiary-V1") expected fqn: void with type: Type77 got: void
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: setRequestProperty
For node: setRequestProperty expected fqn: void with type: Type77 got: void
For node: "User-Agent" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "myGeodiary-V1" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: conn.setRequestProperty("Connection","Keep-Alive") expected fqn: void with type: Type80 got: void
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: setRequestProperty
For node: setRequestProperty expected fqn: void with type: Type80 got: void
For node: "Connection" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "Keep-Alive" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary) expected fqn: void with type: Type80 got: void
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: setRequestProperty
For node: setRequestProperty expected fqn: void with type: Type80 got: void
For node: "Content-Type" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "multipart/form-data;boundary=" + boundary expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "multipart/form-data;boundary=" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: boundary expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: conn.connect() expected fqn: void with type: Type81 got: void
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: connect
For node: connect expected fqn: void with type: Type81 got: void
For node: dataStream=new DataOutputStream(conn.getOutputStream()) expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
For node: new DataOutputStream(conn.getOutputStream()) expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
For node: DataOutputStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
For node: DataOutputStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
For node: conn.getOutputStream() expected fqn: java.io.OutputStream with type: Type83 got: java.io.OutputStream
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: getOutputStream
For node: getOutputStream expected fqn: java.io.OutputStream with type: Type83 got: java.io.OutputStream
For node: writeFormField("login",name) expected fqn: void with type: Type4 got: void
Cannot find matching typeVariable for: writeFormField
For node: writeFormField expected fqn: void with type: Type4 got: void
For node: "login" expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: name
For node: name expected fqn: java.lang.String with type: Type4 got: void
For node: writeFormField("password",password) expected fqn: void with type: Type4 got: void
Cannot find matching typeVariable for: writeFormField
For node: writeFormField expected fqn: void with type: Type4 got: void
For node: "password" expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: password
For node: password expected fqn: java.lang.String with type: Type4 got: void
For node: writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream) expected fqn: void with type: Type4 got: void
Cannot find matching typeVariable for: writeFileField
For node: writeFileField expected fqn: void with type: Type4 got: void
For node: "photo1" expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: pictureFileName
For node: pictureFileName expected fqn: java.lang.String with type: Type4 got: void
For node: "image/jpg" expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: fileInputStream
For node: fileInputStream expected fqn: java.io.FileInputStream with type: Type4 got: void
For node: dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF) expected fqn: void with type: Type87 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: writeBytes
For node: writeBytes expected fqn: void with type: Type87 got: void
For node: twoHyphens + boundary + twoHyphens+ CRLF expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: twoHyphens expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: boundary expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: twoHyphens
For node: twoHyphens expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: CRLF
For node: CRLF expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: fileInputStream.close() expected fqn: void with type: Type90 got: void
For node: fileInputStream expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
Cannot find matching typeVariable for: close
For node: close expected fqn: void with type: Type90 got: void
For node: dataStream.flush() expected fqn: void with type: Type92 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: flush
For node: flush expected fqn: void with type: Type92 got: void
For node: dataStream.close() expected fqn: void with type: Type94 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: close
For node: close expected fqn: void with type: Type94 got: void
For node: dataStream=null expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
For node: null expected fqn: null with type: Type96 got: java.io.DataOutputStream
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: response=getResponse(conn)
For node: response=getResponse(conn) expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: response expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: getResponse(conn) expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: getResponse
For node: getResponse expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: conn
For node: conn expected fqn: java.net.HttpURLConnection with type: Type2 got: java.lang.String
For node: conn.getResponseCode() expected fqn: int with type: Type97 got: int
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: getResponseCode
For node: getResponseCode expected fqn: int with type: Type97 got: int
Did not find solution for node: response.contains("uploaded successfully") with type Type99
For node: response expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: contains
Did not find solution for node: contains with type Type99
For node: "uploaded successfully" expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: ReturnCode.http201
Cannot find matching typeVariable for: return ReturnCode.http201;

Cannot find matching typeVariable for: if (response.contains("uploaded successfully")) return ReturnCode.http201;
 else return ReturnCode.http401;

Cannot find matching typeVariable for: {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}

Cannot find matching typeVariable for: try {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}
 catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}
catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}
catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}

Cannot find matching typeVariable for: if (uploadFile.exists()) try {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}
 catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}
catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}
catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}
 else {
  return ReturnCode.noPicture;
}

Cannot find matching typeVariable for: {
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public ReturnCode uploadPicture(String pictureFileName){
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Did not find solution for node: ReturnCode with type Type5
Did not find solution for node: http201 with type Type102
Cannot find matching typeVariable for: ReturnCode.http401
Cannot find matching typeVariable for: return ReturnCode.http401;

Cannot find matching typeVariable for: if (response.contains("uploaded successfully")) return ReturnCode.http201;
 else return ReturnCode.http401;

Cannot find matching typeVariable for: {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}

Cannot find matching typeVariable for: try {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}
 catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}
catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}
catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}

Cannot find matching typeVariable for: if (uploadFile.exists()) try {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}
 catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}
catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}
catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}
 else {
  return ReturnCode.noPicture;
}

Cannot find matching typeVariable for: {
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public ReturnCode uploadPicture(String pictureFileName){
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Did not find solution for node: ReturnCode with type Type5
Did not find solution for node: http401 with type Type103
Cannot find matching typeVariable for: MalformedURLException mue
Did not find solution for node: MalformedURLException mue with type Type104
Did not find solution for node: MalformedURLException with type Type104
Did not find solution for node: MalformedURLException with type Type104
Did not find solution for node: mue with type Type104
For node: System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage()) expected fqn: void with type: Type109 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type109 got: void
Did not find solution for node: System with type Type107
For node: out expected fqn: java.io.PrintStream with type: Type108 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type109 got: void
For node: "GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage() expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "GeoPictureUploader.uploadPicture: Malformed URL: " expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: mue.getMessage() expected fqn: java.lang.String with type: Type105 got: java.lang.String
Did not find solution for node: mue with type Type104
Cannot find matching typeVariable for: getMessage
For node: getMessage expected fqn: java.lang.String with type: Type105 got: java.lang.String
Cannot find matching typeVariable for: ReturnCode.http400
Cannot find matching typeVariable for: return ReturnCode.http400;

Cannot find matching typeVariable for: {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}

Cannot find matching typeVariable for: catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}

Cannot find matching typeVariable for: try {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}
 catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}
catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}
catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}

Cannot find matching typeVariable for: if (uploadFile.exists()) try {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}
 catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}
catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}
catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}
 else {
  return ReturnCode.noPicture;
}

Cannot find matching typeVariable for: {
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public ReturnCode uploadPicture(String pictureFileName){
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Did not find solution for node: ReturnCode with type Type5
Did not find solution for node: http400 with type Type112
Cannot find matching typeVariable for: IOException ioe
Did not find solution for node: IOException ioe with type Type113
Did not find solution for node: IOException with type Type113
Did not find solution for node: IOException with type Type113
Did not find solution for node: ioe with type Type113
For node: System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage()) expected fqn: void with type: Type118 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type118 got: void
Did not find solution for node: System with type Type116
For node: out expected fqn: java.io.PrintStream with type: Type117 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type118 got: void
For node: "GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage() expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "GeoPictureUploader.uploadPicture: IOE: " expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: ioe.getMessage() expected fqn: java.lang.String with type: Type114 got: java.lang.String
Did not find solution for node: ioe with type Type113
Cannot find matching typeVariable for: getMessage
For node: getMessage expected fqn: java.lang.String with type: Type114 got: java.lang.String
Cannot find matching typeVariable for: ReturnCode.http500
Cannot find matching typeVariable for: return ReturnCode.http500;

Cannot find matching typeVariable for: {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}

Cannot find matching typeVariable for: catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}

Cannot find matching typeVariable for: try {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}
 catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}
catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}
catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}

Cannot find matching typeVariable for: if (uploadFile.exists()) try {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}
 catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}
catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}
catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}
 else {
  return ReturnCode.noPicture;
}

Cannot find matching typeVariable for: {
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public ReturnCode uploadPicture(String pictureFileName){
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Did not find solution for node: ReturnCode with type Type5
Did not find solution for node: http500 with type Type121
Cannot find matching typeVariable for: Exception e
Did not find solution for node: Exception e with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: e with type Type122
For node: System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage()) expected fqn: void with type: Type127 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type127 got: void
Did not find solution for node: System with type Type125
For node: out expected fqn: java.io.PrintStream with type: Type126 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type127 got: void
For node: "GeoPictureUploader.uploadPicture: unknown: " + e.getMessage() expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "GeoPictureUploader.uploadPicture: unknown: " expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: e.getMessage() expected fqn: java.lang.String with type: Type123 got: java.lang.String
Did not find solution for node: e with type Type122
Cannot find matching typeVariable for: getMessage
For node: getMessage expected fqn: java.lang.String with type: Type123 got: java.lang.String
Cannot find matching typeVariable for: ReturnCode.unknown
Cannot find matching typeVariable for: return ReturnCode.unknown;

Cannot find matching typeVariable for: {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}

Cannot find matching typeVariable for: catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}

Cannot find matching typeVariable for: try {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}
 catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}
catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}
catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}

Cannot find matching typeVariable for: if (uploadFile.exists()) try {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}
 catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}
catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}
catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}
 else {
  return ReturnCode.noPicture;
}

Cannot find matching typeVariable for: {
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public ReturnCode uploadPicture(String pictureFileName){
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Did not find solution for node: ReturnCode with type Type5
Did not find solution for node: unknown with type Type130
Cannot find matching typeVariable for: ReturnCode.noPicture
Cannot find matching typeVariable for: return ReturnCode.noPicture;

Cannot find matching typeVariable for: {
  return ReturnCode.noPicture;
}

Cannot find matching typeVariable for: if (uploadFile.exists()) try {
  FileInputStream fileInputStream=new FileInputStream(uploadFile);
  URL connectURL=new URL(postUrl);
  HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
  conn.setDoInput(true);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setRequestMethod("POST");
  conn.setRequestProperty("User-Agent","myGeodiary-V1");
  conn.setRequestProperty("Connection","Keep-Alive");
  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
  conn.connect();
  dataStream=new DataOutputStream(conn.getOutputStream());
  writeFormField("login",name);
  writeFormField("password",password);
  writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
  dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
  fileInputStream.close();
  dataStream.flush();
  dataStream.close();
  dataStream=null;
  String response=getResponse(conn);
  conn.getResponseCode();
  if (response.contains("uploaded successfully"))   return ReturnCode.http201;
 else   return ReturnCode.http401;
}
 catch (MalformedURLException mue) {
  System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
  return ReturnCode.http400;
}
catch (IOException ioe) {
  System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
  return ReturnCode.http500;
}
catch (Exception e) {
  System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
  return ReturnCode.unknown;
}
 else {
  return ReturnCode.noPicture;
}

Cannot find matching typeVariable for: {
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public ReturnCode uploadPicture(String pictureFileName){
  File uploadFile=new File(pictureFileName);
  if (uploadFile.exists())   try {
    FileInputStream fileInputStream=new FileInputStream(uploadFile);
    URL connectURL=new URL(postUrl);
    HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod("POST");
    conn.setRequestProperty("User-Agent","myGeodiary-V1");
    conn.setRequestProperty("Connection","Keep-Alive");
    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
    conn.connect();
    dataStream=new DataOutputStream(conn.getOutputStream());
    writeFormField("login",name);
    writeFormField("password",password);
    writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
    dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
    fileInputStream.close();
    dataStream.flush();
    dataStream.close();
    dataStream=null;
    String response=getResponse(conn);
    conn.getResponseCode();
    if (response.contains("uploaded successfully"))     return ReturnCode.http201;
 else     return ReturnCode.http401;
  }
 catch (  MalformedURLException mue) {
    System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
    return ReturnCode.http400;
  }
catch (  IOException ioe) {
    System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
    return ReturnCode.http500;
  }
catch (  Exception e) {
    System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
    return ReturnCode.unknown;
  }
 else {
    return ReturnCode.noPicture;
  }
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Did not find solution for node: ReturnCode with type Type5
Did not find solution for node: noPicture with type Type131
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: getResponse
Cannot find matching typeVariable for: /** 
 * @param conn
 * @return
 */
private String getResponse(HttpURLConnection conn){
  try {
    DataInputStream dis=new DataInputStream(conn.getInputStream());
    byte[] data=new byte[1024];
    int len=dis.read(data,0,1024);
    dis.close();
    conn.getResponseCode();
    if (len > 0)     return new String(data,0,len);
 else     return "";
  }
 catch (  Exception e) {
    System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    return "";
  }
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: HttpURLConnection conn
For node: HttpURLConnection conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: HttpURLConnection expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: HttpURLConnection expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: DataInputStream expected fqn: java.io.DataInputStream with type: Type132 got: java.io.DataInputStream
For node: DataInputStream expected fqn: java.io.DataInputStream with type: Type132 got: java.io.DataInputStream
Cannot find matching typeVariable for: dis=new DataInputStream(conn.getInputStream())
For node: dis=new DataInputStream(conn.getInputStream()) expected fqn: java.io.DataInputStream with type: Type132 got: java.io.DataInputStream
For node: dis expected fqn: java.io.DataInputStream with type: Type132 got: java.io.DataInputStream
For node: new DataInputStream(conn.getInputStream()) expected fqn: java.io.DataInputStream with type: Type132 got: java.io.DataInputStream
For node: DataInputStream expected fqn: java.io.DataInputStream with type: Type132 got: java.io.DataInputStream
For node: DataInputStream expected fqn: java.io.DataInputStream with type: Type132 got: java.io.DataInputStream
For node: conn.getInputStream() expected fqn: java.io.InputStream with type: Type133 got: java.io.InputStream
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: getInputStream
For node: getInputStream expected fqn: java.io.InputStream with type: Type133 got: java.io.InputStream
Did not find solution for node: byte[] with type Type138
Did not find solution for node: byte with type Type137
Cannot find matching typeVariable for: data=new byte[1024]
Did not find solution for node: data=new byte[1024] with type Type138
Did not find solution for node: data with type Type138
Did not find solution for node: new byte[1024] with type Type138
Did not find solution for node: byte[] with type Type138
Did not find solution for node: byte with type Type137
For node: 1024 expected fqn: int with type: Type139 got: short
For node: int expected fqn: int with type: Type140 got: int
Cannot find matching typeVariable for: len=dis.read(data,0,1024)
For node: len=dis.read(data,0,1024) expected fqn: int with type: Type140 got: int
For node: len expected fqn: int with type: Type140 got: int
For node: dis.read(data,0,1024) expected fqn: int with type: Type141 got: int
For node: dis expected fqn: java.io.DataInputStream with type: Type132 got: java.io.DataInputStream
Cannot find matching typeVariable for: read
For node: read expected fqn: int with type: Type141 got: int
Did not find solution for node: data with type Type138
Did not find solution for node: 0 with type Type137
For node: 1024 expected fqn: int with type: Type139 got: short
For node: dis.close() expected fqn: void with type: Type146 got: void
For node: dis expected fqn: java.io.DataInputStream with type: Type132 got: java.io.DataInputStream
Cannot find matching typeVariable for: close
For node: close expected fqn: void with type: Type146 got: void
For node: conn.getResponseCode() expected fqn: int with type: Type98 got: int
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: getResponseCode
For node: getResponseCode expected fqn: int with type: Type98 got: int
For node: len > 0 expected fqn: boolean with type: Type64 got: boolean
For node: len expected fqn: int with type: Type140 got: int
Did not find solution for node: 0 with type Type137
For node: new String(data,0,len) expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
Did not find solution for node: data with type Type138
Did not find solution for node: 0 with type Type137
For node: len expected fqn: int with type: Type140 got: int
For node: "" expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: Exception e
Did not find solution for node: Exception e with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: e with type Type122
For node: System.out.println("GeoPictureUploader: biffed it getting HTTPResponse") expected fqn: void with type: Type154 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type154 got: void
Did not find solution for node: System with type Type152
For node: out expected fqn: java.io.PrintStream with type: Type153 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type154 got: void
For node: "GeoPictureUploader: biffed it getting HTTPResponse" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: getResponseOrig
Cannot find matching typeVariable for: /** 
 * this mode of reading response no good either
 */
private String getResponseOrig(HttpURLConnection conn){
  InputStream is=null;
  try {
    is=conn.getInputStream();
    int ch;
    StringBuffer sb=new StringBuffer();
    while ((ch=is.read()) != -1) {
      sb.append((char)ch);
    }
    return sb.toString();
  }
 catch (  Exception e) {
    System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
  }
 finally {
    try {
      if (is != null)       is.close();
    }
 catch (    Exception e) {
    }
  }
  return "";
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: HttpURLConnection conn
For node: HttpURLConnection conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: HttpURLConnection expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: HttpURLConnection expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
For node: InputStream expected fqn: java.io.InputStream with type: Type157 got: java.io.InputStream
For node: InputStream expected fqn: java.io.InputStream with type: Type157 got: java.io.InputStream
Cannot find matching typeVariable for: is=null
For node: is=null expected fqn: java.io.InputStream with type: Type157 got: java.io.InputStream
For node: is expected fqn: java.io.InputStream with type: Type157 got: java.io.InputStream
For node: null expected fqn: null with type: Type158 got: java.io.InputStream
For node: is=conn.getInputStream() expected fqn: java.io.InputStream with type: Type157 got: java.io.InputStream
For node: is expected fqn: java.io.InputStream with type: Type157 got: java.io.InputStream
For node: conn.getInputStream() expected fqn: java.io.InputStream with type: Type134 got: java.io.InputStream
For node: conn expected fqn: java.net.HttpURLConnection with type: Type61 got: java.net.HttpURLConnection
Cannot find matching typeVariable for: getInputStream
For node: getInputStream expected fqn: java.io.InputStream with type: Type134 got: java.io.InputStream
For node: int expected fqn: int with type: Type140 got: int
Cannot find matching typeVariable for: ch
For node: ch expected fqn: int with type: Type140 got: int
Cannot find matching typeVariable for: ch
Cannot find matching typeVariable for: int ch;

Cannot find matching typeVariable for: {
  is=conn.getInputStream();
  int ch;
  StringBuffer sb=new StringBuffer();
  while ((ch=is.read()) != -1) {
    sb.append((char)ch);
  }
  return sb.toString();
}

Cannot find matching typeVariable for: try {
  is=conn.getInputStream();
  int ch;
  StringBuffer sb=new StringBuffer();
  while ((ch=is.read()) != -1) {
    sb.append((char)ch);
  }
  return sb.toString();
}
 catch (Exception e) {
  System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
}
 finally {
  try {
    if (is != null)     is.close();
  }
 catch (  Exception e) {
  }
}

Cannot find matching typeVariable for: {
  InputStream is=null;
  try {
    is=conn.getInputStream();
    int ch;
    StringBuffer sb=new StringBuffer();
    while ((ch=is.read()) != -1) {
      sb.append((char)ch);
    }
    return sb.toString();
  }
 catch (  Exception e) {
    System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
  }
 finally {
    try {
      if (is != null)       is.close();
    }
 catch (    Exception e) {
    }
  }
  return "";
}

Cannot find matching typeVariable for: /** 
 * this mode of reading response no good either
 */
private String getResponseOrig(HttpURLConnection conn){
  InputStream is=null;
  try {
    is=conn.getInputStream();
    int ch;
    StringBuffer sb=new StringBuffer();
    while ((ch=is.read()) != -1) {
      sb.append((char)ch);
    }
    return sb.toString();
  }
 catch (  Exception e) {
    System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
  }
 finally {
    try {
      if (is != null)       is.close();
    }
 catch (    Exception e) {
    }
  }
  return "";
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Did not find solution for node: StringBuffer with type Type159
Did not find solution for node: StringBuffer with type Type159
Cannot find matching typeVariable for: sb=new StringBuffer()
Did not find solution for node: sb=new StringBuffer() with type Type159
Did not find solution for node: sb with type Type159
Did not find solution for node: new StringBuffer() with type Type159
Did not find solution for node: StringBuffer with type Type159
Did not find solution for node: StringBuffer with type Type159
For node: (ch=is.read()) != -1 expected fqn: boolean with type: Type64 got: boolean
For node: (ch=is.read()) expected fqn: int with type: Type140 got: int
For node: ch=is.read() expected fqn: int with type: Type140 got: int
For node: ch expected fqn: int with type: Type140 got: int
For node: is.read() expected fqn: int with type: Type161 got: int
For node: is expected fqn: java.io.InputStream with type: Type157 got: java.io.InputStream
Cannot find matching typeVariable for: read
For node: read expected fqn: int with type: Type161 got: int
Did not find solution for node: -1 with type Type137
Did not find solution for node: 1 with type Type137
Did not find solution for node: sb.append((char)ch) with type Type165
Did not find solution for node: sb with type Type159
Cannot find matching typeVariable for: append
Did not find solution for node: append with type Type165
For node: (char)ch expected fqn: char with type: Type164 got: char
For node: char expected fqn: char with type: Type164 got: char
For node: ch expected fqn: int with type: Type140 got: int
For node: sb.toString() expected fqn: java.lang.String with type: Type168 got: java.lang.String
Did not find solution for node: sb with type Type159
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type168 got: java.lang.String
Cannot find matching typeVariable for: Exception e
Did not find solution for node: Exception e with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: e with type Type122
For node: System.out.println("GeoPictureUploader: biffed it getting HTTPResponse") expected fqn: void with type: Type171 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type171 got: void
Did not find solution for node: System with type Type169
For node: out expected fqn: java.io.PrintStream with type: Type170 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type171 got: void
For node: "GeoPictureUploader: biffed it getting HTTPResponse" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: is != null expected fqn: boolean with type: Type64 got: boolean
For node: is expected fqn: java.io.InputStream with type: Type157 got: java.io.InputStream
Did not find solution for node: null with type Type174
For node: is.close() expected fqn: void with type: Type175 got: void
For node: is expected fqn: java.io.InputStream with type: Type157 got: java.io.InputStream
Cannot find matching typeVariable for: close
For node: close expected fqn: void with type: Type175 got: void
Cannot find matching typeVariable for: Exception e
Did not find solution for node: Exception e with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: e with type Type122
For node: "" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: void expected fqn: void with type: Type4 got: void
Cannot find matching typeVariable for: writeFormField
Cannot find matching typeVariable for: /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
private void writeFormField(String fieldName,String fieldValue){
  try {
    dataStream.writeBytes(twoHyphens + boundary + CRLF);
    dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
    dataStream.writeBytes(CRLF);
    dataStream.writeBytes(fieldValue);
    dataStream.writeBytes(CRLF);
  }
 catch (  Exception e) {
    System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
  }
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: String fieldName
For node: String fieldName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: fieldName expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: String fieldValue
For node: String fieldValue expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: fieldValue expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: dataStream.writeBytes(twoHyphens + boundary + CRLF) expected fqn: void with type: Type89 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: writeBytes
For node: writeBytes expected fqn: void with type: Type89 got: void
For node: twoHyphens + boundary + CRLF expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: twoHyphens expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: boundary expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: CRLF
For node: CRLF expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF) expected fqn: void with type: Type177 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: writeBytes
For node: writeBytes expected fqn: void with type: Type177 got: void
For node: "Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "Content-Disposition: form-data; name=\"" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: fieldName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "\"" expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: CRLF
For node: CRLF expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: dataStream.writeBytes(CRLF) expected fqn: void with type: Type89 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: writeBytes
For node: writeBytes expected fqn: void with type: Type89 got: void
For node: CRLF expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: dataStream.writeBytes(fieldValue) expected fqn: void with type: Type179 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: writeBytes
For node: writeBytes expected fqn: void with type: Type179 got: void
For node: fieldValue expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: dataStream.writeBytes(CRLF) expected fqn: void with type: Type89 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: writeBytes
For node: writeBytes expected fqn: void with type: Type89 got: void
For node: CRLF expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: Exception e
Did not find solution for node: Exception e with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: e with type Type122
For node: System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage()) expected fqn: void with type: Type182 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type182 got: void
Did not find solution for node: System with type Type180
For node: out expected fqn: java.io.PrintStream with type: Type181 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type182 got: void
For node: "GeoPictureUploader.writeFormField: got: " + e.getMessage() expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "GeoPictureUploader.writeFormField: got: " expected fqn: java.lang.String with type: Type46 got: java.lang.String
Did not find solution for node: e.getMessage() with type Type124
Did not find solution for node: e with type Type122
Cannot find matching typeVariable for: getMessage
Did not find solution for node: getMessage with type Type124
For node: void expected fqn: void with type: Type4 got: void
Cannot find matching typeVariable for: writeFileField
Cannot find matching typeVariable for: /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
private void writeFileField(String fieldName,String fieldValue,String type,FileInputStream fis){
  try {
    dataStream.writeBytes(twoHyphens + boundary + CRLF);
    dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
    dataStream.writeBytes("Content-Type: " + type + CRLF);
    dataStream.writeBytes(CRLF);
    int bytesAvailable=fis.available();
    int maxBufferSize=1024;
    int bufferSize=Math.min(bytesAvailable,maxBufferSize);
    byte[] buffer=new byte[bufferSize];
    int bytesRead=fis.read(buffer,0,bufferSize);
    while (bytesRead > 0) {
      dataStream.write(buffer,0,bufferSize);
      bytesAvailable=fis.available();
      bufferSize=Math.min(bytesAvailable,maxBufferSize);
      bytesRead=fis.read(buffer,0,bufferSize);
    }
    dataStream.writeBytes(CRLF);
  }
 catch (  Exception e) {
    System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
  }
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: String fieldName
For node: String fieldName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: fieldName expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: String fieldValue
For node: String fieldValue expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: fieldValue expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: String type
For node: String type expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: type expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: FileInputStream fis
For node: FileInputStream fis expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
For node: FileInputStream expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
For node: FileInputStream expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
For node: fis expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
For node: dataStream.writeBytes(twoHyphens + boundary + CRLF) expected fqn: void with type: Type89 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: writeBytes
For node: writeBytes expected fqn: void with type: Type89 got: void
For node: twoHyphens + boundary + CRLF expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: twoHyphens expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: boundary expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: CRLF
For node: CRLF expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF) expected fqn: void with type: Type179 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: writeBytes
For node: writeBytes expected fqn: void with type: Type179 got: void
For node: "Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "Content-Disposition: form-data; name=\"" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: fieldName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "\";filename=\"" expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: fieldValue
For node: fieldValue expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "\"" expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: CRLF
For node: CRLF expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: dataStream.writeBytes("Content-Type: " + type + CRLF) expected fqn: void with type: Type179 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: writeBytes
For node: writeBytes expected fqn: void with type: Type179 got: void
For node: "Content-Type: " + type + CRLF expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "Content-Type: " expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: type expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: CRLF
For node: CRLF expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: dataStream.writeBytes(CRLF) expected fqn: void with type: Type89 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: writeBytes
For node: writeBytes expected fqn: void with type: Type89 got: void
For node: CRLF expected fqn: java.lang.String with type: Type2 got: java.lang.String
For node: int expected fqn: int with type: Type140 got: int
Cannot find matching typeVariable for: bytesAvailable=fis.available()
For node: bytesAvailable=fis.available() expected fqn: int with type: Type140 got: int
For node: bytesAvailable expected fqn: int with type: Type140 got: int
For node: fis.available() expected fqn: int with type: Type185 got: int
For node: fis expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
Cannot find matching typeVariable for: available
For node: available expected fqn: int with type: Type185 got: int
For node: int expected fqn: int with type: Type140 got: int
Cannot find matching typeVariable for: maxBufferSize=1024
For node: maxBufferSize=1024 expected fqn: int with type: Type140 got: int
For node: maxBufferSize expected fqn: int with type: Type140 got: int
For node: 1024 expected fqn: int with type: Type139 got: short
For node: int expected fqn: int with type: Type140 got: int
Cannot find matching typeVariable for: bufferSize=Math.min(bytesAvailable,maxBufferSize)
For node: bufferSize=Math.min(bytesAvailable,maxBufferSize) expected fqn: int with type: Type140 got: int
For node: bufferSize expected fqn: int with type: Type140 got: int
For node: Math.min(bytesAvailable,maxBufferSize) expected fqn: int with type: Type188 got: int
Did not find solution for node: Math with type Type187
Cannot find matching typeVariable for: min
For node: min expected fqn: int with type: Type188 got: int
For node: bytesAvailable expected fqn: int with type: Type140 got: int
For node: maxBufferSize expected fqn: int with type: Type140 got: int
Did not find solution for node: byte[] with type Type138
Did not find solution for node: byte with type Type137
Cannot find matching typeVariable for: buffer=new byte[bufferSize]
Did not find solution for node: buffer=new byte[bufferSize] with type Type138
Did not find solution for node: buffer with type Type138
Did not find solution for node: new byte[bufferSize] with type Type138
Did not find solution for node: byte[] with type Type138
Did not find solution for node: byte with type Type137
For node: bufferSize expected fqn: int with type: Type140 got: int
For node: int expected fqn: int with type: Type140 got: int
Cannot find matching typeVariable for: bytesRead=fis.read(buffer,0,bufferSize)
For node: bytesRead=fis.read(buffer,0,bufferSize) expected fqn: int with type: Type140 got: int
For node: bytesRead expected fqn: int with type: Type140 got: int
For node: fis.read(buffer,0,bufferSize) expected fqn: int with type: Type192 got: int
For node: fis expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
Cannot find matching typeVariable for: read
For node: read expected fqn: int with type: Type192 got: int
Did not find solution for node: buffer with type Type138
Did not find solution for node: 0 with type Type137
For node: bufferSize expected fqn: int with type: Type140 got: int
For node: bytesRead > 0 expected fqn: boolean with type: Type64 got: boolean
For node: bytesRead expected fqn: int with type: Type140 got: int
Did not find solution for node: 0 with type Type137
For node: dataStream.write(buffer,0,bufferSize) expected fqn: void with type: Type197 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: write
For node: write expected fqn: void with type: Type197 got: void
Did not find solution for node: buffer with type Type138
Did not find solution for node: 0 with type Type137
For node: bufferSize expected fqn: int with type: Type140 got: int
For node: bytesAvailable=fis.available() expected fqn: int with type: Type140 got: int
For node: bytesAvailable expected fqn: int with type: Type140 got: int
For node: fis.available() expected fqn: int with type: Type186 got: int
For node: fis expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
Cannot find matching typeVariable for: available
For node: available expected fqn: int with type: Type186 got: int
For node: bufferSize=Math.min(bytesAvailable,maxBufferSize) expected fqn: int with type: Type140 got: int
For node: bufferSize expected fqn: int with type: Type140 got: int
Did not find solution for node: Math.min(bytesAvailable,maxBufferSize) with type Type191
Did not find solution for node: Math with type Type187
Cannot find matching typeVariable for: min
Did not find solution for node: min with type Type191
For node: bytesAvailable expected fqn: int with type: Type140 got: int
For node: maxBufferSize expected fqn: int with type: Type140 got: int
For node: bytesRead=fis.read(buffer,0,bufferSize) expected fqn: int with type: Type140 got: int
For node: bytesRead expected fqn: int with type: Type140 got: int
For node: fis.read(buffer,0,bufferSize) expected fqn: int with type: Type196 got: int
For node: fis expected fqn: java.io.FileInputStream with type: Type55 got: java.io.FileInputStream
Cannot find matching typeVariable for: read
For node: read expected fqn: int with type: Type196 got: int
Did not find solution for node: buffer with type Type138
Did not find solution for node: 0 with type Type137
For node: bufferSize expected fqn: int with type: Type140 got: int
For node: dataStream.writeBytes(CRLF) expected fqn: void with type: Type89 got: void
For node: dataStream expected fqn: java.io.DataOutputStream with type: Type45 got: java.io.DataOutputStream
Cannot find matching typeVariable for: writeBytes
For node: writeBytes expected fqn: void with type: Type89 got: void
For node: CRLF expected fqn: java.lang.String with type: Type2 got: java.lang.String
Cannot find matching typeVariable for: Exception e
Did not find solution for node: Exception e with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: Exception with type Type122
Did not find solution for node: e with type Type122
For node: System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage()) expected fqn: void with type: Type204 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type204 got: void
Did not find solution for node: System with type Type202
For node: out expected fqn: java.io.PrintStream with type: Type203 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type204 got: void
For node: "GeoPictureUploader.writeFormField: got: " + e.getMessage() expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "GeoPictureUploader.writeFormField: got: " expected fqn: java.lang.String with type: Type46 got: java.lang.String
Did not find solution for node: e.getMessage() with type Type124
Did not find solution for node: e with type Type122
Cannot find matching typeVariable for: getMessage
Did not find solution for node: getMessage with type Type124
For node: void expected fqn: void with type: Type4 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: /** 
 * @param args
 */
public static void main(String[] args){
  if (args.length >= 0) {
    Android38 gpu=new Android38("john","notmyrealpassword");
    String picName=args[0];
    gpu.uploadPicture(picName);
    System.out.printf("done");
  }
}

Cannot find matching typeVariable for: public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: package androidExamples;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
public class Android38 {
  static String serviceDomain="http://staging.abaqus.net";
  static String postUrl=serviceDomain + "/geo/upl/wupload/pictures";
  static String CRLF="\r\n";
  static String twoHyphens="--";
  static String boundary="*****mgd*****";
  private String name=null;
  private String password=null;
  private DataOutputStream dataStream=null;
  enum ReturnCode {  noPicture,   unknown,   http201,   http400,   http401,   http403,   http404,   http500}
  public Android38(  String name,  String password){
    this.name=name;
    this.password=password;
  }
  public static void setServiceDomain(  String domainName){
    serviceDomain=domainName;
  }
  public static String getServiceDomain(){
    return serviceDomain;
  }
  public ReturnCode uploadPicture(  String pictureFileName){
    File uploadFile=new File(pictureFileName);
    if (uploadFile.exists())     try {
      FileInputStream fileInputStream=new FileInputStream(uploadFile);
      URL connectURL=new URL(postUrl);
      HttpURLConnection conn=(HttpURLConnection)connectURL.openConnection();
      conn.setDoInput(true);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setRequestMethod("POST");
      conn.setRequestProperty("User-Agent","myGeodiary-V1");
      conn.setRequestProperty("Connection","Keep-Alive");
      conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);
      conn.connect();
      dataStream=new DataOutputStream(conn.getOutputStream());
      writeFormField("login",name);
      writeFormField("password",password);
      writeFileField("photo1",pictureFileName,"image/jpg",fileInputStream);
      dataStream.writeBytes(twoHyphens + boundary + twoHyphens+ CRLF);
      fileInputStream.close();
      dataStream.flush();
      dataStream.close();
      dataStream=null;
      String response=getResponse(conn);
      conn.getResponseCode();
      if (response.contains("uploaded successfully"))       return ReturnCode.http201;
 else       return ReturnCode.http401;
    }
 catch (    MalformedURLException mue) {
      System.out.println("GeoPictureUploader.uploadPicture: Malformed URL: " + mue.getMessage());
      return ReturnCode.http400;
    }
catch (    IOException ioe) {
      System.out.println("GeoPictureUploader.uploadPicture: IOE: " + ioe.getMessage());
      return ReturnCode.http500;
    }
catch (    Exception e) {
      System.out.println("GeoPictureUploader.uploadPicture: unknown: " + e.getMessage());
      return ReturnCode.unknown;
    }
 else {
      return ReturnCode.noPicture;
    }
  }
  /** 
 * @param conn
 * @return
 */
  private String getResponse(  HttpURLConnection conn){
    try {
      DataInputStream dis=new DataInputStream(conn.getInputStream());
      byte[] data=new byte[1024];
      int len=dis.read(data,0,1024);
      dis.close();
      conn.getResponseCode();
      if (len > 0)       return new String(data,0,len);
 else       return "";
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
      return "";
    }
  }
  /** 
 * this mode of reading response no good either
 */
  private String getResponseOrig(  HttpURLConnection conn){
    InputStream is=null;
    try {
      is=conn.getInputStream();
      int ch;
      StringBuffer sb=new StringBuffer();
      while ((ch=is.read()) != -1) {
        sb.append((char)ch);
      }
      return sb.toString();
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader: biffed it getting HTTPResponse");
    }
 finally {
      try {
        if (is != null)         is.close();
      }
 catch (      Exception e) {
      }
    }
    return "";
  }
  /** 
 * write one form field to dataSream
 * @param fieldName
 * @param fieldValue
 */
  private void writeFormField(  String fieldName,  String fieldValue){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\""+ CRLF);
      dataStream.writeBytes(CRLF);
      dataStream.writeBytes(fieldValue);
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * write one file field to dataSream
 * @param fieldName - name of file field
 * @param fieldValue - file name
 * @param type - mime type
 * @param fileInputStream - stream of bytes that get sent up
 */
  private void writeFileField(  String fieldName,  String fieldValue,  String type,  FileInputStream fis){
    try {
      dataStream.writeBytes(twoHyphens + boundary + CRLF);
      dataStream.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\""+ fieldValue+ "\""+ CRLF);
      dataStream.writeBytes("Content-Type: " + type + CRLF);
      dataStream.writeBytes(CRLF);
      int bytesAvailable=fis.available();
      int maxBufferSize=1024;
      int bufferSize=Math.min(bytesAvailable,maxBufferSize);
      byte[] buffer=new byte[bufferSize];
      int bytesRead=fis.read(buffer,0,bufferSize);
      while (bytesRead > 0) {
        dataStream.write(buffer,0,bufferSize);
        bytesAvailable=fis.available();
        bufferSize=Math.min(bytesAvailable,maxBufferSize);
        bytesRead=fis.read(buffer,0,bufferSize);
      }
      dataStream.writeBytes(CRLF);
    }
 catch (    Exception e) {
      System.out.println("GeoPictureUploader.writeFormField: got: " + e.getMessage());
    }
  }
  /** 
 * @param args
 */
  public static void main(  String[] args){
    if (args.length >= 0) {
      Android38 gpu=new Android38("john","notmyrealpassword");
      String picName=args[0];
      gpu.uploadPicture(picName);
      System.out.printf("done");
    }
  }
}

Cannot find matching typeVariable for: String[] args
Did not find solution for node: String[] args with type Type207
Did not find solution for node: String[] with type Type207
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
Did not find solution for node: args with type Type207
For node: args.length >= 0 expected fqn: boolean with type: Type64 got: boolean
Cannot find matching typeVariable for: args.length
For node: args.length expected fqn: int with type: Type64 got: boolean
Did not find solution for node: args with type Type207
Did not find solution for node: length with type Type208
Did not find solution for node: 0 with type Type137
Did not find solution for node: Android38 with type Type1
Did not find solution for node: Android38 with type Type1
Cannot find matching typeVariable for: gpu=new Android38("john","notmyrealpassword")
Did not find solution for node: gpu=new Android38("john","notmyrealpassword") with type Type1
Did not find solution for node: gpu with type Type1
Did not find solution for node: new Android38("john","notmyrealpassword") with type Type1
Did not find solution for node: Android38 with type Type1
Did not find solution for node: Android38 with type Type1
For node: "john" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: "notmyrealpassword" expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type46 got: java.lang.String
Cannot find matching typeVariable for: picName=args[0]
For node: picName=args[0] expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: picName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: args[0] expected fqn: java.lang.String with type: Type46 got: java.lang.String
Did not find solution for node: args with type Type207
Did not find solution for node: 0 with type Type137
Did not find solution for node: gpu.uploadPicture(picName) with type Type212
Did not find solution for node: gpu with type Type1
Cannot find matching typeVariable for: uploadPicture
Did not find solution for node: uploadPicture with type Type212
For node: picName expected fqn: java.lang.String with type: Type46 got: java.lang.String
For node: System.out.printf("done") expected fqn: java.io.PrintStream with type: Type217 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type217 got: java.io.Console
Did not find solution for node: System with type Type215
For node: out expected fqn: java.io.PrintStream with type: Type216 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type217 got: java.io.Console
For node: "done" expected fqn: java.lang.String with type: Type46 got: java.lang.String
{Checked=599, Analyzed=467, Unsolved=132, Incorrect=32, Correct=435}
=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=19, Analyzed=0, Unsolved=19, Incorrect=0, Correct=0}
=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=ThisExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
boolean=InfixExpression: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
boolean=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
byte=ArrayCreation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
byte=ArrayType: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
byte=PrimitiveType: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
byte=SimpleName: {Checked=7, Analyzed=0, Unsolved=7, Incorrect=0, Correct=0}
byte=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
char=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
char=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=Assignment: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
int=MethodInvocation: {Checked=10, Analyzed=9, Unsolved=1, Incorrect=0, Correct=9}
int=NumberLiteral: {Checked=13, Analyzed=3, Unsolved=10, Incorrect=3, Correct=0}
int=ParenthesizedExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=32, Analyzed=30, Unsolved=2, Incorrect=0, Correct=30}
int=VariableDeclarationFragment: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=ArrayAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=7, Analyzed=6, Unsolved=1, Incorrect=0, Correct=6}
java=FieldAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=InfixExpression: {Checked=13, Analyzed=13, Unsolved=0, Incorrect=0, Correct=13}
java=MethodInvocation: {Checked=13, Analyzed=9, Unsolved=4, Incorrect=1, Correct=8}
java=QualifiedName: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=8, Correct=0}
java=SimpleName: {Checked=210, Analyzed=167, Unsolved=43, Incorrect=14, Correct=153}
java=SimpleType: {Checked=49, Analyzed=39, Unsolved=10, Incorrect=0, Correct=39}
java=SingleVariableDeclaration: {Checked=21, Analyzed=12, Unsolved=9, Incorrect=0, Correct=12}
java=StringLiteral: {Checked=36, Analyzed=36, Unsolved=0, Incorrect=0, Correct=36}
java=VariableDeclarationFragment: {Checked=17, Analyzed=16, Unsolved=1, Incorrect=0, Correct=16}
null=NullLiteral: {Checked=6, Analyzed=5, Unsolved=1, Incorrect=5, Correct=0}
void=MethodInvocation: {Checked=35, Analyzed=35, Unsolved=0, Incorrect=0, Correct=35}
void=PrimitiveType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
void=SimpleName: {Checked=35, Analyzed=35, Unsolved=0, Incorrect=0, Correct=35}
Total stats
{Checked=599, Analyzed=467, Unsolved=132, Incorrect=32, Correct=435}
=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=19, Analyzed=0, Unsolved=19, Incorrect=0, Correct=0}
=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=ThisExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
boolean=InfixExpression: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
boolean=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
byte=ArrayCreation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
byte=ArrayType: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
byte=PrimitiveType: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
byte=SimpleName: {Checked=7, Analyzed=0, Unsolved=7, Incorrect=0, Correct=0}
byte=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
char=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
char=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=Assignment: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
int=MethodInvocation: {Checked=10, Analyzed=9, Unsolved=1, Incorrect=0, Correct=9}
int=NumberLiteral: {Checked=13, Analyzed=3, Unsolved=10, Incorrect=3, Correct=0}
int=ParenthesizedExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=32, Analyzed=30, Unsolved=2, Incorrect=0, Correct=30}
int=VariableDeclarationFragment: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=ArrayAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=CastExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=7, Analyzed=6, Unsolved=1, Incorrect=0, Correct=6}
java=FieldAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=InfixExpression: {Checked=13, Analyzed=13, Unsolved=0, Incorrect=0, Correct=13}
java=MethodInvocation: {Checked=13, Analyzed=9, Unsolved=4, Incorrect=1, Correct=8}
java=QualifiedName: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=8, Correct=0}
java=SimpleName: {Checked=210, Analyzed=167, Unsolved=43, Incorrect=14, Correct=153}
java=SimpleType: {Checked=49, Analyzed=39, Unsolved=10, Incorrect=0, Correct=39}
java=SingleVariableDeclaration: {Checked=21, Analyzed=12, Unsolved=9, Incorrect=0, Correct=12}
java=StringLiteral: {Checked=36, Analyzed=36, Unsolved=0, Incorrect=0, Correct=36}
java=VariableDeclarationFragment: {Checked=17, Analyzed=16, Unsolved=1, Incorrect=0, Correct=16}
null=NullLiteral: {Checked=6, Analyzed=5, Unsolved=1, Incorrect=5, Correct=0}
void=MethodInvocation: {Checked=35, Analyzed=35, Unsolved=0, Incorrect=0, Correct=35}
void=PrimitiveType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
void=SimpleName: {Checked=35, Analyzed=35, Unsolved=0, Incorrect=0, Correct=35}
,ClassInstanceCreation,0,1,0,0,1
,MethodInvocation,0,1,0,0,1
,SimpleName,0,19,0,0,19
,SimpleType,0,3,0,0,3
,ThisExpression,0,2,0,0,2
,VariableDeclarationFragment,0,1,0,0,1
boolean,BooleanLiteral,3,3,3,0,0
boolean,InfixExpression,5,5,5,0,0
boolean,MethodInvocation,1,2,1,0,1
boolean,SimpleName,1,2,1,0,1
byte,ArrayCreation,0,2,0,0,2
byte,ArrayType,0,4,0,0,4
byte,PrimitiveType,0,4,0,0,4
byte,SimpleName,0,7,0,0,7
byte,VariableDeclarationFragment,0,2,0,0,2
char,CastExpression,1,1,1,0,0
char,PrimitiveType,1,1,1,0,0
int,Assignment,4,4,4,0,0
int,MethodInvocation,9,10,9,0,1
int,NumberLiteral,3,13,0,3,10
int,ParenthesizedExpression,1,1,1,0,0
int,PrefixExpression,0,1,0,0,1
int,PrimitiveType,6,6,6,0,0
int,QualifiedName,1,1,0,1,0
int,SimpleName,30,32,30,0,2
int,VariableDeclarationFragment,6,6,6,0,0
java,ArrayAccess,1,1,1,0,0
java,ArrayType,0,1,0,0,1
java,Assignment,6,6,6,0,0
java,CastExpression,1,1,1,0,0
java,ClassInstanceCreation,6,7,6,0,1
java,FieldAccess,2,2,2,0,0
java,InfixExpression,13,13,13,0,0
java,MethodInvocation,9,13,8,1,4
java,QualifiedName,8,8,0,8,0
java,SimpleName,167,210,153,14,43
java,SimpleType,39,49,39,0,10
java,SingleVariableDeclaration,12,21,12,0,9
java,StringLiteral,36,36,36,0,0
java,VariableDeclarationFragment,16,17,16,0,1
null,NullLiteral,5,6,0,5,1
void,MethodInvocation,35,35,35,0,0
void,PrimitiveType,4,4,4,0,0
void,SimpleName,35,35,35,0,0
