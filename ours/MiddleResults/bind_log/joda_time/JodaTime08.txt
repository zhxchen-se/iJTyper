echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/JodaTime08.java
Expect check=36
Cannot find matching typeVariable for: public class JodaTime08 {
  public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours(){
    long twentyDaysInMillis=TimeUnit.MILLISECONDS.convert(20,TimeUnit.DAYS);
    Period twoWeeks=new Period(twentyDaysInMillis,PeriodType.weeks());
    return (2 == twoWeeks.getWeeks()) ? true : false;
  }
}

Cannot find matching typeVariable for: JodaTime08
Cannot find matching typeVariable for: public class JodaTime08 {
  public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours(){
    long twentyDaysInMillis=TimeUnit.MILLISECONDS.convert(20,TimeUnit.DAYS);
    Period twoWeeks=new Period(twentyDaysInMillis,PeriodType.weeks());
    return (2 == twoWeeks.getWeeks()) ? true : false;
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.util.concurrent.TimeUnit;
import org.joda.time.Period;
import org.joda.time.PeriodType;
public class JodaTime08 {
  public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours(){
    long twentyDaysInMillis=TimeUnit.MILLISECONDS.convert(20,TimeUnit.DAYS);
    Period twoWeeks=new Period(twentyDaysInMillis,PeriodType.weeks());
    return (2 == twoWeeks.getWeeks()) ? true : false;
  }
}

Did not find solution for node: boolean with type Type2
Cannot find matching typeVariable for: testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours
Cannot find matching typeVariable for: public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours(){
  long twentyDaysInMillis=TimeUnit.MILLISECONDS.convert(20,TimeUnit.DAYS);
  Period twoWeeks=new Period(twentyDaysInMillis,PeriodType.weeks());
  return (2 == twoWeeks.getWeeks()) ? true : false;
}

Cannot find matching typeVariable for: public class JodaTime08 {
  public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours(){
    long twentyDaysInMillis=TimeUnit.MILLISECONDS.convert(20,TimeUnit.DAYS);
    Period twoWeeks=new Period(twentyDaysInMillis,PeriodType.weeks());
    return (2 == twoWeeks.getWeeks()) ? true : false;
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.util.concurrent.TimeUnit;
import org.joda.time.Period;
import org.joda.time.PeriodType;
public class JodaTime08 {
  public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours(){
    long twentyDaysInMillis=TimeUnit.MILLISECONDS.convert(20,TimeUnit.DAYS);
    Period twoWeeks=new Period(twentyDaysInMillis,PeriodType.weeks());
    return (2 == twoWeeks.getWeeks()) ? true : false;
  }
}

For node: long expected fqn: long with type: Type3 got: long
Cannot find matching typeVariable for: twentyDaysInMillis=TimeUnit.MILLISECONDS.convert(20,TimeUnit.DAYS)
For node: twentyDaysInMillis=TimeUnit.MILLISECONDS.convert(20,TimeUnit.DAYS) expected fqn: long with type: Type3 got: long
For node: twentyDaysInMillis expected fqn: long with type: Type3 got: long
For node: TimeUnit.MILLISECONDS.convert(20,TimeUnit.DAYS) expected fqn: long with type: Type8 got: long
Cannot find matching typeVariable for: TimeUnit.MILLISECONDS
For node: TimeUnit.MILLISECONDS expected fqn: java.util.concurrent.TimeUnit with type: Type8 got: long
For node: TimeUnit expected fqn: java.util.concurrent.TimeUnit with type: Type5 got: java.util.concurrent.TimeUnit
For node: MILLISECONDS expected fqn: java.util.concurrent.TimeUnit with type: Type6 got: java.util.concurrent.TimeUnit
Cannot find matching typeVariable for: convert
For node: convert expected fqn: long with type: Type8 got: long
For node: 20 expected fqn: int with type: Type4 got: byte
Cannot find matching typeVariable for: TimeUnit.DAYS
For node: TimeUnit.DAYS expected fqn: java.util.concurrent.TimeUnit with type: Type8 got: long
For node: TimeUnit expected fqn: java.util.concurrent.TimeUnit with type: Type5 got: java.util.concurrent.TimeUnit
For node: DAYS expected fqn: java.util.concurrent.TimeUnit with type: Type7 got: java.util.concurrent.TimeUnit
For node: Period expected fqn: org.joda.time.Period with type: Type12 got: org.joda.time.Period
For node: Period expected fqn: org.joda.time.Period with type: Type12 got: org.joda.time.Period
Cannot find matching typeVariable for: twoWeeks=new Period(twentyDaysInMillis,PeriodType.weeks())
For node: twoWeeks=new Period(twentyDaysInMillis,PeriodType.weeks()) expected fqn: org.joda.time.Period with type: Type12 got: org.joda.time.Period
For node: twoWeeks expected fqn: org.joda.time.Period with type: Type12 got: org.joda.time.Period
For node: new Period(twentyDaysInMillis,PeriodType.weeks()) expected fqn: org.joda.time.Period with type: Type12 got: org.joda.time.Period
For node: Period expected fqn: org.joda.time.Period with type: Type12 got: org.joda.time.Period
For node: Period expected fqn: org.joda.time.Period with type: Type12 got: org.joda.time.Period
For node: twentyDaysInMillis expected fqn: long with type: Type3 got: long
Did not find solution for node: PeriodType.weeks() with type Type14
Did not find solution for node: PeriodType with type Type13
Cannot find matching typeVariable for: weeks
Did not find solution for node: weeks with type Type14
Did not find solution for node: (2 == twoWeeks.getWeeks()) ? true : false with type Type22
Did not find solution for node: (2 == twoWeeks.getWeeks()) with type Type2
Did not find solution for node: 2 == twoWeeks.getWeeks() with type Type2
For node: 2 expected fqn: int with type: Type4 got: byte
For node: twoWeeks.getWeeks() expected fqn: int with type: Type20 got: int
For node: twoWeeks expected fqn: org.joda.time.Period with type: Type12 got: org.joda.time.Period
Cannot find matching typeVariable for: getWeeks
For node: getWeeks expected fqn: int with type: Type20 got: int
Did not find solution for node: true with type Type2
Did not find solution for node: false with type Type2
{Checked=33, Analyzed=24, Unsolved=9, Incorrect=4, Correct=20}
boolean=BooleanLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=ConditionalExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=ParenthesizedExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
int=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
java=SimpleName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
long=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
long=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
long=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
long=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=SimpleName: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=0, Correct=4}
org.joda.time.=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=33, Analyzed=24, Unsolved=9, Incorrect=4, Correct=20}
boolean=BooleanLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=ConditionalExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=ParenthesizedExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
int=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
java=SimpleName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
long=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
long=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
long=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
long=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=SimpleName: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=0, Correct=4}
org.joda.time.=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean,BooleanLiteral,0,2,0,0,2
boolean,ConditionalExpression,0,1,0,0,1
boolean,InfixExpression,0,1,0,0,1
boolean,ParenthesizedExpression,0,1,0,0,1
boolean,PrimitiveType,0,1,0,0,1
int,MethodInvocation,1,1,1,0,0
int,NumberLiteral,2,2,0,2,0
int,SimpleName,1,1,1,0,0
java,QualifiedName,2,2,0,2,0
java,SimpleName,4,4,4,0,0
long,MethodInvocation,1,1,1,0,0
long,PrimitiveType,1,1,1,0,0
long,SimpleName,3,3,3,0,0
long,VariableDeclarationFragment,1,1,1,0,0
org.joda.time.,ClassInstanceCreation,1,1,1,0,0
org.joda.time.,MethodInvocation,0,1,0,0,1
org.joda.time.,SimpleName,4,6,4,0,2
org.joda.time.,SimpleType,2,2,2,0,0
org.joda.time.,VariableDeclarationFragment,1,1,1,0,0
