echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/JodaTime13.java
Expect check=147
Cannot find matching typeVariable for: public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Did not find solution for node: JodaTime13 with type Type2
For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static void main(String[] args){
}

Cannot find matching typeVariable for: public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import static org.junit.Assert.*;
import org.joda.time.Period;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.junit.Test;
public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Cannot find matching typeVariable for: String[] args
For node: String[] args expected fqn: java.lang.String[] with type: Type24 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type24 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: args expected fqn: java.lang.String[] with type: Type24 got: java.lang.String[]
For node: @Test expected fqn: org.junit.Test with type: Type25 got: org.junit.Test
For node: Test expected fqn: org.junit.Test with type: Type25 got: org.junit.Test
For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: second
Cannot find matching typeVariable for: @Test public void second(){
  assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
}

Cannot find matching typeVariable for: public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import static org.junit.Assert.*;
import org.joda.time.Period;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.junit.Test;
public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Did not find solution for node: assertEquals("00:00:01",OurDateTimeFormatter.format(1000)) with type Type32
Cannot find matching typeVariable for: assertEquals
Did not find solution for node: assertEquals with type Type32
For node: "00:00:01" expected fqn: java.lang.String with type: Type26 got: java.lang.String
Did not find solution for node: OurDateTimeFormatter.format(1000) with type Type28
Did not find solution for node: OurDateTimeFormatter with type Type1
Cannot find matching typeVariable for: format
Did not find solution for node: format with type Type28
Did not find solution for node: 1000 with type Type27
For node: @Test expected fqn: org.junit.Test with type: Type25 got: org.junit.Test
For node: Test expected fqn: org.junit.Test with type: Type25 got: org.junit.Test
For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: minute
Cannot find matching typeVariable for: @Test public void minute(){
  assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
}

Cannot find matching typeVariable for: public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import static org.junit.Assert.*;
import org.joda.time.Period;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.junit.Test;
public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Did not find solution for node: assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60)) with type Type38
Cannot find matching typeVariable for: assertEquals
Did not find solution for node: assertEquals with type Type38
For node: "00:01:00" expected fqn: java.lang.String with type: Type26 got: java.lang.String
Did not find solution for node: OurDateTimeFormatter.format(1000 * 60) with type Type30
Did not find solution for node: OurDateTimeFormatter with type Type1
Cannot find matching typeVariable for: format
Did not find solution for node: format with type Type30
Did not find solution for node: 1000 * 60 with type Type27
Did not find solution for node: 1000 with type Type27
Did not find solution for node: 60 with type Type36
For node: @Test expected fqn: org.junit.Test with type: Type25 got: org.junit.Test
For node: Test expected fqn: org.junit.Test with type: Type25 got: org.junit.Test
For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: hour
Cannot find matching typeVariable for: @Test public void hour(){
  assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
}

Cannot find matching typeVariable for: public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import static org.junit.Assert.*;
import org.joda.time.Period;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.junit.Test;
public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Did not find solution for node: assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60)) with type Type43
Cannot find matching typeVariable for: assertEquals
Did not find solution for node: assertEquals with type Type43
For node: "01:00:00" expected fqn: java.lang.String with type: Type26 got: java.lang.String
Did not find solution for node: OurDateTimeFormatter.format(1000 * 60 * 60) with type Type30
Did not find solution for node: OurDateTimeFormatter with type Type1
Cannot find matching typeVariable for: format
Did not find solution for node: format with type Type30
Did not find solution for node: 1000 * 60 * 60 with type Type27
Did not find solution for node: 1000 with type Type27
Did not find solution for node: 60 with type Type36
Did not find solution for node: 60 with type Type36
For node: @Test expected fqn: org.junit.Test with type: Type25 got: org.junit.Test
For node: Test expected fqn: org.junit.Test with type: Type25 got: org.junit.Test
For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: almostMidnight
Cannot find matching typeVariable for: @Test public void almostMidnight(){
  final int secondsInDay=60 * 60 * 24;
  assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
}

Cannot find matching typeVariable for: public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import static org.junit.Assert.*;
import org.joda.time.Period;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.junit.Test;
public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Did not find solution for node: int with type Type47
Cannot find matching typeVariable for: secondsInDay=60 * 60 * 24
Did not find solution for node: secondsInDay=60 * 60 * 24 with type Type47
Did not find solution for node: secondsInDay with type Type47
Did not find solution for node: 60 * 60 * 24 with type Type36
Did not find solution for node: 60 with type Type36
Did not find solution for node: 60 with type Type36
Did not find solution for node: 24 with type Type36
Did not find solution for node: assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1))) with type Type49
Cannot find matching typeVariable for: assertEquals
Did not find solution for node: assertEquals with type Type49
For node: "23:59:59" expected fqn: java.lang.String with type: Type26 got: java.lang.String
Did not find solution for node: OurDateTimeFormatter.format(1000 * (secondsInDay - 1)) with type Type30
Did not find solution for node: OurDateTimeFormatter with type Type1
Cannot find matching typeVariable for: format
Did not find solution for node: format with type Type30
Did not find solution for node: 1000 * (secondsInDay - 1) with type Type27
Did not find solution for node: 1000 with type Type27
Did not find solution for node: (secondsInDay - 1) with type Type47
Did not find solution for node: secondsInDay - 1 with type Type47
Did not find solution for node: secondsInDay with type Type47
Did not find solution for node: 1 with type Type36
For node: @Test expected fqn: org.junit.Test with type: Type25 got: org.junit.Test
For node: Test expected fqn: org.junit.Test with type: Type25 got: org.junit.Test
For node: void expected fqn: void with type: Type3 got: void
Cannot find matching typeVariable for: twoDaysAndAHalf
Cannot find matching typeVariable for: @Test public void twoDaysAndAHalf(){
  final int secondsInDay=60 * 60 * 24;
  assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
}

Cannot find matching typeVariable for: public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import static org.junit.Assert.*;
import org.joda.time.Period;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.junit.Test;
public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Did not find solution for node: int with type Type47
Cannot find matching typeVariable for: secondsInDay=60 * 60 * 24
Did not find solution for node: secondsInDay=60 * 60 * 24 with type Type47
Did not find solution for node: secondsInDay with type Type47
Did not find solution for node: 60 * 60 * 24 with type Type36
Did not find solution for node: 60 with type Type36
Did not find solution for node: 60 with type Type36
Did not find solution for node: 24 with type Type36
Did not find solution for node: assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2)) with type Type54
Cannot find matching typeVariable for: assertEquals
Did not find solution for node: assertEquals with type Type54
For node: "12:00:00 and 2 days" expected fqn: java.lang.String with type: Type26 got: java.lang.String
Did not find solution for node: OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2) with type Type30
Did not find solution for node: OurDateTimeFormatter with type Type1
Cannot find matching typeVariable for: format
Did not find solution for node: format with type Type30
Did not find solution for node: 1000 * secondsInDay * 5 / 2 with type Type27
Did not find solution for node: 1000 * secondsInDay * 5 with type Type27
Did not find solution for node: 1000 with type Type27
Did not find solution for node: secondsInDay with type Type47
Did not find solution for node: 5 with type Type36
Did not find solution for node: 2 with type Type36
Cannot find matching typeVariable for: public static class OurDateTimeFormatter {
  public OurDateTimeFormatter(){
  }
  private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
  public static String format(  long millis){
    return dateFormat.print(new Period(millis).normalizedStandard());
  }
}

Did not find solution for node: OurDateTimeFormatter with type Type1
Cannot find matching typeVariable for: OurDateTimeFormatter
Cannot find matching typeVariable for: public OurDateTimeFormatter(){
}

Cannot find matching typeVariable for: public static class OurDateTimeFormatter {
  public OurDateTimeFormatter(){
  }
  private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
  public static String format(  long millis){
    return dateFormat.print(new Period(millis).normalizedStandard());
  }
}

Cannot find matching typeVariable for: public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import static org.junit.Assert.*;
import org.joda.time.Period;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.junit.Test;
public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Did not find solution for node: PeriodFormatter with type Type58
Did not find solution for node: PeriodFormatter with type Type58
Cannot find matching typeVariable for: dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter()
Did not find solution for node: dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter() with type Type58
Did not find solution for node: dateFormat with type Type58
For node: new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter() expected fqn: org.joda.time.format.PeriodFormatter with type: Type88 got: org.joda.time.format.PeriodFormatter
For node: new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2) expected fqn: org.joda.time.format.PeriodFormatterBuilder with type: Type85 got: org.joda.time.format.PeriodFormatterBuilder
Did not find solution for node: new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds() with type Type83
Did not find solution for node: new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":") with type Type80
Did not find solution for node: new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2) with type Type77
Did not find solution for node: new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes() with type Type75
Did not find solution for node: new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":") with type Type72
Did not find solution for node: new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours() with type Type70
Did not find solution for node: new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ") with type Type67
Did not find solution for node: new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days") with type Type63
Did not find solution for node: new PeriodFormatterBuilder().appendDays() with type Type61
For node: new PeriodFormatterBuilder() expected fqn: org.joda.time.format.PeriodFormatterBuilder with type: Type59 got: org.joda.time.format.PeriodFormatterBuilder
For node: PeriodFormatterBuilder expected fqn: org.joda.time.format.PeriodFormatterBuilder with type: Type59 got: org.joda.time.format.PeriodFormatterBuilder
For node: PeriodFormatterBuilder expected fqn: org.joda.time.format.PeriodFormatterBuilder with type: Type59 got: org.joda.time.format.PeriodFormatterBuilder
Cannot find matching typeVariable for: appendDays
Did not find solution for node: appendDays with type Type61
Cannot find matching typeVariable for: appendSuffix
Did not find solution for node: appendSuffix with type Type63
For node: " day" expected fqn: java.lang.String with type: Type26 got: java.lang.String
For node: " days" expected fqn: java.lang.String with type: Type26 got: java.lang.String
Cannot find matching typeVariable for: appendSeparator
Did not find solution for node: appendSeparator with type Type67
For node: " " expected fqn: java.lang.String with type: Type26 got: java.lang.String
Cannot find matching typeVariable for: appendHours
Did not find solution for node: appendHours with type Type70
Cannot find matching typeVariable for: appendSeparator
Did not find solution for node: appendSeparator with type Type72
For node: ":" expected fqn: java.lang.String with type: Type26 got: java.lang.String
Cannot find matching typeVariable for: appendMinutes
Did not find solution for node: appendMinutes with type Type75
Cannot find matching typeVariable for: minimumPrintedDigits
Did not find solution for node: minimumPrintedDigits with type Type77
Did not find solution for node: 2 with type Type36
Cannot find matching typeVariable for: appendSeparator
Did not find solution for node: appendSeparator with type Type80
For node: ":" expected fqn: java.lang.String with type: Type26 got: java.lang.String
Cannot find matching typeVariable for: appendSeconds
Did not find solution for node: appendSeconds with type Type83
Cannot find matching typeVariable for: minimumPrintedDigits
For node: minimumPrintedDigits expected fqn: org.joda.time.format.PeriodFormatterBuilder with type: Type85 got: org.joda.time.format.PeriodFormatterBuilder
Did not find solution for node: 2 with type Type36
Cannot find matching typeVariable for: toFormatter
For node: toFormatter expected fqn: org.joda.time.format.PeriodFormatter with type: Type88 got: org.joda.time.format.PeriodFormatter
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: format
Cannot find matching typeVariable for: public static String format(long millis){
  return dateFormat.print(new Period(millis).normalizedStandard());
}

Cannot find matching typeVariable for: public static class OurDateTimeFormatter {
  public OurDateTimeFormatter(){
  }
  private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
  public static String format(  long millis){
    return dateFormat.print(new Period(millis).normalizedStandard());
  }
}

Cannot find matching typeVariable for: public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Cannot find matching typeVariable for: package jodatime;
import static org.junit.Assert.*;
import org.joda.time.Period;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.junit.Test;
public class JodaTime13 {
  public static void main(  String[] args){
  }
  @Test public void second(){
    assertEquals("00:00:01",OurDateTimeFormatter.format(1000));
  }
  @Test public void minute(){
    assertEquals("00:01:00",OurDateTimeFormatter.format(1000 * 60));
  }
  @Test public void hour(){
    assertEquals("01:00:00",OurDateTimeFormatter.format(1000 * 60 * 60));
  }
  @Test public void almostMidnight(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("23:59:59",OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
  }
  @Test public void twoDaysAndAHalf(){
    final int secondsInDay=60 * 60 * 24;
    assertEquals("12:00:00 and 2 days",OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
  }
public static class OurDateTimeFormatter {
    public OurDateTimeFormatter(){
    }
    private final static PeriodFormatter dateFormat=new PeriodFormatterBuilder().appendDays().appendSuffix(" day"," days").appendSeparator(" ").appendHours().appendSeparator(":").appendMinutes().minimumPrintedDigits(2).appendSeparator(":").appendSeconds().minimumPrintedDigits(2).toFormatter();
    public static String format(    long millis){
      return dateFormat.print(new Period(millis).normalizedStandard());
    }
  }
}

Cannot find matching typeVariable for: long millis
For node: long millis expected fqn: long with type: Type90 got: long
For node: long expected fqn: long with type: Type90 got: long
For node: millis expected fqn: long with type: Type90 got: long
Did not find solution for node: dateFormat.print(new Period(millis).normalizedStandard()) with type Type96
Did not find solution for node: dateFormat with type Type58
Cannot find matching typeVariable for: print
Did not find solution for node: print with type Type96
Did not find solution for node: new Period(millis).normalizedStandard() with type Type94
For node: new Period(millis) expected fqn: org.joda.time.Period with type: Type91 got: org.joda.time.Period
For node: Period expected fqn: org.joda.time.Period with type: Type91 got: org.joda.time.Period
For node: Period expected fqn: org.joda.time.Period with type: Type91 got: org.joda.time.Period
For node: millis expected fqn: long with type: Type90 got: long
Cannot find matching typeVariable for: normalizedStandard
Did not find solution for node: normalizedStandard with type Type94
{Checked=137, Analyzed=47, Unsolved=90, Incorrect=0, Correct=47}
=MarkerAnnotation: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
=SimpleName: {Checked=12, Analyzed=5, Unsolved=7, Incorrect=0, Correct=5}
int=InfixExpression: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=19, Analyzed=0, Unsolved=19, Incorrect=0, Correct=0}
int=ParenthesizedExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
java=SimpleName: {Checked=9, Analyzed=3, Unsolved=6, Incorrect=0, Correct=3}
java=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
long=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
long=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
long=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=MethodInvocation: {Checked=12, Analyzed=2, Unsolved=10, Incorrect=0, Correct=2}
org.joda.time.=SimpleName: {Checked=17, Analyzed=4, Unsolved=13, Incorrect=0, Correct=4}
org.joda.time.=SimpleType: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
org.joda.time.=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
void=SimpleName: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
Total stats
{Checked=137, Analyzed=47, Unsolved=90, Incorrect=0, Correct=47}
=MarkerAnnotation: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
=SimpleName: {Checked=12, Analyzed=5, Unsolved=7, Incorrect=0, Correct=5}
int=InfixExpression: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=19, Analyzed=0, Unsolved=19, Incorrect=0, Correct=0}
int=ParenthesizedExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
java=SimpleName: {Checked=9, Analyzed=3, Unsolved=6, Incorrect=0, Correct=3}
java=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
long=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
long=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
long=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=MethodInvocation: {Checked=12, Analyzed=2, Unsolved=10, Incorrect=0, Correct=2}
org.joda.time.=SimpleName: {Checked=17, Analyzed=4, Unsolved=13, Incorrect=0, Correct=4}
org.joda.time.=SimpleType: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
org.joda.time.=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
void=SimpleName: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
,MarkerAnnotation,5,5,5,0,0
,SimpleName,5,12,5,0,7
int,InfixExpression,0,8,0,0,8
int,NumberLiteral,0,19,0,0,19
int,ParenthesizedExpression,0,1,0,0,1
int,PrimitiveType,0,2,0,0,2
int,SimpleName,0,4,0,0,4
int,VariableDeclarationFragment,0,2,0,0,2
java,ArrayType,1,1,1,0,0
java,MethodInvocation,0,6,0,0,6
java,SimpleName,3,9,3,0,6
java,SimpleType,2,2,2,0,0
java,SingleVariableDeclaration,1,1,1,0,0
java,StringLiteral,10,10,10,0,0
long,PrimitiveType,1,1,1,0,0
long,SimpleName,2,2,2,0,0
long,SingleVariableDeclaration,1,1,1,0,0
org.joda.time.,ClassInstanceCreation,2,2,2,0,0
org.joda.time.,MethodInvocation,2,12,2,0,10
org.joda.time.,SimpleName,4,17,4,0,13
org.joda.time.,SimpleType,2,3,2,0,1
org.joda.time.,VariableDeclarationFragment,0,1,0,0,1
void,MethodInvocation,0,5,0,0,5
void,PrimitiveType,6,6,6,0,0
void,SimpleName,0,5,0,0,5
