echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/JodaTime04.java
Expect check=67
Cannot find matching typeVariable for: public class JodaTime04 {
  private ReadableInstant[] startTime;
  private ReadableInstant[] endTime;
  public String foobar(  int dayIndex){
    Period p=new Period(this.startTime[dayIndex],this.endTime[dayIndex]);
    long hours=p.getHours();
    long minutes=p.getMinutes();
    String format=String.format("%%0%dd",2);
    return Long.toString(hours) + ":" + String.format(format,minutes);
  }
}

Did not find solution for node: JodaTime04 with type Type1
For node: ReadableInstant[] expected fqn: org.joda.time.ReadableInstant[] with type: Type4 got: org.joda.time.ReadableInstant[]
For node: ReadableInstant expected fqn: org.joda.time.ReadableInstant with type: Type3 got: org.joda.time.ReadableInstant
For node: ReadableInstant expected fqn: org.joda.time.ReadableInstant with type: Type3 got: org.joda.time.ReadableInstant
Cannot find matching typeVariable for: startTime
For node: startTime expected fqn: org.joda.time.ReadableInstant[] with type: Type4 got: org.joda.time.ReadableInstant[]
Cannot find matching typeVariable for: startTime
Cannot find matching typeVariable for: private ReadableInstant[] startTime;

Cannot find matching typeVariable for: public class JodaTime04 {
  private ReadableInstant[] startTime;
  private ReadableInstant[] endTime;
  public String foobar(  int dayIndex){
    Period p=new Period(this.startTime[dayIndex],this.endTime[dayIndex]);
    long hours=p.getHours();
    long minutes=p.getMinutes();
    String format=String.format("%%0%dd",2);
    return Long.toString(hours) + ":" + String.format(format,minutes);
  }
}

Cannot find matching typeVariable for: package jodatime;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
public class JodaTime04 {
  private ReadableInstant[] startTime;
  private ReadableInstant[] endTime;
  public String foobar(  int dayIndex){
    Period p=new Period(this.startTime[dayIndex],this.endTime[dayIndex]);
    long hours=p.getHours();
    long minutes=p.getMinutes();
    String format=String.format("%%0%dd",2);
    return Long.toString(hours) + ":" + String.format(format,minutes);
  }
}

For node: ReadableInstant[] expected fqn: org.joda.time.ReadableInstant[] with type: Type4 got: org.joda.time.ReadableInstant[]
For node: ReadableInstant expected fqn: org.joda.time.ReadableInstant with type: Type3 got: org.joda.time.ReadableInstant
For node: ReadableInstant expected fqn: org.joda.time.ReadableInstant with type: Type3 got: org.joda.time.ReadableInstant
Cannot find matching typeVariable for: endTime
For node: endTime expected fqn: org.joda.time.ReadableInstant[] with type: Type4 got: org.joda.time.ReadableInstant[]
Cannot find matching typeVariable for: endTime
Cannot find matching typeVariable for: private ReadableInstant[] endTime;

Cannot find matching typeVariable for: public class JodaTime04 {
  private ReadableInstant[] startTime;
  private ReadableInstant[] endTime;
  public String foobar(  int dayIndex){
    Period p=new Period(this.startTime[dayIndex],this.endTime[dayIndex]);
    long hours=p.getHours();
    long minutes=p.getMinutes();
    String format=String.format("%%0%dd",2);
    return Long.toString(hours) + ":" + String.format(format,minutes);
  }
}

Cannot find matching typeVariable for: package jodatime;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
public class JodaTime04 {
  private ReadableInstant[] startTime;
  private ReadableInstant[] endTime;
  public String foobar(  int dayIndex){
    Period p=new Period(this.startTime[dayIndex],this.endTime[dayIndex]);
    long hours=p.getHours();
    long minutes=p.getMinutes();
    String format=String.format("%%0%dd",2);
    return Long.toString(hours) + ":" + String.format(format,minutes);
  }
}

Did not find solution for node: String with type Type2
Did not find solution for node: String with type Type2
Cannot find matching typeVariable for: foobar
Cannot find matching typeVariable for: public String foobar(int dayIndex){
  Period p=new Period(this.startTime[dayIndex],this.endTime[dayIndex]);
  long hours=p.getHours();
  long minutes=p.getMinutes();
  String format=String.format("%%0%dd",2);
  return Long.toString(hours) + ":" + String.format(format,minutes);
}

Cannot find matching typeVariable for: public class JodaTime04 {
  private ReadableInstant[] startTime;
  private ReadableInstant[] endTime;
  public String foobar(  int dayIndex){
    Period p=new Period(this.startTime[dayIndex],this.endTime[dayIndex]);
    long hours=p.getHours();
    long minutes=p.getMinutes();
    String format=String.format("%%0%dd",2);
    return Long.toString(hours) + ":" + String.format(format,minutes);
  }
}

Cannot find matching typeVariable for: package jodatime;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
public class JodaTime04 {
  private ReadableInstant[] startTime;
  private ReadableInstant[] endTime;
  public String foobar(  int dayIndex){
    Period p=new Period(this.startTime[dayIndex],this.endTime[dayIndex]);
    long hours=p.getHours();
    long minutes=p.getMinutes();
    String format=String.format("%%0%dd",2);
    return Long.toString(hours) + ":" + String.format(format,minutes);
  }
}

Cannot find matching typeVariable for: int dayIndex
For node: int dayIndex expected fqn: int with type: Type5 got: int
For node: int expected fqn: int with type: Type5 got: int
For node: dayIndex expected fqn: int with type: Type5 got: int
For node: Period expected fqn: org.joda.time.Period with type: Type6 got: org.joda.time.Period
For node: Period expected fqn: org.joda.time.Period with type: Type6 got: org.joda.time.Period
Cannot find matching typeVariable for: p=new Period(this.startTime[dayIndex],this.endTime[dayIndex])
For node: p=new Period(this.startTime[dayIndex],this.endTime[dayIndex]) expected fqn: org.joda.time.Period with type: Type6 got: org.joda.time.Period
For node: p expected fqn: org.joda.time.Period with type: Type6 got: org.joda.time.Period
For node: new Period(this.startTime[dayIndex],this.endTime[dayIndex]) expected fqn: org.joda.time.Period with type: Type6 got: org.joda.time.Period
For node: Period expected fqn: org.joda.time.Period with type: Type6 got: org.joda.time.Period
For node: Period expected fqn: org.joda.time.Period with type: Type6 got: org.joda.time.Period
For node: this.startTime[dayIndex] expected fqn: org.joda.time.ReadableInstant with type: Type3 got: org.joda.time.ReadableInstant
For node: this.startTime expected fqn: org.joda.time.ReadableInstant[] with type: Type4 got: org.joda.time.ReadableInstant[]
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: startTime
For node: startTime expected fqn: org.joda.time.ReadableInstant[] with type: Type4 got: org.joda.time.ReadableInstant[]
Cannot find matching typeVariable for: dayIndex
For node: dayIndex expected fqn: int with type: Type3 got: org.joda.time.ReadableInstant
For node: this.endTime[dayIndex] expected fqn: org.joda.time.ReadableInstant with type: Type3 got: org.joda.time.ReadableInstant
For node: this.endTime expected fqn: org.joda.time.ReadableInstant[] with type: Type4 got: org.joda.time.ReadableInstant[]
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: endTime
For node: endTime expected fqn: org.joda.time.ReadableInstant[] with type: Type4 got: org.joda.time.ReadableInstant[]
Cannot find matching typeVariable for: dayIndex
For node: dayIndex expected fqn: int with type: Type3 got: org.joda.time.ReadableInstant
Did not find solution for node: long with type Type11
Cannot find matching typeVariable for: hours=p.getHours()
Did not find solution for node: hours=p.getHours() with type Type11
Did not find solution for node: hours with type Type11
Did not find solution for node: p.getHours() with type Type12
For node: p expected fqn: org.joda.time.Period with type: Type6 got: org.joda.time.Period
Cannot find matching typeVariable for: getHours
Did not find solution for node: getHours with type Type12
Did not find solution for node: long with type Type11
Cannot find matching typeVariable for: minutes=p.getMinutes()
Did not find solution for node: minutes=p.getMinutes() with type Type11
Did not find solution for node: minutes with type Type11
Did not find solution for node: p.getMinutes() with type Type14
For node: p expected fqn: org.joda.time.Period with type: Type6 got: org.joda.time.Period
Cannot find matching typeVariable for: getMinutes
Did not find solution for node: getMinutes with type Type14
Did not find solution for node: String with type Type2
Did not find solution for node: String with type Type2
Cannot find matching typeVariable for: format=String.format("%%0%dd",2)
Did not find solution for node: format=String.format("%%0%dd",2) with type Type2
Did not find solution for node: format with type Type2
Did not find solution for node: String.format("%%0%dd",2) with type Type18
Did not find solution for node: String with type Type2
Cannot find matching typeVariable for: format
Did not find solution for node: format with type Type18
For node: "%%0%dd" expected fqn: java.lang.String with type: Type16 got: java.lang.String
Did not find solution for node: 2 with type Type17
For node: Long.toString(hours) + ":" + String.format(format,minutes) expected fqn: java.lang.String with type: Type23 got: java.lang.String
For node: Long.toString(hours) expected fqn: java.lang.String with type: Type23 got: java.lang.String
Did not find solution for node: Long with type Type22
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type23 got: java.lang.String
Did not find solution for node: hours with type Type11
For node: ":" expected fqn: java.lang.String with type: Type16 got: java.lang.String
Did not find solution for node: String.format(format,minutes) with type Type26
Did not find solution for node: String with type Type2
Cannot find matching typeVariable for: format
Did not find solution for node: format with type Type26
Cannot find matching typeVariable for: format
Did not find solution for node: format with type Type26
Did not find solution for node: minutes with type Type11
{Checked=63, Analyzed=33, Unsolved=30, Incorrect=2, Correct=31}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=SimpleName: {Checked=5, Analyzed=3, Unsolved=2, Incorrect=2, Correct=1}
int=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
java=SimpleName: {Checked=10, Analyzed=1, Unsolved=9, Incorrect=0, Correct=1}
java=SimpleType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
long=PrimitiveType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
long=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
long=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.joda.time.=ArrayAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=ArrayType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=FieldAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=SimpleName: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
org.joda.time.=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
org.joda.time.=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
Total stats
{Checked=63, Analyzed=33, Unsolved=30, Incorrect=2, Correct=31}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ThisExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=SimpleName: {Checked=5, Analyzed=3, Unsolved=2, Incorrect=2, Correct=1}
int=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
java=SimpleName: {Checked=10, Analyzed=1, Unsolved=9, Incorrect=0, Correct=1}
java=SimpleType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
long=PrimitiveType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
long=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
long=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.joda.time.=ArrayAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=ArrayType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=FieldAccess: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
org.joda.time.=SimpleName: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
org.joda.time.=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
org.joda.time.=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
,SimpleName,0,1,0,0,1
,ThisExpression,0,2,0,0,2
int,MethodInvocation,0,2,0,0,2
int,NumberLiteral,0,1,0,0,1
int,PrimitiveType,1,1,1,0,0
int,SimpleName,3,5,1,2,2
int,SingleVariableDeclaration,1,1,1,0,0
java,InfixExpression,1,1,1,0,0
java,MethodInvocation,1,3,1,0,2
java,SimpleName,1,10,1,0,9
java,SimpleType,0,2,0,0,2
java,StringLiteral,2,2,2,0,0
java,VariableDeclarationFragment,0,1,0,0,1
long,PrimitiveType,0,2,0,0,2
long,SimpleName,0,4,0,0,4
long,VariableDeclarationFragment,0,2,0,0,2
org.joda.time.,ArrayAccess,2,2,2,0,0
org.joda.time.,ArrayType,2,2,2,0,0
org.joda.time.,ClassInstanceCreation,1,1,1,0,0
org.joda.time.,FieldAccess,2,2,2,0,0
org.joda.time.,SimpleName,9,9,9,0,0
org.joda.time.,SimpleType,4,4,4,0,0
org.joda.time.,VariableDeclarationFragment,3,3,3,0,0
