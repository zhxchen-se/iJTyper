echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/JodaTime23.java
Expect check=37
Cannot find matching typeVariable for: public class JodaTime23 {
  LocalDate getNearestDayOfWeek(  LocalDate ld,  String day){
    LocalDate target=ld.dayOfWeek().setCopy(day);
    if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
      target=target.plusWeeks(1);
    }
    return target;
  }
}

Cannot find matching typeVariable for: JodaTime23
Cannot find matching typeVariable for: public class JodaTime23 {
  LocalDate getNearestDayOfWeek(  LocalDate ld,  String day){
    LocalDate target=ld.dayOfWeek().setCopy(day);
    if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
      target=target.plusWeeks(1);
    }
    return target;
  }
}

Cannot find matching typeVariable for: package jodatime;
import org.joda.time.DateTimeConstants;
import org.joda.time.LocalDate;
public class JodaTime23 {
  LocalDate getNearestDayOfWeek(  LocalDate ld,  String day){
    LocalDate target=ld.dayOfWeek().setCopy(day);
    if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
      target=target.plusWeeks(1);
    }
    return target;
  }
}

Did not find solution for node: LocalDate with type Type2
Did not find solution for node: LocalDate with type Type2
Cannot find matching typeVariable for: getNearestDayOfWeek
Cannot find matching typeVariable for: LocalDate getNearestDayOfWeek(LocalDate ld,String day){
  LocalDate target=ld.dayOfWeek().setCopy(day);
  if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
    target=target.plusWeeks(1);
  }
  return target;
}

Cannot find matching typeVariable for: public class JodaTime23 {
  LocalDate getNearestDayOfWeek(  LocalDate ld,  String day){
    LocalDate target=ld.dayOfWeek().setCopy(day);
    if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
      target=target.plusWeeks(1);
    }
    return target;
  }
}

Cannot find matching typeVariable for: package jodatime;
import org.joda.time.DateTimeConstants;
import org.joda.time.LocalDate;
public class JodaTime23 {
  LocalDate getNearestDayOfWeek(  LocalDate ld,  String day){
    LocalDate target=ld.dayOfWeek().setCopy(day);
    if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
      target=target.plusWeeks(1);
    }
    return target;
  }
}

Cannot find matching typeVariable for: LocalDate ld
Did not find solution for node: LocalDate ld with type Type2
Did not find solution for node: LocalDate with type Type2
Did not find solution for node: LocalDate with type Type2
Did not find solution for node: ld with type Type2
Cannot find matching typeVariable for: String day
Did not find solution for node: String day with type Type3
Did not find solution for node: String with type Type3
Did not find solution for node: String with type Type3
Did not find solution for node: day with type Type3
Did not find solution for node: LocalDate with type Type2
Did not find solution for node: LocalDate with type Type2
Cannot find matching typeVariable for: target=ld.dayOfWeek().setCopy(day)
Did not find solution for node: target=ld.dayOfWeek().setCopy(day) with type Type2
Did not find solution for node: target with type Type2
Did not find solution for node: ld.dayOfWeek().setCopy(day) with type Type6
Did not find solution for node: ld.dayOfWeek() with type Type4
Did not find solution for node: ld with type Type2
Cannot find matching typeVariable for: dayOfWeek
Did not find solution for node: dayOfWeek with type Type4
Cannot find matching typeVariable for: setCopy
Did not find solution for node: setCopy with type Type6
Did not find solution for node: day with type Type3
For node: ld.getDayOfWeek() > DateTimeConstants.SATURDAY expected fqn: boolean with type: Type13 got: boolean
For node: ld.getDayOfWeek() expected fqn: int with type: Type9 got: int
Did not find solution for node: ld with type Type2
Cannot find matching typeVariable for: getDayOfWeek
For node: getDayOfWeek expected fqn: int with type: Type9 got: int
Cannot find matching typeVariable for: DateTimeConstants.SATURDAY
For node: DateTimeConstants.SATURDAY expected fqn: int with type: Type13 got: boolean
For node: DateTimeConstants expected fqn: org.joda.time.DateTimeConstants with type: Type11 got: org.joda.time.DateTimeConstants
For node: SATURDAY expected fqn: int with type: Type12 got: int
Did not find solution for node: target=target.plusWeeks(1) with type Type2
Did not find solution for node: target with type Type2
Did not find solution for node: target.plusWeeks(1) with type Type15
Did not find solution for node: target with type Type2
Cannot find matching typeVariable for: plusWeeks
Did not find solution for node: plusWeeks with type Type15
Did not find solution for node: 1 with type Type14
Did not find solution for node: target with type Type2
{Checked=34, Analyzed=6, Unsolved=28, Incorrect=1, Correct=5}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SimpleName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=SimpleType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=MethodInvocation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
org.joda.time.=SimpleName: {Checked=14, Analyzed=1, Unsolved=13, Incorrect=0, Correct=1}
org.joda.time.=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
org.joda.time.=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
Total stats
{Checked=34, Analyzed=6, Unsolved=28, Incorrect=1, Correct=5}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SimpleName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=SimpleType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=MethodInvocation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
org.joda.time.=SimpleName: {Checked=14, Analyzed=1, Unsolved=13, Incorrect=0, Correct=1}
org.joda.time.=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
org.joda.time.=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean,InfixExpression,1,1,1,0,0
int,MethodInvocation,1,1,1,0,0
int,NumberLiteral,0,1,0,0,1
int,QualifiedName,1,1,0,1,0
int,SimpleName,2,2,2,0,0
java,SimpleName,0,3,0,0,3
java,SimpleType,0,1,0,0,1
java,SingleVariableDeclaration,0,1,0,0,1
org.joda.time.,Assignment,0,1,0,0,1
org.joda.time.,MethodInvocation,0,3,0,0,3
org.joda.time.,SimpleName,1,14,1,0,13
org.joda.time.,SimpleType,0,3,0,0,3
org.joda.time.,SingleVariableDeclaration,0,1,0,0,1
org.joda.time.,VariableDeclarationFragment,0,1,0,0,1
