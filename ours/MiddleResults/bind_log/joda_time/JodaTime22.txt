echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/JodaTime22.java
Expect check=69
Cannot find matching typeVariable for: public class JodaTime22 {
  public static void main(  String[] args){
  }
  public String getDateFromDateTime(  Date date,  Boolean display) throws ParseException {
    DateTimeFormatter dtFormatter;
    if (display)     dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else     dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
    DateTime dt=new DateTime(date);
    String myDate=dt.toString(dtFormatter);
    System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
    return myDate;
  }
}

Cannot find matching typeVariable for: JodaTime22
Cannot find matching typeVariable for: public class JodaTime22 {
  public static void main(  String[] args){
  }
  public String getDateFromDateTime(  Date date,  Boolean display) throws ParseException {
    DateTimeFormatter dtFormatter;
    if (display)     dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else     dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
    DateTime dt=new DateTime(date);
    String myDate=dt.toString(dtFormatter);
    System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
    return myDate;
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.text.ParseException;
import java.util.Date;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
public class JodaTime22 {
  public static void main(  String[] args){
  }
  public String getDateFromDateTime(  Date date,  Boolean display) throws ParseException {
    DateTimeFormatter dtFormatter;
    if (display)     dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else     dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
    DateTime dt=new DateTime(date);
    String myDate=dt.toString(dtFormatter);
    System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
    return myDate;
  }
}

For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static void main(String[] args){
}

Cannot find matching typeVariable for: public class JodaTime22 {
  public static void main(  String[] args){
  }
  public String getDateFromDateTime(  Date date,  Boolean display) throws ParseException {
    DateTimeFormatter dtFormatter;
    if (display)     dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else     dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
    DateTime dt=new DateTime(date);
    String myDate=dt.toString(dtFormatter);
    System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
    return myDate;
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.text.ParseException;
import java.util.Date;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
public class JodaTime22 {
  public static void main(  String[] args){
  }
  public String getDateFromDateTime(  Date date,  Boolean display) throws ParseException {
    DateTimeFormatter dtFormatter;
    if (display)     dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else     dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
    DateTime dt=new DateTime(date);
    String myDate=dt.toString(dtFormatter);
    System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
    return myDate;
  }
}

Cannot find matching typeVariable for: String[] args
For node: String[] args expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: args expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
Cannot find matching typeVariable for: getDateFromDateTime
Cannot find matching typeVariable for: public String getDateFromDateTime(Date date,Boolean display) throws ParseException {
  DateTimeFormatter dtFormatter;
  if (display)   dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else   dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
  DateTime dt=new DateTime(date);
  String myDate=dt.toString(dtFormatter);
  System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
  return myDate;
}

Cannot find matching typeVariable for: public class JodaTime22 {
  public static void main(  String[] args){
  }
  public String getDateFromDateTime(  Date date,  Boolean display) throws ParseException {
    DateTimeFormatter dtFormatter;
    if (display)     dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else     dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
    DateTime dt=new DateTime(date);
    String myDate=dt.toString(dtFormatter);
    System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
    return myDate;
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.text.ParseException;
import java.util.Date;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
public class JodaTime22 {
  public static void main(  String[] args){
  }
  public String getDateFromDateTime(  Date date,  Boolean display) throws ParseException {
    DateTimeFormatter dtFormatter;
    if (display)     dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else     dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
    DateTime dt=new DateTime(date);
    String myDate=dt.toString(dtFormatter);
    System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
    return myDate;
  }
}

Cannot find matching typeVariable for: Date date
For node: Date date expected fqn: java.util.Date with type: Type5 got: java.util.Date
For node: Date expected fqn: java.util.Date with type: Type5 got: java.util.Date
For node: Date expected fqn: java.util.Date with type: Type5 got: java.util.Date
For node: date expected fqn: java.util.Date with type: Type5 got: java.util.Date
Cannot find matching typeVariable for: Boolean display
For node: Boolean display expected fqn: java.lang.Boolean with type: Type6 got: java.lang.Boolean
For node: Boolean expected fqn: java.lang.Boolean with type: Type6 got: java.lang.Boolean
For node: Boolean expected fqn: java.lang.Boolean with type: Type6 got: java.lang.Boolean
For node: display expected fqn: java.lang.Boolean with type: Type6 got: java.lang.Boolean
For node: ParseException expected fqn: java.text.ParseException with type: Type7 got: java.text.ParseException
For node: ParseException expected fqn: java.text.ParseException with type: Type7 got: java.text.ParseException
Did not find solution for node: DateTimeFormatter with type Type8
Did not find solution for node: DateTimeFormatter with type Type8
Cannot find matching typeVariable for: dtFormatter
Did not find solution for node: dtFormatter with type Type8
Cannot find matching typeVariable for: dtFormatter
Cannot find matching typeVariable for: DateTimeFormatter dtFormatter;

Cannot find matching typeVariable for: {
  DateTimeFormatter dtFormatter;
  if (display)   dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else   dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
  DateTime dt=new DateTime(date);
  String myDate=dt.toString(dtFormatter);
  System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
  return myDate;
}

Cannot find matching typeVariable for: public String getDateFromDateTime(Date date,Boolean display) throws ParseException {
  DateTimeFormatter dtFormatter;
  if (display)   dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else   dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
  DateTime dt=new DateTime(date);
  String myDate=dt.toString(dtFormatter);
  System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
  return myDate;
}

Cannot find matching typeVariable for: public class JodaTime22 {
  public static void main(  String[] args){
  }
  public String getDateFromDateTime(  Date date,  Boolean display) throws ParseException {
    DateTimeFormatter dtFormatter;
    if (display)     dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else     dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
    DateTime dt=new DateTime(date);
    String myDate=dt.toString(dtFormatter);
    System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
    return myDate;
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.text.ParseException;
import java.util.Date;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
public class JodaTime22 {
  public static void main(  String[] args){
  }
  public String getDateFromDateTime(  Date date,  Boolean display) throws ParseException {
    DateTimeFormatter dtFormatter;
    if (display)     dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else     dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
    DateTime dt=new DateTime(date);
    String myDate=dt.toString(dtFormatter);
    System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
    return myDate;
  }
}

Cannot find matching typeVariable for: display
Cannot find matching typeVariable for: if (display) dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");

Cannot find matching typeVariable for: {
  DateTimeFormatter dtFormatter;
  if (display)   dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else   dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
  DateTime dt=new DateTime(date);
  String myDate=dt.toString(dtFormatter);
  System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
  return myDate;
}

Cannot find matching typeVariable for: public String getDateFromDateTime(Date date,Boolean display) throws ParseException {
  DateTimeFormatter dtFormatter;
  if (display)   dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else   dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
  DateTime dt=new DateTime(date);
  String myDate=dt.toString(dtFormatter);
  System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
  return myDate;
}

Cannot find matching typeVariable for: public class JodaTime22 {
  public static void main(  String[] args){
  }
  public String getDateFromDateTime(  Date date,  Boolean display) throws ParseException {
    DateTimeFormatter dtFormatter;
    if (display)     dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else     dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
    DateTime dt=new DateTime(date);
    String myDate=dt.toString(dtFormatter);
    System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
    return myDate;
  }
}

Cannot find matching typeVariable for: package jodatime;
import java.text.ParseException;
import java.util.Date;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
public class JodaTime22 {
  public static void main(  String[] args){
  }
  public String getDateFromDateTime(  Date date,  Boolean display) throws ParseException {
    DateTimeFormatter dtFormatter;
    if (display)     dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy");
 else     dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd");
    DateTime dt=new DateTime(date);
    String myDate=dt.toString(dtFormatter);
    System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate);
    return myDate;
  }
}

Did not find solution for node: dtFormatter=DateTimeFormat.forPattern("MM/dd/yyyy") with type Type8
Did not find solution for node: dtFormatter with type Type8
Did not find solution for node: DateTimeFormat.forPattern("MM/dd/yyyy") with type Type11
Did not find solution for node: DateTimeFormat with type Type10
Cannot find matching typeVariable for: forPattern
Did not find solution for node: forPattern with type Type11
For node: "MM/dd/yyyy" expected fqn: java.lang.String with type: Type9 got: java.lang.String
Did not find solution for node: dtFormatter=DateTimeFormat.forPattern("yyyy-MM-dd") with type Type8
Did not find solution for node: dtFormatter with type Type8
Did not find solution for node: DateTimeFormat.forPattern("yyyy-MM-dd") with type Type13
Did not find solution for node: DateTimeFormat with type Type10
Cannot find matching typeVariable for: forPattern
Did not find solution for node: forPattern with type Type13
For node: "yyyy-MM-dd" expected fqn: java.lang.String with type: Type9 got: java.lang.String
Did not find solution for node: DateTime with type Type14
Did not find solution for node: DateTime with type Type14
Cannot find matching typeVariable for: dt=new DateTime(date)
Did not find solution for node: dt=new DateTime(date) with type Type14
Did not find solution for node: dt with type Type14
Did not find solution for node: new DateTime(date) with type Type14
Did not find solution for node: DateTime with type Type14
Did not find solution for node: DateTime with type Type14
For node: date expected fqn: java.util.Date with type: Type5 got: java.util.Date
For node: String expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type9 got: java.lang.String
Cannot find matching typeVariable for: myDate=dt.toString(dtFormatter)
For node: myDate=dt.toString(dtFormatter) expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: myDate expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: dt.toString(dtFormatter) expected fqn: java.lang.String with type: Type17 got: java.lang.String
Did not find solution for node: dt with type Type14
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type17 got: java.lang.String
Did not find solution for node: dtFormatter with type Type8
For node: System.out.println("OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate) expected fqn: void with type: Type22 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type22 got: void
For node: System expected fqn: java.lang.System with type: Type20 got: java.lang.System
For node: out expected fqn: java.io.PrintStream with type: Type21 got: java.io.PrintStream
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type22 got: void
For node: "OrderDisplayUtil.java:getDateFromDateTime(" + date + ", "+ display+ "): "+ "myDate = "+ myDate expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: "OrderDisplayUtil.java:getDateFromDateTime(" expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: date expected fqn: java.util.Date with type: Type5 got: java.util.Date
For node: ", " expected fqn: java.lang.String with type: Type9 got: java.lang.String
Cannot find matching typeVariable for: display
For node: display expected fqn: java.lang.Boolean with type: Type9 got: java.lang.String
For node: "): " expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: "myDate = " expected fqn: java.lang.String with type: Type9 got: java.lang.String
Cannot find matching typeVariable for: myDate
For node: myDate expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: myDate expected fqn: java.lang.String with type: Type9 got: java.lang.String
{Checked=63, Analyzed=41, Unsolved=22, Incorrect=2, Correct=39}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=SimpleName: {Checked=18, Analyzed=18, Unsolved=0, Incorrect=1, Correct=17}
java=SimpleType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=SingleVariableDeclaration: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.joda.time.=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.joda.time.=SimpleName: {Checked=12, Analyzed=0, Unsolved=12, Incorrect=0, Correct=0}
org.joda.time.=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
org.joda.time.=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=63, Analyzed=41, Unsolved=22, Incorrect=2, Correct=39}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=SimpleName: {Checked=18, Analyzed=18, Unsolved=0, Incorrect=1, Correct=17}
java=SimpleType: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=SingleVariableDeclaration: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
org.joda.time.=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.joda.time.=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
org.joda.time.=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
org.joda.time.=SimpleName: {Checked=12, Analyzed=0, Unsolved=12, Incorrect=0, Correct=0}
org.joda.time.=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
org.joda.time.=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java,ArrayType,1,1,1,0,0
java,InfixExpression,1,1,1,0,0
java,MethodInvocation,1,1,1,0,0
java,QualifiedName,1,1,0,1,0
java,SimpleName,18,18,17,1,0
java,SimpleType,6,6,6,0,0
java,SingleVariableDeclaration,3,3,3,0,0
java,StringLiteral,6,6,6,0,0
java,VariableDeclarationFragment,1,1,1,0,0
org.joda.time.,Assignment,0,2,0,0,2
org.joda.time.,ClassInstanceCreation,0,1,0,0,1
org.joda.time.,MethodInvocation,0,2,0,0,2
org.joda.time.,SimpleName,0,12,0,0,12
org.joda.time.,SimpleType,0,3,0,0,3
org.joda.time.,VariableDeclarationFragment,0,2,0,0,2
void,MethodInvocation,1,1,1,0,0
void,PrimitiveType,1,1,1,0,0
void,SimpleName,1,1,1,0,0
