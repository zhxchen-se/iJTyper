echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_39.java
Expect check=62
Cannot find matching typeVariable for: public class xstream_class_39 {
  private static XStream xstream=new XStream(){
    public HierarchicalStreamWriter createWriter(    Writer out){
      return new PrettyPrintWriter(out){
        boolean cdata;
        boolean isNeedUpper;
        protected void writeText(        QuickWriter writer,        String text){
          if (cdata) {
            writer.write("<![CDATA[");
            writer.write(text);
            writer.write("]]>");
          }
 else           if (isNeedUpper) {
            writer.write(text.toUpperCase());
          }
 else           writer.write(text);
        }
      }
;
    }
  }
;
}

Did not find solution for node: xstream_class_39 with type Type1
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: xstream=new XStream(){
  public HierarchicalStreamWriter createWriter(  Writer out){
    return new PrettyPrintWriter(out){
      boolean cdata;
      boolean isNeedUpper;
      protected void writeText(      QuickWriter writer,      String text){
        if (cdata) {
          writer.write("<![CDATA[");
          writer.write(text);
          writer.write("]]>");
        }
 else         if (isNeedUpper) {
          writer.write(text.toUpperCase());
        }
 else         writer.write(text);
      }
    }
;
  }
}

For node: xstream=new XStream(){
  public HierarchicalStreamWriter createWriter(  Writer out){
    return new PrettyPrintWriter(out){
      boolean cdata;
      boolean isNeedUpper;
      protected void writeText(      QuickWriter writer,      String text){
        if (cdata) {
          writer.write("<![CDATA[");
          writer.write(text);
          writer.write("]]>");
        }
 else         if (isNeedUpper) {
          writer.write(text.toUpperCase());
        }
 else         writer.write(text);
      }
    }
;
  }
}
 expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
For node: new XStream(){
  public HierarchicalStreamWriter createWriter(  Writer out){
    return new PrettyPrintWriter(out){
      boolean cdata;
      boolean isNeedUpper;
      protected void writeText(      QuickWriter writer,      String text){
        if (cdata) {
          writer.write("<![CDATA[");
          writer.write(text);
          writer.write("]]>");
        }
 else         if (isNeedUpper) {
          writer.write(text.toUpperCase());
        }
 else         writer.write(text);
      }
    }
;
  }
}
 expected fqn:  with type: Type4 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: {
  public HierarchicalStreamWriter createWriter(  Writer out){
    return new PrettyPrintWriter(out){
      boolean cdata;
      boolean isNeedUpper;
      protected void writeText(      QuickWriter writer,      String text){
        if (cdata) {
          writer.write("<![CDATA[");
          writer.write(text);
          writer.write("]]>");
        }
 else         if (isNeedUpper) {
          writer.write(text.toUpperCase());
        }
 else         writer.write(text);
      }
    }
;
  }
}

For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type3 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type3 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: createWriter
Cannot find matching typeVariable for: public HierarchicalStreamWriter createWriter(Writer out){
  return new PrettyPrintWriter(out){
    boolean cdata;
    boolean isNeedUpper;
    protected void writeText(    QuickWriter writer,    String text){
      if (cdata) {
        writer.write("<![CDATA[");
        writer.write(text);
        writer.write("]]>");
      }
 else       if (isNeedUpper) {
        writer.write(text.toUpperCase());
      }
 else       writer.write(text);
    }
  }
;
}

Cannot find matching typeVariable for: {
  public HierarchicalStreamWriter createWriter(  Writer out){
    return new PrettyPrintWriter(out){
      boolean cdata;
      boolean isNeedUpper;
      protected void writeText(      QuickWriter writer,      String text){
        if (cdata) {
          writer.write("<![CDATA[");
          writer.write(text);
          writer.write("]]>");
        }
 else         if (isNeedUpper) {
          writer.write(text.toUpperCase());
        }
 else         writer.write(text);
      }
    }
;
  }
}

For node: createWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type4 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: Writer out
Did not find solution for node: Writer out with type Type5
Did not find solution for node: Writer with type Type5
Did not find solution for node: Writer with type Type5
Did not find solution for node: out with type Type5
Did not find solution for node: new PrettyPrintWriter(out){
  boolean cdata;
  boolean isNeedUpper;
  protected void writeText(  QuickWriter writer,  String text){
    if (cdata) {
      writer.write("<![CDATA[");
      writer.write(text);
      writer.write("]]>");
    }
 else     if (isNeedUpper) {
      writer.write(text.toUpperCase());
    }
 else     writer.write(text);
  }
}
 with type Type6
Did not find solution for node: PrettyPrintWriter with type Type6
Did not find solution for node: PrettyPrintWriter with type Type6
Did not find solution for node: out with type Type5
Cannot find matching typeVariable for: {
  boolean cdata;
  boolean isNeedUpper;
  protected void writeText(  QuickWriter writer,  String text){
    if (cdata) {
      writer.write("<![CDATA[");
      writer.write(text);
      writer.write("]]>");
    }
 else     if (isNeedUpper) {
      writer.write(text.toUpperCase());
    }
 else     writer.write(text);
  }
}

For node: boolean expected fqn: boolean with type: Type7 got: boolean
Cannot find matching typeVariable for: cdata
For node: cdata expected fqn: boolean with type: Type7 got: boolean
Cannot find matching typeVariable for: cdata
Cannot find matching typeVariable for: boolean cdata;

Cannot find matching typeVariable for: {
  boolean cdata;
  boolean isNeedUpper;
  protected void writeText(  QuickWriter writer,  String text){
    if (cdata) {
      writer.write("<![CDATA[");
      writer.write(text);
      writer.write("]]>");
    }
 else     if (isNeedUpper) {
      writer.write(text.toUpperCase());
    }
 else     writer.write(text);
  }
}

Did not find solution for node: cdata with type Type6
For node: boolean expected fqn: boolean with type: Type7 got: boolean
Cannot find matching typeVariable for: isNeedUpper
For node: isNeedUpper expected fqn: boolean with type: Type7 got: boolean
Cannot find matching typeVariable for: isNeedUpper
Cannot find matching typeVariable for: boolean isNeedUpper;

Cannot find matching typeVariable for: {
  boolean cdata;
  boolean isNeedUpper;
  protected void writeText(  QuickWriter writer,  String text){
    if (cdata) {
      writer.write("<![CDATA[");
      writer.write(text);
      writer.write("]]>");
    }
 else     if (isNeedUpper) {
      writer.write(text.toUpperCase());
    }
 else     writer.write(text);
  }
}

Did not find solution for node: isNeedUpper with type Type6
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: writeText
Cannot find matching typeVariable for: protected void writeText(QuickWriter writer,String text){
  if (cdata) {
    writer.write("<![CDATA[");
    writer.write(text);
    writer.write("]]>");
  }
 else   if (isNeedUpper) {
    writer.write(text.toUpperCase());
  }
 else   writer.write(text);
}

Cannot find matching typeVariable for: {
  boolean cdata;
  boolean isNeedUpper;
  protected void writeText(  QuickWriter writer,  String text){
    if (cdata) {
      writer.write("<![CDATA[");
      writer.write(text);
      writer.write("]]>");
    }
 else     if (isNeedUpper) {
      writer.write(text.toUpperCase());
    }
 else     writer.write(text);
  }
}

Did not find solution for node: writeText with type Type6
Cannot find matching typeVariable for: QuickWriter writer
Did not find solution for node: QuickWriter writer with type Type8
Did not find solution for node: QuickWriter with type Type8
Did not find solution for node: QuickWriter with type Type8
Did not find solution for node: writer with type Type8
Cannot find matching typeVariable for: String text
Did not find solution for node: String text with type Type9
Did not find solution for node: String with type Type9
Did not find solution for node: String with type Type9
Did not find solution for node: text with type Type9
Cannot find matching typeVariable for: cdata
Cannot find matching typeVariable for: if (cdata) {
  writer.write("<![CDATA[");
  writer.write(text);
  writer.write("]]>");
}
 else if (isNeedUpper) {
  writer.write(text.toUpperCase());
}
 else writer.write(text);

Cannot find matching typeVariable for: {
  if (cdata) {
    writer.write("<![CDATA[");
    writer.write(text);
    writer.write("]]>");
  }
 else   if (isNeedUpper) {
    writer.write(text.toUpperCase());
  }
 else   writer.write(text);
}

Cannot find matching typeVariable for: protected void writeText(QuickWriter writer,String text){
  if (cdata) {
    writer.write("<![CDATA[");
    writer.write(text);
    writer.write("]]>");
  }
 else   if (isNeedUpper) {
    writer.write(text.toUpperCase());
  }
 else   writer.write(text);
}

Cannot find matching typeVariable for: {
  boolean cdata;
  boolean isNeedUpper;
  protected void writeText(  QuickWriter writer,  String text){
    if (cdata) {
      writer.write("<![CDATA[");
      writer.write(text);
      writer.write("]]>");
    }
 else     if (isNeedUpper) {
      writer.write(text.toUpperCase());
    }
 else     writer.write(text);
  }
}

Did not find solution for node: cdata with type Type6
Did not find solution for node: writer.write("<![CDATA[") with type Type11
Did not find solution for node: writer with type Type8
Cannot find matching typeVariable for: write
Did not find solution for node: write with type Type11
Did not find solution for node: "<![CDATA[" with type Type10
Did not find solution for node: writer.write(text) with type Type14
Did not find solution for node: writer with type Type8
Cannot find matching typeVariable for: write
Did not find solution for node: write with type Type14
Did not find solution for node: text with type Type9
Did not find solution for node: writer.write("]]>") with type Type13
Did not find solution for node: writer with type Type8
Cannot find matching typeVariable for: write
Did not find solution for node: write with type Type13
Did not find solution for node: "]]>" with type Type10
Cannot find matching typeVariable for: isNeedUpper
Cannot find matching typeVariable for: if (isNeedUpper) {
  writer.write(text.toUpperCase());
}
 else writer.write(text);

Cannot find matching typeVariable for: if (cdata) {
  writer.write("<![CDATA[");
  writer.write(text);
  writer.write("]]>");
}
 else if (isNeedUpper) {
  writer.write(text.toUpperCase());
}
 else writer.write(text);

Cannot find matching typeVariable for: {
  if (cdata) {
    writer.write("<![CDATA[");
    writer.write(text);
    writer.write("]]>");
  }
 else   if (isNeedUpper) {
    writer.write(text.toUpperCase());
  }
 else   writer.write(text);
}

Cannot find matching typeVariable for: protected void writeText(QuickWriter writer,String text){
  if (cdata) {
    writer.write("<![CDATA[");
    writer.write(text);
    writer.write("]]>");
  }
 else   if (isNeedUpper) {
    writer.write(text.toUpperCase());
  }
 else   writer.write(text);
}

Cannot find matching typeVariable for: {
  boolean cdata;
  boolean isNeedUpper;
  protected void writeText(  QuickWriter writer,  String text){
    if (cdata) {
      writer.write("<![CDATA[");
      writer.write(text);
      writer.write("]]>");
    }
 else     if (isNeedUpper) {
      writer.write(text.toUpperCase());
    }
 else     writer.write(text);
  }
}

Did not find solution for node: isNeedUpper with type Type6
Did not find solution for node: writer.write(text.toUpperCase()) with type Type19
Did not find solution for node: writer with type Type8
Cannot find matching typeVariable for: write
Did not find solution for node: write with type Type19
Did not find solution for node: text.toUpperCase() with type Type17
Did not find solution for node: text with type Type9
Cannot find matching typeVariable for: toUpperCase
Did not find solution for node: toUpperCase with type Type17
Did not find solution for node: writer.write(text) with type Type16
Did not find solution for node: writer with type Type8
Cannot find matching typeVariable for: write
Did not find solution for node: write with type Type16
Did not find solution for node: text with type Type9
{Checked=59, Analyzed=15, Unsolved=44, Incorrect=2, Correct=13}
=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
boolean=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=SimpleName: {Checked=13, Analyzed=5, Unsolved=8, Incorrect=1, Correct=4}
com.thoughtworks.xstream.=SimpleType: {Checked=5, Analyzed=3, Unsolved=2, Incorrect=0, Correct=3}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SimpleName: {Checked=9, Analyzed=0, Unsolved=9, Incorrect=0, Correct=0}
java=SimpleType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=SingleVariableDeclaration: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=StringLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
Total stats
{Checked=59, Analyzed=15, Unsolved=44, Incorrect=2, Correct=13}
=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
boolean=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=SimpleName: {Checked=13, Analyzed=5, Unsolved=8, Incorrect=1, Correct=4}
com.thoughtworks.xstream.=SimpleType: {Checked=5, Analyzed=3, Unsolved=2, Incorrect=0, Correct=3}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SimpleName: {Checked=9, Analyzed=0, Unsolved=9, Incorrect=0, Correct=0}
java=SimpleType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=SingleVariableDeclaration: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=StringLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
,ClassInstanceCreation,1,2,0,1,1
,SimpleName,0,1,0,0,1
boolean,PrimitiveType,2,2,2,0,0
boolean,SimpleName,0,4,0,0,4
boolean,VariableDeclarationFragment,2,2,2,0,0
com.thoughtworks.xstream.,SimpleName,5,13,4,1,8
com.thoughtworks.xstream.,SimpleType,3,5,3,0,2
com.thoughtworks.xstream.,SingleVariableDeclaration,0,1,0,0,1
com.thoughtworks.xstream.,VariableDeclarationFragment,1,1,1,0,0
java,MethodInvocation,0,1,0,0,1
java,SimpleName,0,9,0,0,9
java,SimpleType,0,2,0,0,2
java,SingleVariableDeclaration,0,2,0,0,2
java,StringLiteral,0,2,0,0,2
void,MethodInvocation,0,5,0,0,5
void,PrimitiveType,1,1,1,0,0
void,SimpleName,0,6,0,0,6
