echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_24.java
Expect check=89
Cannot find matching typeVariable for: public class xstream_class_24 {
public class DetailDollarsConverter extends ReflectionConverter {
    public DetailDollarsConverter(    Mapper mapper,    ReflectionProvider reflectionProvider){
      super(mapper,reflectionProvider);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext context){
      super.marshal(obj,writer,context);
      writer.startNode("node4");
      writer.setValue(Double.toString(20));
      writer.endNode();
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return super.unmarshal(reader,context);
    }
    @SuppressWarnings("unchecked") @Override public boolean canConvert(    Class clazz){
      Object o=null;
      return clazz.equals(o);
    }
  }
}

Cannot find matching typeVariable for: xstream_class_24
Cannot find matching typeVariable for: public class xstream_class_24 {
public class DetailDollarsConverter extends ReflectionConverter {
    public DetailDollarsConverter(    Mapper mapper,    ReflectionProvider reflectionProvider){
      super(mapper,reflectionProvider);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext context){
      super.marshal(obj,writer,context);
      writer.startNode("node4");
      writer.setValue(Double.toString(20));
      writer.endNode();
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return super.unmarshal(reader,context);
    }
    @SuppressWarnings("unchecked") @Override public boolean canConvert(    Class clazz){
      Object o=null;
      return clazz.equals(o);
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_24 {
public class DetailDollarsConverter extends ReflectionConverter {
    public DetailDollarsConverter(    Mapper mapper,    ReflectionProvider reflectionProvider){
      super(mapper,reflectionProvider);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext context){
      super.marshal(obj,writer,context);
      writer.startNode("node4");
      writer.setValue(Double.toString(20));
      writer.endNode();
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return super.unmarshal(reader,context);
    }
    @SuppressWarnings("unchecked") @Override public boolean canConvert(    Class clazz){
      Object o=null;
      return clazz.equals(o);
    }
  }
}

Cannot find matching typeVariable for: public class DetailDollarsConverter extends ReflectionConverter {
  public DetailDollarsConverter(  Mapper mapper,  ReflectionProvider reflectionProvider){
    super(mapper,reflectionProvider);
  }
  @Override public void marshal(  Object obj,  HierarchicalStreamWriter writer,  MarshallingContext context){
    super.marshal(obj,writer,context);
    writer.startNode("node4");
    writer.setValue(Double.toString(20));
    writer.endNode();
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    return super.unmarshal(reader,context);
  }
  @SuppressWarnings("unchecked") @Override public boolean canConvert(  Class clazz){
    Object o=null;
    return clazz.equals(o);
  }
}

Did not find solution for node: DetailDollarsConverter with type Type2
For node: ReflectionConverter expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionConverter with type: Type3 got: com.thoughtworks.xstream.converters.reflection.ReflectionConverter
For node: ReflectionConverter expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionConverter with type: Type3 got: com.thoughtworks.xstream.converters.reflection.ReflectionConverter
Cannot find matching typeVariable for: DetailDollarsConverter
Cannot find matching typeVariable for: public DetailDollarsConverter(Mapper mapper,ReflectionProvider reflectionProvider){
  super(mapper,reflectionProvider);
}

Cannot find matching typeVariable for: public class DetailDollarsConverter extends ReflectionConverter {
  public DetailDollarsConverter(  Mapper mapper,  ReflectionProvider reflectionProvider){
    super(mapper,reflectionProvider);
  }
  @Override public void marshal(  Object obj,  HierarchicalStreamWriter writer,  MarshallingContext context){
    super.marshal(obj,writer,context);
    writer.startNode("node4");
    writer.setValue(Double.toString(20));
    writer.endNode();
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    return super.unmarshal(reader,context);
  }
  @SuppressWarnings("unchecked") @Override public boolean canConvert(  Class clazz){
    Object o=null;
    return clazz.equals(o);
  }
}

Cannot find matching typeVariable for: public class xstream_class_24 {
public class DetailDollarsConverter extends ReflectionConverter {
    public DetailDollarsConverter(    Mapper mapper,    ReflectionProvider reflectionProvider){
      super(mapper,reflectionProvider);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext context){
      super.marshal(obj,writer,context);
      writer.startNode("node4");
      writer.setValue(Double.toString(20));
      writer.endNode();
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return super.unmarshal(reader,context);
    }
    @SuppressWarnings("unchecked") @Override public boolean canConvert(    Class clazz){
      Object o=null;
      return clazz.equals(o);
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_24 {
public class DetailDollarsConverter extends ReflectionConverter {
    public DetailDollarsConverter(    Mapper mapper,    ReflectionProvider reflectionProvider){
      super(mapper,reflectionProvider);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext context){
      super.marshal(obj,writer,context);
      writer.startNode("node4");
      writer.setValue(Double.toString(20));
      writer.endNode();
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return super.unmarshal(reader,context);
    }
    @SuppressWarnings("unchecked") @Override public boolean canConvert(    Class clazz){
      Object o=null;
      return clazz.equals(o);
    }
  }
}

Cannot find matching typeVariable for: Mapper mapper
For node: Mapper mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type18 got: com.thoughtworks.xstream.mapper.Mapper
For node: Mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type18 got: com.thoughtworks.xstream.mapper.Mapper
For node: Mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type18 got: com.thoughtworks.xstream.mapper.Mapper
For node: mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type18 got: com.thoughtworks.xstream.mapper.Mapper
Cannot find matching typeVariable for: ReflectionProvider reflectionProvider
For node: ReflectionProvider reflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type19 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: ReflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type19 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: ReflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type19 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: reflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type19 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: mapper expected fqn: com.thoughtworks.xstream.mapper.Mapper with type: Type18 got: com.thoughtworks.xstream.mapper.Mapper
For node: reflectionProvider expected fqn: com.thoughtworks.xstream.converters.reflection.ReflectionProvider with type: Type19 got: com.thoughtworks.xstream.converters.reflection.ReflectionProvider
For node: @Override expected fqn: java.lang.Override with type: Type23 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type23 got: java.lang.Override
For node: void expected fqn: void with type: Type7 got: void
Cannot find matching typeVariable for: marshal
Cannot find matching typeVariable for: @Override public void marshal(Object obj,HierarchicalStreamWriter writer,MarshallingContext context){
  super.marshal(obj,writer,context);
  writer.startNode("node4");
  writer.setValue(Double.toString(20));
  writer.endNode();
}

Cannot find matching typeVariable for: public class DetailDollarsConverter extends ReflectionConverter {
  public DetailDollarsConverter(  Mapper mapper,  ReflectionProvider reflectionProvider){
    super(mapper,reflectionProvider);
  }
  @Override public void marshal(  Object obj,  HierarchicalStreamWriter writer,  MarshallingContext context){
    super.marshal(obj,writer,context);
    writer.startNode("node4");
    writer.setValue(Double.toString(20));
    writer.endNode();
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    return super.unmarshal(reader,context);
  }
  @SuppressWarnings("unchecked") @Override public boolean canConvert(  Class clazz){
    Object o=null;
    return clazz.equals(o);
  }
}

Cannot find matching typeVariable for: public class xstream_class_24 {
public class DetailDollarsConverter extends ReflectionConverter {
    public DetailDollarsConverter(    Mapper mapper,    ReflectionProvider reflectionProvider){
      super(mapper,reflectionProvider);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext context){
      super.marshal(obj,writer,context);
      writer.startNode("node4");
      writer.setValue(Double.toString(20));
      writer.endNode();
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return super.unmarshal(reader,context);
    }
    @SuppressWarnings("unchecked") @Override public boolean canConvert(    Class clazz){
      Object o=null;
      return clazz.equals(o);
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_24 {
public class DetailDollarsConverter extends ReflectionConverter {
    public DetailDollarsConverter(    Mapper mapper,    ReflectionProvider reflectionProvider){
      super(mapper,reflectionProvider);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext context){
      super.marshal(obj,writer,context);
      writer.startNode("node4");
      writer.setValue(Double.toString(20));
      writer.endNode();
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return super.unmarshal(reader,context);
    }
    @SuppressWarnings("unchecked") @Override public boolean canConvert(    Class clazz){
      Object o=null;
      return clazz.equals(o);
    }
  }
}

Cannot find matching typeVariable for: Object obj
For node: Object obj expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
For node: obj expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
Cannot find matching typeVariable for: HierarchicalStreamWriter writer
For node: HierarchicalStreamWriter writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type24 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type24 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type24 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type24 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: MarshallingContext context
For node: MarshallingContext context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type25 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type25 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type25 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type25 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: super.marshal(obj,writer,context) expected fqn: void with type: Type26 got: void
Cannot find matching typeVariable for: marshal
For node: marshal expected fqn: void with type: Type26 got: void
For node: obj expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type24 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type25 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: writer.startNode("node4") expected fqn: void with type: Type32 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type24 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: startNode
For node: startNode expected fqn: void with type: Type32 got: void
For node: "node4" expected fqn: java.lang.String with type: Type31 got: java.lang.String
For node: writer.setValue(Double.toString(20)) expected fqn: void with type: Type40 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type24 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: setValue
For node: setValue expected fqn: void with type: Type40 got: void
For node: Double.toString(20) expected fqn: java.lang.String with type: Type37 got: java.lang.String
Did not find solution for node: Double with type Type36
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type37 got: java.lang.String
Did not find solution for node: 20 with type Type35
For node: writer.endNode() expected fqn: void with type: Type43 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type24 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: endNode
For node: endNode expected fqn: void with type: Type43 got: void
For node: @Override expected fqn: java.lang.Override with type: Type23 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type23 got: java.lang.Override
For node: Object expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
Cannot find matching typeVariable for: unmarshal
Cannot find matching typeVariable for: @Override public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context){
  return super.unmarshal(reader,context);
}

Cannot find matching typeVariable for: public class DetailDollarsConverter extends ReflectionConverter {
  public DetailDollarsConverter(  Mapper mapper,  ReflectionProvider reflectionProvider){
    super(mapper,reflectionProvider);
  }
  @Override public void marshal(  Object obj,  HierarchicalStreamWriter writer,  MarshallingContext context){
    super.marshal(obj,writer,context);
    writer.startNode("node4");
    writer.setValue(Double.toString(20));
    writer.endNode();
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    return super.unmarshal(reader,context);
  }
  @SuppressWarnings("unchecked") @Override public boolean canConvert(  Class clazz){
    Object o=null;
    return clazz.equals(o);
  }
}

Cannot find matching typeVariable for: public class xstream_class_24 {
public class DetailDollarsConverter extends ReflectionConverter {
    public DetailDollarsConverter(    Mapper mapper,    ReflectionProvider reflectionProvider){
      super(mapper,reflectionProvider);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext context){
      super.marshal(obj,writer,context);
      writer.startNode("node4");
      writer.setValue(Double.toString(20));
      writer.endNode();
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return super.unmarshal(reader,context);
    }
    @SuppressWarnings("unchecked") @Override public boolean canConvert(    Class clazz){
      Object o=null;
      return clazz.equals(o);
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_24 {
public class DetailDollarsConverter extends ReflectionConverter {
    public DetailDollarsConverter(    Mapper mapper,    ReflectionProvider reflectionProvider){
      super(mapper,reflectionProvider);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext context){
      super.marshal(obj,writer,context);
      writer.startNode("node4");
      writer.setValue(Double.toString(20));
      writer.endNode();
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return super.unmarshal(reader,context);
    }
    @SuppressWarnings("unchecked") @Override public boolean canConvert(    Class clazz){
      Object o=null;
      return clazz.equals(o);
    }
  }
}

Cannot find matching typeVariable for: HierarchicalStreamReader reader
For node: HierarchicalStreamReader reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type45 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type45 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type45 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type45 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: UnmarshallingContext context
For node: UnmarshallingContext context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type46 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type46 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type46 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type46 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: super.unmarshal(reader,context) expected fqn: java.lang.Object with type: Type47 got: java.lang.Object
Cannot find matching typeVariable for: unmarshal
For node: unmarshal expected fqn: java.lang.Object with type: Type47 got: java.lang.Object
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type45 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type46 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: @SuppressWarnings("unchecked") expected fqn: java.lang.SuppressWarnings with type: Type51 got: java.lang.SuppressWarnings
For node: SuppressWarnings expected fqn: java.lang.SuppressWarnings with type: Type51 got: java.lang.SuppressWarnings
For node: "unchecked" expected fqn: java.lang.String with type: Type31 got: java.lang.String
For node: @Override expected fqn: java.lang.Override with type: Type23 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type23 got: java.lang.Override
For node: boolean expected fqn: boolean with type: Type6 got: boolean
Cannot find matching typeVariable for: canConvert
Cannot find matching typeVariable for: @SuppressWarnings("unchecked") @Override public boolean canConvert(Class clazz){
  Object o=null;
  return clazz.equals(o);
}

Cannot find matching typeVariable for: public class DetailDollarsConverter extends ReflectionConverter {
  public DetailDollarsConverter(  Mapper mapper,  ReflectionProvider reflectionProvider){
    super(mapper,reflectionProvider);
  }
  @Override public void marshal(  Object obj,  HierarchicalStreamWriter writer,  MarshallingContext context){
    super.marshal(obj,writer,context);
    writer.startNode("node4");
    writer.setValue(Double.toString(20));
    writer.endNode();
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    return super.unmarshal(reader,context);
  }
  @SuppressWarnings("unchecked") @Override public boolean canConvert(  Class clazz){
    Object o=null;
    return clazz.equals(o);
  }
}

Cannot find matching typeVariable for: public class xstream_class_24 {
public class DetailDollarsConverter extends ReflectionConverter {
    public DetailDollarsConverter(    Mapper mapper,    ReflectionProvider reflectionProvider){
      super(mapper,reflectionProvider);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext context){
      super.marshal(obj,writer,context);
      writer.startNode("node4");
      writer.setValue(Double.toString(20));
      writer.endNode();
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return super.unmarshal(reader,context);
    }
    @SuppressWarnings("unchecked") @Override public boolean canConvert(    Class clazz){
      Object o=null;
      return clazz.equals(o);
    }
  }
}

Cannot find matching typeVariable for: import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.mapper.Mapper;
public class xstream_class_24 {
public class DetailDollarsConverter extends ReflectionConverter {
    public DetailDollarsConverter(    Mapper mapper,    ReflectionProvider reflectionProvider){
      super(mapper,reflectionProvider);
    }
    @Override public void marshal(    Object obj,    HierarchicalStreamWriter writer,    MarshallingContext context){
      super.marshal(obj,writer,context);
      writer.startNode("node4");
      writer.setValue(Double.toString(20));
      writer.endNode();
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      return super.unmarshal(reader,context);
    }
    @SuppressWarnings("unchecked") @Override public boolean canConvert(    Class clazz){
      Object o=null;
      return clazz.equals(o);
    }
  }
}

Cannot find matching typeVariable for: Class clazz
Did not find solution for node: Class clazz with type Type52
Did not find solution for node: Class with type Type52
Did not find solution for node: Class with type Type52
Did not find solution for node: clazz with type Type52
For node: Object expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
Cannot find matching typeVariable for: o=null
For node: o=null expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
For node: o expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
For node: null expected fqn: null with type: Type53 got: java.lang.Object
For node: clazz.equals(o) expected fqn: boolean with type: Type54 got: boolean
Did not find solution for node: clazz with type Type52
Cannot find matching typeVariable for: equals
For node: equals expected fqn: boolean with type: Type54 got: boolean
For node: o expected fqn: java.lang.Object with type: Type5 got: java.lang.Object
{Checked=82, Analyzed=74, Unsolved=8, Incorrect=1, Correct=73}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=22, Analyzed=22, Unsolved=0, Incorrect=0, Correct=22}
com.thoughtworks.xstream.=SimpleType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
int=NumberLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SimpleName: {Checked=17, Analyzed=13, Unsolved=4, Incorrect=0, Correct=13}
java=SimpleType: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
java=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SingleVariableDeclaration: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SuperMethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
void=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
void=SuperMethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=82, Analyzed=74, Unsolved=8, Incorrect=1, Correct=73}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=22, Analyzed=22, Unsolved=0, Incorrect=0, Correct=22}
com.thoughtworks.xstream.=SimpleType: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
int=NumberLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SimpleName: {Checked=17, Analyzed=13, Unsolved=4, Incorrect=0, Correct=13}
java=SimpleType: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
java=SingleMemberAnnotation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=SingleVariableDeclaration: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=SuperMethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
null=NullLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
void=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
void=SuperMethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
,SimpleName,0,1,0,0,1
boolean,MethodInvocation,1,1,1,0,0
boolean,PrimitiveType,1,1,1,0,0
boolean,SimpleName,1,1,1,0,0
com.thoughtworks.xstream.,SimpleName,22,22,22,0,0
com.thoughtworks.xstream.,SimpleType,7,7,7,0,0
com.thoughtworks.xstream.,SingleVariableDeclaration,6,6,6,0,0
int,NumberLiteral,0,1,0,0,1
java,MarkerAnnotation,3,3,3,0,0
java,MethodInvocation,1,1,1,0,0
java,SimpleName,13,17,13,0,4
java,SimpleType,3,4,3,0,1
java,SingleMemberAnnotation,1,1,1,0,0
java,SingleVariableDeclaration,1,2,1,0,1
java,StringLiteral,2,2,2,0,0
java,SuperMethodInvocation,1,1,1,0,0
java,VariableDeclarationFragment,1,1,1,0,0
null,NullLiteral,1,1,0,1,0
void,MethodInvocation,3,3,3,0,0
void,PrimitiveType,1,1,1,0,0
void,SimpleName,4,4,4,0,0
void,SuperMethodInvocation,1,1,1,0,0
