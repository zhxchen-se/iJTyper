echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_9.java
Expect check=88
Cannot find matching typeVariable for: public class xstream_class_9 {
public class ServerIP {
    private String ip;
    public String getIp(){
      return ip;
    }
    public void setIp(    String ip){
      this.ip=ip;
    }
  }
public class ServerHandler {
    private String fileName="servers.xml";
    private String path="J:\\workspace\\LOG730\\src\\Q3\\";
    private XStream xstream=new XStream(new DomDriver());
    public void readFromXML(){
      try {
        FileInputStream fis=new FileInputStream(path + fileName);
        ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
        System.out.println("Host: " + server.getIp());
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}

Cannot find matching typeVariable for: xstream_class_9
Cannot find matching typeVariable for: public class xstream_class_9 {
public class ServerIP {
    private String ip;
    public String getIp(){
      return ip;
    }
    public void setIp(    String ip){
      this.ip=ip;
    }
  }
public class ServerHandler {
    private String fileName="servers.xml";
    private String path="J:\\workspace\\LOG730\\src\\Q3\\";
    private XStream xstream=new XStream(new DomDriver());
    public void readFromXML(){
      try {
        FileInputStream fis=new FileInputStream(path + fileName);
        ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
        System.out.println("Host: " + server.getIp());
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}

Cannot find matching typeVariable for: import java.io.FileInputStream;
import java.io.FileNotFoundException;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_9 {
public class ServerIP {
    private String ip;
    public String getIp(){
      return ip;
    }
    public void setIp(    String ip){
      this.ip=ip;
    }
  }
public class ServerHandler {
    private String fileName="servers.xml";
    private String path="J:\\workspace\\LOG730\\src\\Q3\\";
    private XStream xstream=new XStream(new DomDriver());
    public void readFromXML(){
      try {
        FileInputStream fis=new FileInputStream(path + fileName);
        ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
        System.out.println("Host: " + server.getIp());
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}

Cannot find matching typeVariable for: public class ServerIP {
  private String ip;
  public String getIp(){
    return ip;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
}

Did not find solution for node: ServerIP with type Type3
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: ip
For node: ip expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: ip
Cannot find matching typeVariable for: private String ip;

Cannot find matching typeVariable for: public class ServerIP {
  private String ip;
  public String getIp(){
    return ip;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
}

Cannot find matching typeVariable for: public class xstream_class_9 {
public class ServerIP {
    private String ip;
    public String getIp(){
      return ip;
    }
    public void setIp(    String ip){
      this.ip=ip;
    }
  }
public class ServerHandler {
    private String fileName="servers.xml";
    private String path="J:\\workspace\\LOG730\\src\\Q3\\";
    private XStream xstream=new XStream(new DomDriver());
    public void readFromXML(){
      try {
        FileInputStream fis=new FileInputStream(path + fileName);
        ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
        System.out.println("Host: " + server.getIp());
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}

Cannot find matching typeVariable for: import java.io.FileInputStream;
import java.io.FileNotFoundException;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_9 {
public class ServerIP {
    private String ip;
    public String getIp(){
      return ip;
    }
    public void setIp(    String ip){
      this.ip=ip;
    }
  }
public class ServerHandler {
    private String fileName="servers.xml";
    private String path="J:\\workspace\\LOG730\\src\\Q3\\";
    private XStream xstream=new XStream(new DomDriver());
    public void readFromXML(){
      try {
        FileInputStream fis=new FileInputStream(path + fileName);
        ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
        System.out.println("Host: " + server.getIp());
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}

For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: getIp
Cannot find matching typeVariable for: public String getIp(){
  return ip;
}

Cannot find matching typeVariable for: public class ServerIP {
  private String ip;
  public String getIp(){
    return ip;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
}

Cannot find matching typeVariable for: public class xstream_class_9 {
public class ServerIP {
    private String ip;
    public String getIp(){
      return ip;
    }
    public void setIp(    String ip){
      this.ip=ip;
    }
  }
public class ServerHandler {
    private String fileName="servers.xml";
    private String path="J:\\workspace\\LOG730\\src\\Q3\\";
    private XStream xstream=new XStream(new DomDriver());
    public void readFromXML(){
      try {
        FileInputStream fis=new FileInputStream(path + fileName);
        ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
        System.out.println("Host: " + server.getIp());
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}

Cannot find matching typeVariable for: import java.io.FileInputStream;
import java.io.FileNotFoundException;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_9 {
public class ServerIP {
    private String ip;
    public String getIp(){
      return ip;
    }
    public void setIp(    String ip){
      this.ip=ip;
    }
  }
public class ServerHandler {
    private String fileName="servers.xml";
    private String path="J:\\workspace\\LOG730\\src\\Q3\\";
    private XStream xstream=new XStream(new DomDriver());
    public void readFromXML(){
      try {
        FileInputStream fis=new FileInputStream(path + fileName);
        ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
        System.out.println("Host: " + server.getIp());
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}

For node: ip expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: void expected fqn: void with type: Type5 got: void
Cannot find matching typeVariable for: setIp
Cannot find matching typeVariable for: public void setIp(String ip){
  this.ip=ip;
}

Cannot find matching typeVariable for: public class ServerIP {
  private String ip;
  public String getIp(){
    return ip;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
}

Cannot find matching typeVariable for: public class xstream_class_9 {
public class ServerIP {
    private String ip;
    public String getIp(){
      return ip;
    }
    public void setIp(    String ip){
      this.ip=ip;
    }
  }
public class ServerHandler {
    private String fileName="servers.xml";
    private String path="J:\\workspace\\LOG730\\src\\Q3\\";
    private XStream xstream=new XStream(new DomDriver());
    public void readFromXML(){
      try {
        FileInputStream fis=new FileInputStream(path + fileName);
        ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
        System.out.println("Host: " + server.getIp());
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}

Cannot find matching typeVariable for: import java.io.FileInputStream;
import java.io.FileNotFoundException;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_9 {
public class ServerIP {
    private String ip;
    public String getIp(){
      return ip;
    }
    public void setIp(    String ip){
      this.ip=ip;
    }
  }
public class ServerHandler {
    private String fileName="servers.xml";
    private String path="J:\\workspace\\LOG730\\src\\Q3\\";
    private XStream xstream=new XStream(new DomDriver());
    public void readFromXML(){
      try {
        FileInputStream fis=new FileInputStream(path + fileName);
        ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
        System.out.println("Host: " + server.getIp());
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}

Cannot find matching typeVariable for: String ip
For node: String ip expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: ip expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: this.ip=ip expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: this.ip expected fqn: java.lang.String with type: Type4 got: java.lang.String
Did not find solution for node: this with type Type3
Cannot find matching typeVariable for: ip
For node: ip expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: ip
For node: ip expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: public class ServerHandler {
  private String fileName="servers.xml";
  private String path="J:\\workspace\\LOG730\\src\\Q3\\";
  private XStream xstream=new XStream(new DomDriver());
  public void readFromXML(){
    try {
      FileInputStream fis=new FileInputStream(path + fileName);
      ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
      System.out.println("Host: " + server.getIp());
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
  }
}

Did not find solution for node: ServerHandler with type Type1
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: fileName="servers.xml"
For node: fileName="servers.xml" expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: fileName expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: "servers.xml" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type4 got: java.lang.String
Cannot find matching typeVariable for: path="J:\\workspace\\LOG730\\src\\Q3\\"
For node: path="J:\\workspace\\LOG730\\src\\Q3\\" expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: path expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: "J:\\workspace\\LOG730\\src\\Q3\\" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type6 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type6 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: xstream=new XStream(new DomDriver())
For node: xstream=new XStream(new DomDriver()) expected fqn: com.thoughtworks.xstream.XStream with type: Type6 got: com.thoughtworks.xstream.XStream
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type6 got: com.thoughtworks.xstream.XStream
For node: new XStream(new DomDriver()) expected fqn: com.thoughtworks.xstream.XStream with type: Type6 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type6 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type6 got: com.thoughtworks.xstream.XStream
For node: new DomDriver() expected fqn: com.thoughtworks.xstream.io.xml.DomDriver with type: Type8 got: com.thoughtworks.xstream.io.xml.DomDriver
For node: DomDriver expected fqn: com.thoughtworks.xstream.io.xml.DomDriver with type: Type8 got: com.thoughtworks.xstream.io.xml.DomDriver
For node: DomDriver expected fqn: com.thoughtworks.xstream.io.xml.DomDriver with type: Type8 got: com.thoughtworks.xstream.io.xml.DomDriver
For node: void expected fqn: void with type: Type5 got: void
Cannot find matching typeVariable for: readFromXML
Cannot find matching typeVariable for: public void readFromXML(){
  try {
    FileInputStream fis=new FileInputStream(path + fileName);
    ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
    System.out.println("Host: " + server.getIp());
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}

Cannot find matching typeVariable for: public class ServerHandler {
  private String fileName="servers.xml";
  private String path="J:\\workspace\\LOG730\\src\\Q3\\";
  private XStream xstream=new XStream(new DomDriver());
  public void readFromXML(){
    try {
      FileInputStream fis=new FileInputStream(path + fileName);
      ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
      System.out.println("Host: " + server.getIp());
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
  }
}

Cannot find matching typeVariable for: public class xstream_class_9 {
public class ServerIP {
    private String ip;
    public String getIp(){
      return ip;
    }
    public void setIp(    String ip){
      this.ip=ip;
    }
  }
public class ServerHandler {
    private String fileName="servers.xml";
    private String path="J:\\workspace\\LOG730\\src\\Q3\\";
    private XStream xstream=new XStream(new DomDriver());
    public void readFromXML(){
      try {
        FileInputStream fis=new FileInputStream(path + fileName);
        ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
        System.out.println("Host: " + server.getIp());
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}

Cannot find matching typeVariable for: import java.io.FileInputStream;
import java.io.FileNotFoundException;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
public class xstream_class_9 {
public class ServerIP {
    private String ip;
    public String getIp(){
      return ip;
    }
    public void setIp(    String ip){
      this.ip=ip;
    }
  }
public class ServerHandler {
    private String fileName="servers.xml";
    private String path="J:\\workspace\\LOG730\\src\\Q3\\";
    private XStream xstream=new XStream(new DomDriver());
    public void readFromXML(){
      try {
        FileInputStream fis=new FileInputStream(path + fileName);
        ServerIP server=(ServerIP)xstream.fromXML(fis,new ServerIP());
        System.out.println("Host: " + server.getIp());
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}

For node: FileInputStream expected fqn: java.io.FileInputStream with type: Type12 got: java.io.FileInputStream
For node: FileInputStream expected fqn: java.io.FileInputStream with type: Type12 got: java.io.FileInputStream
Cannot find matching typeVariable for: fis=new FileInputStream(path + fileName)
For node: fis=new FileInputStream(path + fileName) expected fqn: java.io.FileInputStream with type: Type12 got: java.io.FileInputStream
For node: fis expected fqn: java.io.FileInputStream with type: Type12 got: java.io.FileInputStream
For node: new FileInputStream(path + fileName) expected fqn: java.io.FileInputStream with type: Type12 got: java.io.FileInputStream
For node: FileInputStream expected fqn: java.io.FileInputStream with type: Type12 got: java.io.FileInputStream
For node: FileInputStream expected fqn: java.io.FileInputStream with type: Type12 got: java.io.FileInputStream
For node: path + fileName expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: path expected fqn: java.lang.String with type: Type4 got: java.lang.String
For node: fileName expected fqn: java.lang.String with type: Type4 got: java.lang.String
Did not find solution for node: ServerIP with type Type3
Did not find solution for node: ServerIP with type Type3
Cannot find matching typeVariable for: server=(ServerIP)xstream.fromXML(fis,new ServerIP())
Did not find solution for node: server=(ServerIP)xstream.fromXML(fis,new ServerIP()) with type Type3
Did not find solution for node: server with type Type3
Did not find solution for node: (ServerIP)xstream.fromXML(fis,new ServerIP()) with type Type3
Did not find solution for node: ServerIP with type Type3
Did not find solution for node: ServerIP with type Type3
For node: xstream.fromXML(fis,new ServerIP()) expected fqn: java.lang.Object with type: Type16 got: java.lang.Object
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type6 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: fromXML
For node: fromXML expected fqn: java.lang.Object with type: Type16 got: java.lang.Object
For node: fis expected fqn: java.io.FileInputStream with type: Type12 got: java.io.FileInputStream
Did not find solution for node: new ServerIP() with type Type3
Did not find solution for node: ServerIP with type Type3
Did not find solution for node: ServerIP with type Type3
For node: System.out.println("Host: " + server.getIp()) expected fqn: void with type: Type24 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type24 got: void
Did not find solution for node: System with type Type22
For node: out expected fqn: java.io.PrintStream with type: Type23 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type24 got: void
For node: "Host: " + server.getIp() expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: "Host: " expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: server.getIp() expected fqn: java.lang.String with type: Type20 got: java.lang.String
Did not find solution for node: server with type Type3
Cannot find matching typeVariable for: getIp
For node: getIp expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: FileNotFoundException e
For node: FileNotFoundException e expected fqn: java.io.FileNotFoundException with type: Type27 got: java.io.FileNotFoundException
For node: FileNotFoundException expected fqn: java.io.FileNotFoundException with type: Type27 got: java.io.FileNotFoundException
For node: FileNotFoundException expected fqn: java.io.FileNotFoundException with type: Type27 got: java.io.FileNotFoundException
For node: e expected fqn: java.io.FileNotFoundException with type: Type27 got: java.io.FileNotFoundException
For node: e.printStackTrace() expected fqn: void with type: Type28 got: void
For node: e expected fqn: java.io.FileNotFoundException with type: Type27 got: java.io.FileNotFoundException
Cannot find matching typeVariable for: printStackTrace
For node: printStackTrace expected fqn: void with type: Type28 got: void
{Checked=80, Analyzed=65, Unsolved=15, Incorrect=2, Correct=63}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=7, Analyzed=0, Unsolved=7, Incorrect=0, Correct=0}
=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=ThisExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=SimpleName: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
com.thoughtworks.xstream.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=FieldAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=SimpleName: {Checked=24, Analyzed=23, Unsolved=1, Incorrect=1, Correct=22}
java=SimpleType: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
java=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=StringLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=VariableDeclarationFragment: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
void=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
Total stats
{Checked=80, Analyzed=65, Unsolved=15, Incorrect=2, Correct=63}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=7, Analyzed=0, Unsolved=7, Incorrect=0, Correct=0}
=SimpleType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=ThisExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=SimpleName: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
com.thoughtworks.xstream.=SimpleType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=FieldAccess: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=SimpleName: {Checked=24, Analyzed=23, Unsolved=1, Incorrect=1, Correct=22}
java=SimpleType: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
java=SingleVariableDeclaration: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=StringLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=VariableDeclarationFragment: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
void=MethodInvocation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
void=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
,CastExpression,0,1,0,0,1
,ClassInstanceCreation,0,1,0,0,1
,SimpleName,0,7,0,0,7
,SimpleType,0,3,0,0,3
,ThisExpression,0,1,0,0,1
,VariableDeclarationFragment,0,1,0,0,1
com.thoughtworks.xstream.,ClassInstanceCreation,2,2,2,0,0
com.thoughtworks.xstream.,SimpleName,5,5,5,0,0
com.thoughtworks.xstream.,SimpleType,3,3,3,0,0
com.thoughtworks.xstream.,VariableDeclarationFragment,1,1,1,0,0
java,Assignment,1,1,1,0,0
java,ClassInstanceCreation,1,1,1,0,0
java,FieldAccess,1,1,1,0,0
java,InfixExpression,2,2,2,0,0
java,MethodInvocation,2,2,2,0,0
java,QualifiedName,1,1,0,1,0
java,SimpleName,23,24,22,1,1
java,SimpleType,8,8,8,0,0
java,SingleVariableDeclaration,2,2,2,0,0
java,StringLiteral,3,3,3,0,0
java,VariableDeclarationFragment,4,4,4,0,0
void,MethodInvocation,2,2,2,0,0
void,PrimitiveType,2,2,2,0,0
void,SimpleName,2,2,2,0,0
