echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_38.java
Expect check=85
Cannot find matching typeVariable for: public class xstream_class_38 {
  XStream xstream=new XStream();
@XStreamAlias("bookdetails") public class BookDetails {
    private int bookId;
    private String bookName;
    private int amount;
  }
@XStreamAlias("Books") public class Books {
    private List<BookDetails> bookDetails=new ArrayList<BookDetails>();
  }
  public BookDetails convertXml(  String xml){
    xstream.processAnnotations(Books.class);
    xstream.processAnnotations(BookDetails.class);
    xstream.addImplicitCollection(Books.class,"bookDetails");
    Books b=(Books)xstream.fromXML(xml);
    return b.bookDetails.get(0);
  }
}

Did not find solution for node: xstream_class_38 with type Type1
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: xstream=new XStream()
For node: xstream=new XStream() expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
For node: new XStream() expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
For node: XStream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: @XStreamAlias("bookdetails") public class BookDetails {
  private int bookId;
  private String bookName;
  private int amount;
}

For node: @XStreamAlias("bookdetails") expected fqn: com.thoughtworks.xstream.annotations.XStreamAlias with type: Type10 got: com.thoughtworks.xstream.annotations.XStreamAlias
For node: XStreamAlias expected fqn: com.thoughtworks.xstream.annotations.XStreamAlias with type: Type10 got: com.thoughtworks.xstream.annotations.XStreamAlias
For node: "bookdetails" expected fqn: java.lang.String with type: Type9 got: java.lang.String
Did not find solution for node: BookDetails with type Type2
For node: int expected fqn: int with type: Type7 got: int
Cannot find matching typeVariable for: bookId
For node: bookId expected fqn: int with type: Type7 got: int
Cannot find matching typeVariable for: bookId
Cannot find matching typeVariable for: private int bookId;

Cannot find matching typeVariable for: @XStreamAlias("bookdetails") public class BookDetails {
  private int bookId;
  private String bookName;
  private int amount;
}

Cannot find matching typeVariable for: public class xstream_class_38 {
  XStream xstream=new XStream();
@XStreamAlias("bookdetails") public class BookDetails {
    private int bookId;
    private String bookName;
    private int amount;
  }
@XStreamAlias("Books") public class Books {
    private List<BookDetails> bookDetails=new ArrayList<BookDetails>();
  }
  public BookDetails convertXml(  String xml){
    xstream.processAnnotations(Books.class);
    xstream.processAnnotations(BookDetails.class);
    xstream.addImplicitCollection(Books.class,"bookDetails");
    Books b=(Books)xstream.fromXML(xml);
    return b.bookDetails.get(0);
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
public class xstream_class_38 {
  XStream xstream=new XStream();
@XStreamAlias("bookdetails") public class BookDetails {
    private int bookId;
    private String bookName;
    private int amount;
  }
@XStreamAlias("Books") public class Books {
    private List<BookDetails> bookDetails=new ArrayList<BookDetails>();
  }
  public BookDetails convertXml(  String xml){
    xstream.processAnnotations(Books.class);
    xstream.processAnnotations(BookDetails.class);
    xstream.addImplicitCollection(Books.class,"bookDetails");
    Books b=(Books)xstream.fromXML(xml);
    return b.bookDetails.get(0);
  }
}

For node: String expected fqn: java.lang.String with type: Type8 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type8 got: java.lang.String
Cannot find matching typeVariable for: bookName
For node: bookName expected fqn: java.lang.String with type: Type8 got: java.lang.String
Cannot find matching typeVariable for: bookName
Cannot find matching typeVariable for: private String bookName;

Cannot find matching typeVariable for: @XStreamAlias("bookdetails") public class BookDetails {
  private int bookId;
  private String bookName;
  private int amount;
}

Cannot find matching typeVariable for: public class xstream_class_38 {
  XStream xstream=new XStream();
@XStreamAlias("bookdetails") public class BookDetails {
    private int bookId;
    private String bookName;
    private int amount;
  }
@XStreamAlias("Books") public class Books {
    private List<BookDetails> bookDetails=new ArrayList<BookDetails>();
  }
  public BookDetails convertXml(  String xml){
    xstream.processAnnotations(Books.class);
    xstream.processAnnotations(BookDetails.class);
    xstream.addImplicitCollection(Books.class,"bookDetails");
    Books b=(Books)xstream.fromXML(xml);
    return b.bookDetails.get(0);
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
public class xstream_class_38 {
  XStream xstream=new XStream();
@XStreamAlias("bookdetails") public class BookDetails {
    private int bookId;
    private String bookName;
    private int amount;
  }
@XStreamAlias("Books") public class Books {
    private List<BookDetails> bookDetails=new ArrayList<BookDetails>();
  }
  public BookDetails convertXml(  String xml){
    xstream.processAnnotations(Books.class);
    xstream.processAnnotations(BookDetails.class);
    xstream.addImplicitCollection(Books.class,"bookDetails");
    Books b=(Books)xstream.fromXML(xml);
    return b.bookDetails.get(0);
  }
}

For node: int expected fqn: int with type: Type7 got: int
Cannot find matching typeVariable for: amount
For node: amount expected fqn: int with type: Type7 got: int
Cannot find matching typeVariable for: amount
Cannot find matching typeVariable for: private int amount;

Cannot find matching typeVariable for: @XStreamAlias("bookdetails") public class BookDetails {
  private int bookId;
  private String bookName;
  private int amount;
}

Cannot find matching typeVariable for: public class xstream_class_38 {
  XStream xstream=new XStream();
@XStreamAlias("bookdetails") public class BookDetails {
    private int bookId;
    private String bookName;
    private int amount;
  }
@XStreamAlias("Books") public class Books {
    private List<BookDetails> bookDetails=new ArrayList<BookDetails>();
  }
  public BookDetails convertXml(  String xml){
    xstream.processAnnotations(Books.class);
    xstream.processAnnotations(BookDetails.class);
    xstream.addImplicitCollection(Books.class,"bookDetails");
    Books b=(Books)xstream.fromXML(xml);
    return b.bookDetails.get(0);
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
public class xstream_class_38 {
  XStream xstream=new XStream();
@XStreamAlias("bookdetails") public class BookDetails {
    private int bookId;
    private String bookName;
    private int amount;
  }
@XStreamAlias("Books") public class Books {
    private List<BookDetails> bookDetails=new ArrayList<BookDetails>();
  }
  public BookDetails convertXml(  String xml){
    xstream.processAnnotations(Books.class);
    xstream.processAnnotations(BookDetails.class);
    xstream.addImplicitCollection(Books.class,"bookDetails");
    Books b=(Books)xstream.fromXML(xml);
    return b.bookDetails.get(0);
  }
}

Cannot find matching typeVariable for: @XStreamAlias("Books") public class Books {
  private List<BookDetails> bookDetails=new ArrayList<BookDetails>();
}

For node: @XStreamAlias("Books") expected fqn: com.thoughtworks.xstream.annotations.XStreamAlias with type: Type10 got: com.thoughtworks.xstream.annotations.XStreamAlias
For node: XStreamAlias expected fqn: com.thoughtworks.xstream.annotations.XStreamAlias with type: Type10 got: com.thoughtworks.xstream.annotations.XStreamAlias
For node: "Books" expected fqn: java.lang.String with type: Type9 got: java.lang.String
Did not find solution for node: Books with type Type3
Did not find solution for node: List<BookDetails> with type Type12=Type11<Type2>
For node: List expected fqn: java.util.List<xstream_class_38.BookDetails> with type: Type11 got: java.util.List
For node: List expected fqn: java.util.List<xstream_class_38.BookDetails> with type: Type11 got: java.util.List
Did not find solution for node: BookDetails with type Type2
Did not find solution for node: BookDetails with type Type2
Cannot find matching typeVariable for: bookDetails=new ArrayList<BookDetails>()
Did not find solution for node: bookDetails=new ArrayList<BookDetails>() with type Type12=Type11<Type2>
Did not find solution for node: bookDetails with type Type12=Type11<Type2>
Did not find solution for node: new ArrayList<BookDetails>() with type Type14=Type13<Type2>
Did not find solution for node: ArrayList<BookDetails> with type Type14=Type13<Type2>
For node: ArrayList expected fqn: java.util.ArrayList<xstream_class_38.BookDetails> with type: Type13 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList<xstream_class_38.BookDetails> with type: Type13 got: java.util.ArrayList
Did not find solution for node: BookDetails with type Type2
Did not find solution for node: BookDetails with type Type2
Did not find solution for node: BookDetails with type Type2
Did not find solution for node: BookDetails with type Type2
Cannot find matching typeVariable for: convertXml
Cannot find matching typeVariable for: public BookDetails convertXml(String xml){
  xstream.processAnnotations(Books.class);
  xstream.processAnnotations(BookDetails.class);
  xstream.addImplicitCollection(Books.class,"bookDetails");
  Books b=(Books)xstream.fromXML(xml);
  return b.bookDetails.get(0);
}

Cannot find matching typeVariable for: public class xstream_class_38 {
  XStream xstream=new XStream();
@XStreamAlias("bookdetails") public class BookDetails {
    private int bookId;
    private String bookName;
    private int amount;
  }
@XStreamAlias("Books") public class Books {
    private List<BookDetails> bookDetails=new ArrayList<BookDetails>();
  }
  public BookDetails convertXml(  String xml){
    xstream.processAnnotations(Books.class);
    xstream.processAnnotations(BookDetails.class);
    xstream.addImplicitCollection(Books.class,"bookDetails");
    Books b=(Books)xstream.fromXML(xml);
    return b.bookDetails.get(0);
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
public class xstream_class_38 {
  XStream xstream=new XStream();
@XStreamAlias("bookdetails") public class BookDetails {
    private int bookId;
    private String bookName;
    private int amount;
  }
@XStreamAlias("Books") public class Books {
    private List<BookDetails> bookDetails=new ArrayList<BookDetails>();
  }
  public BookDetails convertXml(  String xml){
    xstream.processAnnotations(Books.class);
    xstream.processAnnotations(BookDetails.class);
    xstream.addImplicitCollection(Books.class,"bookDetails");
    Books b=(Books)xstream.fromXML(xml);
    return b.bookDetails.get(0);
  }
}

Cannot find matching typeVariable for: String xml
For node: String xml expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: xml expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: xstream.processAnnotations(Books.class) expected fqn: void with type: Type19 got: void
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: processAnnotations
For node: processAnnotations expected fqn: void with type: Type19 got: void
For node: Books.class expected fqn: java.lang.Class<xstream_class_38.Books> with type: Type18 got: java.lang.Class
Did not find solution for node: Books with type Type3
Did not find solution for node: Books with type Type3
For node: xstream.processAnnotations(BookDetails.class) expected fqn: void with type: Type21 got: void
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: processAnnotations
For node: processAnnotations expected fqn: void with type: Type21 got: void
For node: BookDetails.class expected fqn: java.lang.Class<xstream_class_38.BookDetails> with type: Type18 got: java.lang.Class
Did not find solution for node: BookDetails with type Type2
Did not find solution for node: BookDetails with type Type2
For node: xstream.addImplicitCollection(Books.class,"bookDetails") expected fqn: void with type: Type22 got: void
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: addImplicitCollection
For node: addImplicitCollection expected fqn: void with type: Type22 got: void
For node: Books.class expected fqn: java.lang.Class<xstream_class_38.Books> with type: Type18 got: java.lang.Class
Did not find solution for node: Books with type Type3
Did not find solution for node: Books with type Type3
For node: "bookDetails" expected fqn: java.lang.String with type: Type9 got: java.lang.String
Did not find solution for node: Books with type Type3
Did not find solution for node: Books with type Type3
Cannot find matching typeVariable for: b=(Books)xstream.fromXML(xml)
Did not find solution for node: b=(Books)xstream.fromXML(xml) with type Type3
Did not find solution for node: b with type Type3
Did not find solution for node: (Books)xstream.fromXML(xml) with type Type3
Did not find solution for node: Books with type Type3
Did not find solution for node: Books with type Type3
For node: xstream.fromXML(xml) expected fqn: java.lang.Object with type: Type26 got: java.lang.Object
For node: xstream expected fqn: com.thoughtworks.xstream.XStream with type: Type4 got: com.thoughtworks.xstream.XStream
Cannot find matching typeVariable for: fromXML
For node: fromXML expected fqn: java.lang.Object with type: Type26 got: java.lang.Object
For node: xml expected fqn: java.lang.String with type: Type9 got: java.lang.String
For node: b.bookDetails.get(0) expected fqn: xstream_class_38.BookDetails with type: Type30 got: java.lang.Object
Cannot find matching typeVariable for: b.bookDetails
For node: b.bookDetails expected fqn: java.util.List<xstream_class_38.BookDetails> with type: Type30 got: java.lang.Object
Did not find solution for node: b with type Type3
Did not find solution for node: bookDetails with type Type12=Type11<Type2>
Cannot find matching typeVariable for: get
For node: get expected fqn: xstream_class_38.BookDetails with type: Type30 got: java.lang.Object
For node: 0 expected fqn: int with type: Type29 got: byte
{Checked=78, Analyzed=49, Unsolved=29, Incorrect=11, Correct=38}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
=SimpleName: {Checked=14, Analyzed=1, Unsolved=13, Incorrect=1, Correct=0}
=SimpleType: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
com.thoughtworks.xstream.=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=SingleMemberAnnotation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ParameterizedType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=SimpleName: {Checked=9, Analyzed=7, Unsolved=2, Incorrect=2, Correct=5}
java=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=2, Correct=2}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=TypeLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=3, Correct=0}
java=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
void=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
Total stats
{Checked=78, Analyzed=49, Unsolved=29, Incorrect=11, Correct=38}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
=SimpleName: {Checked=14, Analyzed=1, Unsolved=13, Incorrect=1, Correct=0}
=SimpleType: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
com.thoughtworks.xstream.=ClassInstanceCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
com.thoughtworks.xstream.=SimpleType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=SingleMemberAnnotation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
com.thoughtworks.xstream.=VariableDeclarationFragment: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=VariableDeclarationFragment: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ParameterizedType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=SimpleName: {Checked=9, Analyzed=7, Unsolved=2, Incorrect=2, Correct=5}
java=SimpleType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=2, Correct=2}
java=SingleVariableDeclaration: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=TypeLiteral: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=3, Correct=0}
java=VariableDeclarationFragment: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
void=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
,CastExpression,0,1,0,0,1
,MethodInvocation,1,1,0,1,0
,SimpleName,1,14,0,1,13
,SimpleType,0,8,0,0,8
,VariableDeclarationFragment,0,1,0,0,1
com.thoughtworks.xstream.,ClassInstanceCreation,1,1,1,0,0
com.thoughtworks.xstream.,SimpleName,9,9,9,0,0
com.thoughtworks.xstream.,SimpleType,2,2,2,0,0
com.thoughtworks.xstream.,SingleMemberAnnotation,2,2,2,0,0
com.thoughtworks.xstream.,VariableDeclarationFragment,1,1,1,0,0
int,NumberLiteral,1,1,0,1,0
int,PrimitiveType,2,2,2,0,0
int,VariableDeclarationFragment,2,2,2,0,0
java,ClassInstanceCreation,0,1,0,0,1
java,MethodInvocation,1,1,1,0,0
java,ParameterizedType,0,2,0,0,2
java,QualifiedName,1,1,0,1,0
java,SimpleName,7,9,5,2,2
java,SimpleType,4,4,2,2,0
java,SingleVariableDeclaration,1,1,1,0,0
java,StringLiteral,3,3,3,0,0
java,TypeLiteral,3,3,0,3,0
java,VariableDeclarationFragment,1,2,1,0,1
void,MethodInvocation,3,3,3,0,0
void,SimpleName,3,3,3,0,0
