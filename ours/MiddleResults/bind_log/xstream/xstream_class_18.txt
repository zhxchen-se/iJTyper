echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_18.java
Expect check=144
Cannot find matching typeVariable for: public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

Cannot find matching typeVariable for: xstream_class_18
Cannot find matching typeVariable for: public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

Cannot find matching typeVariable for: import java.util.HashMap;
import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

Cannot find matching typeVariable for: public class MapToAttributesConverter implements Converter {
  public MapToAttributesConverter(){
  }
  @Override public boolean canConvert(  Class type){
    return Map.class.isAssignableFrom(type);
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    Map<String,String> map=(Map<String,String>)source;
    for (    Map.Entry<String,String> entry : map.entrySet()) {
      writer.addAttribute(entry.getKey(),entry.getValue().toString());
    }
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Map<String,String> map=new HashMap<String,String>();
    for (int i=0; i < reader.getAttributeCount(); i++) {
      String key=reader.getAttributeName(i);
      String value=reader.getAttribute(key);
      map.put(key,value);
    }
    return map;
  }
}

Cannot find matching typeVariable for: MapToAttributesConverter
Cannot find matching typeVariable for: public class MapToAttributesConverter implements Converter {
  public MapToAttributesConverter(){
  }
  @Override public boolean canConvert(  Class type){
    return Map.class.isAssignableFrom(type);
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    Map<String,String> map=(Map<String,String>)source;
    for (    Map.Entry<String,String> entry : map.entrySet()) {
      writer.addAttribute(entry.getKey(),entry.getValue().toString());
    }
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Map<String,String> map=new HashMap<String,String>();
    for (int i=0; i < reader.getAttributeCount(); i++) {
      String key=reader.getAttributeName(i);
      String value=reader.getAttribute(key);
      map.put(key,value);
    }
    return map;
  }
}

Cannot find matching typeVariable for: public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

Cannot find matching typeVariable for: import java.util.HashMap;
import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type3 got: com.thoughtworks.xstream.converters.Converter
For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type3 got: com.thoughtworks.xstream.converters.Converter
Cannot find matching typeVariable for: MapToAttributesConverter
Cannot find matching typeVariable for: public MapToAttributesConverter(){
}

Cannot find matching typeVariable for: public class MapToAttributesConverter implements Converter {
  public MapToAttributesConverter(){
  }
  @Override public boolean canConvert(  Class type){
    return Map.class.isAssignableFrom(type);
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    Map<String,String> map=(Map<String,String>)source;
    for (    Map.Entry<String,String> entry : map.entrySet()) {
      writer.addAttribute(entry.getKey(),entry.getValue().toString());
    }
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Map<String,String> map=new HashMap<String,String>();
    for (int i=0; i < reader.getAttributeCount(); i++) {
      String key=reader.getAttributeName(i);
      String value=reader.getAttribute(key);
      map.put(key,value);
    }
    return map;
  }
}

Cannot find matching typeVariable for: public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

Cannot find matching typeVariable for: import java.util.HashMap;
import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

For node: @Override expected fqn: java.lang.Override with type: Type20 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type20 got: java.lang.Override
For node: boolean expected fqn: boolean with type: Type5 got: boolean
Cannot find matching typeVariable for: canConvert
Cannot find matching typeVariable for: @Override public boolean canConvert(Class type){
  return Map.class.isAssignableFrom(type);
}

Cannot find matching typeVariable for: public class MapToAttributesConverter implements Converter {
  public MapToAttributesConverter(){
  }
  @Override public boolean canConvert(  Class type){
    return Map.class.isAssignableFrom(type);
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    Map<String,String> map=(Map<String,String>)source;
    for (    Map.Entry<String,String> entry : map.entrySet()) {
      writer.addAttribute(entry.getKey(),entry.getValue().toString());
    }
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Map<String,String> map=new HashMap<String,String>();
    for (int i=0; i < reader.getAttributeCount(); i++) {
      String key=reader.getAttributeName(i);
      String value=reader.getAttribute(key);
      map.put(key,value);
    }
    return map;
  }
}

Cannot find matching typeVariable for: public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

Cannot find matching typeVariable for: import java.util.HashMap;
import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

Cannot find matching typeVariable for: Class type
For node: Class type expected fqn: java.lang.Class with type: Type21 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type21 got: java.lang.Class
For node: Class expected fqn: java.lang.Class with type: Type21 got: java.lang.Class
For node: type expected fqn: java.lang.Class with type: Type21 got: java.lang.Class
For node: Map.class.isAssignableFrom(type) expected fqn: boolean with type: Type24 got: boolean
For node: Map.class expected fqn: java.lang.Class<java.util.Map> with type: Type23 got: java.lang.Class
For node: Map expected fqn: java.util.Map with type: Type22 got: java.util.Map
For node: Map expected fqn: java.util.Map with type: Type22 got: java.util.Map
Cannot find matching typeVariable for: isAssignableFrom
For node: isAssignableFrom expected fqn: boolean with type: Type24 got: boolean
For node: type expected fqn: java.lang.Class with type: Type21 got: java.lang.Class
For node: @Override expected fqn: java.lang.Override with type: Type20 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type20 got: java.lang.Override
For node: void expected fqn: void with type: Type7 got: void
Cannot find matching typeVariable for: marshal
Cannot find matching typeVariable for: @Override public void marshal(Object source,HierarchicalStreamWriter writer,MarshallingContext context){
  Map<String,String> map=(Map<String,String>)source;
  for (  Map.Entry<String,String> entry : map.entrySet()) {
    writer.addAttribute(entry.getKey(),entry.getValue().toString());
  }
}

Cannot find matching typeVariable for: public class MapToAttributesConverter implements Converter {
  public MapToAttributesConverter(){
  }
  @Override public boolean canConvert(  Class type){
    return Map.class.isAssignableFrom(type);
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    Map<String,String> map=(Map<String,String>)source;
    for (    Map.Entry<String,String> entry : map.entrySet()) {
      writer.addAttribute(entry.getKey(),entry.getValue().toString());
    }
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Map<String,String> map=new HashMap<String,String>();
    for (int i=0; i < reader.getAttributeCount(); i++) {
      String key=reader.getAttributeName(i);
      String value=reader.getAttribute(key);
      map.put(key,value);
    }
    return map;
  }
}

Cannot find matching typeVariable for: public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

Cannot find matching typeVariable for: import java.util.HashMap;
import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

Cannot find matching typeVariable for: Object source
For node: Object source expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: source expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
Cannot find matching typeVariable for: HierarchicalStreamWriter writer
For node: HierarchicalStreamWriter writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type27 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type27 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type27 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type27 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: MarshallingContext context
For node: MarshallingContext context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type28 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type28 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type28 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type28 got: com.thoughtworks.xstream.converters.MarshallingContext
Did not find solution for node: Map<String,String> with type Type30=Type22<Type29,Type29>
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type22 got: java.util.Map
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type22 got: java.util.Map
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
Cannot find matching typeVariable for: map=(Map<String,String>)source
Did not find solution for node: map=(Map<String,String>)source with type Type30=Type22<Type29,Type29>
Did not find solution for node: map with type Type30=Type22<Type29,Type29>
Did not find solution for node: (Map<String,String>)source with type Type30=Type22<Type29,Type29>
Did not find solution for node: Map<String,String> with type Type30=Type22<Type29,Type29>
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type22 got: java.util.Map
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type22 got: java.util.Map
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: source expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
Cannot find matching typeVariable for: Map.Entry<String,String> entry
Did not find solution for node: Map.Entry<String,String> entry with type Type32=Type31<Type29,Type29>
Did not find solution for node: Map.Entry<String,String> with type Type32=Type31<Type29,Type29>
Did not find solution for node: Map.Entry with type Type31
Did not find solution for node: Map.Entry with type Type31
For node: Map expected fqn: java.util.Map with type: Type22 got: java.util.Map
Cannot find matching typeVariable for: Entry
Did not find solution for node: Entry with type Type31
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
Did not find solution for node: entry with type Type32=Type31<Type29,Type29>
Did not find solution for node: map.entrySet() with type Type33
Did not find solution for node: map with type Type30=Type22<Type29,Type29>
Cannot find matching typeVariable for: entrySet
Did not find solution for node: entrySet with type Type33
For node: writer.addAttribute(entry.getKey(),entry.getValue().toString()) expected fqn: void with type: Type46 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type27 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: addAttribute
For node: addAttribute expected fqn: void with type: Type46 got: void
For node: entry.getKey() expected fqn: java.lang.String with type: Type37 got: java.lang.String
Did not find solution for node: entry with type Type32=Type31<Type29,Type29>
Cannot find matching typeVariable for: getKey
For node: getKey expected fqn: java.lang.String with type: Type37 got: java.lang.String
For node: entry.getValue().toString() expected fqn: java.lang.String with type: Type45 got: java.lang.String
Did not find solution for node: entry.getValue() with type Type41
Did not find solution for node: entry with type Type32=Type31<Type29,Type29>
Cannot find matching typeVariable for: getValue
Did not find solution for node: getValue with type Type41
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type45 got: java.lang.String
For node: @Override expected fqn: java.lang.Override with type: Type20 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type20 got: java.lang.Override
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type4 got: java.lang.Object
Cannot find matching typeVariable for: unmarshal
Cannot find matching typeVariable for: @Override public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context){
  Map<String,String> map=new HashMap<String,String>();
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String key=reader.getAttributeName(i);
    String value=reader.getAttribute(key);
    map.put(key,value);
  }
  return map;
}

Cannot find matching typeVariable for: public class MapToAttributesConverter implements Converter {
  public MapToAttributesConverter(){
  }
  @Override public boolean canConvert(  Class type){
    return Map.class.isAssignableFrom(type);
  }
  @Override public void marshal(  Object source,  HierarchicalStreamWriter writer,  MarshallingContext context){
    Map<String,String> map=(Map<String,String>)source;
    for (    Map.Entry<String,String> entry : map.entrySet()) {
      writer.addAttribute(entry.getKey(),entry.getValue().toString());
    }
  }
  @Override public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    Map<String,String> map=new HashMap<String,String>();
    for (int i=0; i < reader.getAttributeCount(); i++) {
      String key=reader.getAttributeName(i);
      String value=reader.getAttribute(key);
      map.put(key,value);
    }
    return map;
  }
}

Cannot find matching typeVariable for: public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

Cannot find matching typeVariable for: import java.util.HashMap;
import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_18 {
public class MapToAttributesConverter implements Converter {
    public MapToAttributesConverter(){
    }
    @Override public boolean canConvert(    Class type){
      return Map.class.isAssignableFrom(type);
    }
    @Override public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Map<String,String> map=(Map<String,String>)source;
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writer.addAttribute(entry.getKey(),entry.getValue().toString());
      }
    }
    @Override public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> map=new HashMap<String,String>();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        String key=reader.getAttributeName(i);
        String value=reader.getAttribute(key);
        map.put(key,value);
      }
      return map;
    }
  }
}

Cannot find matching typeVariable for: HierarchicalStreamReader reader
For node: HierarchicalStreamReader reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type50 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type50 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type50 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type50 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: UnmarshallingContext context
For node: UnmarshallingContext context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type51 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type51 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type51 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type51 got: com.thoughtworks.xstream.converters.UnmarshallingContext
Did not find solution for node: Map<String,String> with type Type30=Type22<Type29,Type29>
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type22 got: java.util.Map
For node: Map expected fqn: java.util.Map<java.lang.String,java.lang.String> with type: Type22 got: java.util.Map
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
Cannot find matching typeVariable for: map=new HashMap<String,String>()
Did not find solution for node: map=new HashMap<String,String>() with type Type30=Type22<Type29,Type29>
Did not find solution for node: map with type Type30=Type22<Type29,Type29>
Did not find solution for node: new HashMap<String,String>() with type Type53=Type52<Type29,Type29>
Did not find solution for node: HashMap<String,String> with type Type53=Type52<Type29,Type29>
For node: HashMap expected fqn: java.util.HashMap<java.lang.String,java.lang.String> with type: Type52 got: java.util.HashMap
For node: HashMap expected fqn: java.util.HashMap<java.lang.String,java.lang.String> with type: Type52 got: java.util.HashMap
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
Cannot find matching typeVariable for: int i=0
Did not find solution for node: int i=0 with type Type57
Did not find solution for node: int with type Type57
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type57
Did not find solution for node: i with type Type57
For node: 0 expected fqn: int with type: Type58 got: byte
For node: i < reader.getAttributeCount() expected fqn: boolean with type: Type5 got: boolean
Did not find solution for node: i with type Type57
For node: reader.getAttributeCount() expected fqn: int with type: Type59 got: int
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type50 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: getAttributeCount
For node: getAttributeCount expected fqn: int with type: Type59 got: int
Did not find solution for node: i++ with type Type57
Did not find solution for node: i with type Type57
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
Cannot find matching typeVariable for: key=reader.getAttributeName(i)
For node: key=reader.getAttributeName(i) expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: key expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: reader.getAttributeName(i) expected fqn: java.lang.String with type: Type62 got: java.lang.String
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type50 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: getAttributeName
For node: getAttributeName expected fqn: java.lang.String with type: Type62 got: java.lang.String
Did not find solution for node: i with type Type57
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type29 got: java.lang.String
Cannot find matching typeVariable for: value=reader.getAttribute(key)
For node: value=reader.getAttribute(key) expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: value expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: reader.getAttribute(key) expected fqn: java.lang.String with type: Type65 got: java.lang.String
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type50 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: getAttribute
For node: getAttribute expected fqn: java.lang.String with type: Type65 got: java.lang.String
For node: key expected fqn: java.lang.String with type: Type29 got: java.lang.String
Did not find solution for node: map.put(key,value) with type Type68
Did not find solution for node: map with type Type30=Type22<Type29,Type29>
Cannot find matching typeVariable for: put
Did not find solution for node: put with type Type68
For node: key expected fqn: java.lang.String with type: Type29 got: java.lang.String
For node: value expected fqn: java.lang.String with type: Type29 got: java.lang.String
Did not find solution for node: map with type Type30=Type22<Type29,Type29>
{Checked=136, Analyzed=101, Unsolved=35, Incorrect=10, Correct=91}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=13, Analyzed=13, Unsolved=0, Incorrect=0, Correct=13}
com.thoughtworks.xstream.=SimpleType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=PostfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=SimpleName: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=0, Correct=1}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=7, Analyzed=4, Unsolved=3, Incorrect=0, Correct=4}
java=ParameterizedType: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SimpleName: {Checked=49, Analyzed=37, Unsolved=12, Incorrect=4, Correct=33}
java=SimpleType: {Checked=21, Analyzed=20, Unsolved=1, Incorrect=4, Correct=16}
java=SingleVariableDeclaration: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=TypeLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=VariableDeclarationFragment: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
void=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
Total stats
{Checked=136, Analyzed=101, Unsolved=35, Incorrect=10, Correct=91}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=13, Analyzed=13, Unsolved=0, Incorrect=0, Correct=13}
com.thoughtworks.xstream.=SimpleType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
int=PostfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=SimpleName: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=0, Correct=1}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=MarkerAnnotation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=7, Analyzed=4, Unsolved=3, Incorrect=0, Correct=4}
java=ParameterizedType: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=SimpleName: {Checked=49, Analyzed=37, Unsolved=12, Incorrect=4, Correct=33}
java=SimpleType: {Checked=21, Analyzed=20, Unsolved=1, Incorrect=4, Correct=16}
java=SingleVariableDeclaration: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=TypeLiteral: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
java=VariableDeclarationFragment: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
void=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean,InfixExpression,1,1,1,0,0
boolean,MethodInvocation,1,1,1,0,0
boolean,PrimitiveType,1,1,1,0,0
boolean,SimpleName,1,1,1,0,0
com.thoughtworks.xstream.,SimpleName,13,13,13,0,0
com.thoughtworks.xstream.,SimpleType,5,5,5,0,0
com.thoughtworks.xstream.,SingleVariableDeclaration,4,4,4,0,0
int,MethodInvocation,1,1,1,0,0
int,NumberLiteral,1,1,0,1,0
int,PostfixExpression,0,1,0,0,1
int,PrimitiveType,0,1,0,0,1
int,SimpleName,1,5,1,0,4
int,VariableDeclarationExpression,0,1,0,0,1
int,VariableDeclarationFragment,0,1,0,0,1
java,CastExpression,0,1,0,0,1
java,ClassInstanceCreation,0,1,0,0,1
java,MarkerAnnotation,3,3,3,0,0
java,MethodInvocation,4,7,4,0,3
java,ParameterizedType,0,5,0,0,5
java,QualifiedName,0,1,0,0,1
java,SimpleName,37,49,33,4,12
java,SimpleType,20,21,16,4,1
java,SingleVariableDeclaration,2,3,2,0,1
java,TypeLiteral,1,1,0,1,0
java,VariableDeclarationFragment,2,4,2,0,2
void,MethodInvocation,1,1,1,0,0
void,PrimitiveType,1,1,1,0,0
void,SimpleName,1,1,1,0,0
