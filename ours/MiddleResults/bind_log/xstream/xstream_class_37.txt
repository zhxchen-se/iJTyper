echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/xstream_class_37.java
Expect check=218
Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: xstream_class_37
Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: public class FieldDtoConvertor implements Converter {
  public boolean canConvert(  Class clazz){
    return clazz.equals(FieldDto.class);
  }
  public void marshal(  final Object value,  final HierarchicalStreamWriter writer,  final MarshallingContext context){
    final FieldDto fieldDto=(FieldDto)value;
    for (int i=0; i < fieldDto.getSize(); i++) {
      writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
    }
    writer.setValue(fieldDto.getText());
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    FieldDto fieldDto=new FieldDto();
    for (int i=0; i < reader.getAttributeCount(); i++) {
      fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
    }
    fieldDto.setText(reader.getValue());
    return fieldDto;
  }
}

Cannot find matching typeVariable for: FieldDtoConvertor
Cannot find matching typeVariable for: public class FieldDtoConvertor implements Converter {
  public boolean canConvert(  Class clazz){
    return clazz.equals(FieldDto.class);
  }
  public void marshal(  final Object value,  final HierarchicalStreamWriter writer,  final MarshallingContext context){
    final FieldDto fieldDto=(FieldDto)value;
    for (int i=0; i < fieldDto.getSize(); i++) {
      writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
    }
    writer.setValue(fieldDto.getText());
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    FieldDto fieldDto=new FieldDto();
    for (int i=0; i < reader.getAttributeCount(); i++) {
      fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
    }
    fieldDto.setText(reader.getValue());
    return fieldDto;
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type2 got: com.thoughtworks.xstream.converters.Converter
For node: Converter expected fqn: com.thoughtworks.xstream.converters.Converter with type: Type2 got: com.thoughtworks.xstream.converters.Converter
For node: boolean expected fqn: boolean with type: Type9 got: boolean
Cannot find matching typeVariable for: canConvert
Cannot find matching typeVariable for: public boolean canConvert(Class clazz){
  return clazz.equals(FieldDto.class);
}

Cannot find matching typeVariable for: public class FieldDtoConvertor implements Converter {
  public boolean canConvert(  Class clazz){
    return clazz.equals(FieldDto.class);
  }
  public void marshal(  final Object value,  final HierarchicalStreamWriter writer,  final MarshallingContext context){
    final FieldDto fieldDto=(FieldDto)value;
    for (int i=0; i < fieldDto.getSize(); i++) {
      writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
    }
    writer.setValue(fieldDto.getText());
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    FieldDto fieldDto=new FieldDto();
    for (int i=0; i < reader.getAttributeCount(); i++) {
      fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
    }
    fieldDto.setText(reader.getValue());
    return fieldDto;
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: Class clazz
Did not find solution for node: Class clazz with type Type36
Did not find solution for node: Class with type Type36
Did not find solution for node: Class with type Type36
Did not find solution for node: clazz with type Type36
For node: clazz.equals(FieldDto.class) expected fqn: boolean with type: Type38 got: boolean
Did not find solution for node: clazz with type Type36
Cannot find matching typeVariable for: equals
For node: equals expected fqn: boolean with type: Type38 got: boolean
Did not find solution for node: FieldDto.class with type Type37
Did not find solution for node: FieldDto with type Type4
Did not find solution for node: FieldDto with type Type4
For node: void expected fqn: void with type: Type8 got: void
Cannot find matching typeVariable for: marshal
Cannot find matching typeVariable for: public void marshal(final Object value,final HierarchicalStreamWriter writer,final MarshallingContext context){
  final FieldDto fieldDto=(FieldDto)value;
  for (int i=0; i < fieldDto.getSize(); i++) {
    writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
  }
  writer.setValue(fieldDto.getText());
}

Cannot find matching typeVariable for: public class FieldDtoConvertor implements Converter {
  public boolean canConvert(  Class clazz){
    return clazz.equals(FieldDto.class);
  }
  public void marshal(  final Object value,  final HierarchicalStreamWriter writer,  final MarshallingContext context){
    final FieldDto fieldDto=(FieldDto)value;
    for (int i=0; i < fieldDto.getSize(); i++) {
      writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
    }
    writer.setValue(fieldDto.getText());
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    FieldDto fieldDto=new FieldDto();
    for (int i=0; i < reader.getAttributeCount(); i++) {
      fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
    }
    fieldDto.setText(reader.getValue());
    return fieldDto;
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: final Object value
For node: final Object value expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
For node: value expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: final HierarchicalStreamWriter writer
For node: final HierarchicalStreamWriter writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type41 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type41 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: HierarchicalStreamWriter expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type41 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type41 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: final MarshallingContext context
For node: final MarshallingContext context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type42 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type42 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: MarshallingContext expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type42 got: com.thoughtworks.xstream.converters.MarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.MarshallingContext with type: Type42 got: com.thoughtworks.xstream.converters.MarshallingContext
Did not find solution for node: FieldDto with type Type4
Did not find solution for node: FieldDto with type Type4
Cannot find matching typeVariable for: fieldDto=(FieldDto)value
Did not find solution for node: fieldDto=(FieldDto)value with type Type4
Did not find solution for node: fieldDto with type Type4
Did not find solution for node: (FieldDto)value with type Type4
Did not find solution for node: FieldDto with type Type4
Did not find solution for node: FieldDto with type Type4
For node: value expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: int i=0
Did not find solution for node: int i=0 with type Type5
Did not find solution for node: int with type Type5
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type5
Did not find solution for node: i with type Type5
For node: 0 expected fqn: int with type: Type43 got: byte
For node: i < fieldDto.getSize() expected fqn: boolean with type: Type9 got: boolean
Did not find solution for node: i with type Type5
For node: fieldDto.getSize() expected fqn: int with type: Type44 got: int
Did not find solution for node: fieldDto with type Type4
Cannot find matching typeVariable for: getSize
For node: getSize expected fqn: int with type: Type44 got: int
Did not find solution for node: i++ with type Type5
Did not find solution for node: i with type Type5
For node: writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i)) expected fqn: void with type: Type53 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type41 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: addAttribute
For node: addAttribute expected fqn: void with type: Type53 got: void
For node: fieldDto.getAttributeName(i) expected fqn: java.lang.String with type: Type47 got: java.lang.String
Did not find solution for node: fieldDto with type Type4
Cannot find matching typeVariable for: getAttributeName
For node: getAttributeName expected fqn: java.lang.String with type: Type47 got: java.lang.String
Did not find solution for node: i with type Type5
For node: fieldDto.getAttributeValue(i) expected fqn: java.lang.String with type: Type50 got: java.lang.String
Did not find solution for node: fieldDto with type Type4
Cannot find matching typeVariable for: getAttributeValue
For node: getAttributeValue expected fqn: java.lang.String with type: Type50 got: java.lang.String
Did not find solution for node: i with type Type5
For node: writer.setValue(fieldDto.getText()) expected fqn: void with type: Type59 got: void
For node: writer expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamWriter with type: Type41 got: com.thoughtworks.xstream.io.HierarchicalStreamWriter
Cannot find matching typeVariable for: setValue
For node: setValue expected fqn: void with type: Type59 got: void
For node: fieldDto.getText() expected fqn: java.lang.String with type: Type57 got: java.lang.String
Did not find solution for node: fieldDto with type Type4
Cannot find matching typeVariable for: getText
For node: getText expected fqn: java.lang.String with type: Type57 got: java.lang.String
For node: Object expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: unmarshal
Cannot find matching typeVariable for: public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context){
  FieldDto fieldDto=new FieldDto();
  for (int i=0; i < reader.getAttributeCount(); i++) {
    fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
  }
  fieldDto.setText(reader.getValue());
  return fieldDto;
}

Cannot find matching typeVariable for: public class FieldDtoConvertor implements Converter {
  public boolean canConvert(  Class clazz){
    return clazz.equals(FieldDto.class);
  }
  public void marshal(  final Object value,  final HierarchicalStreamWriter writer,  final MarshallingContext context){
    final FieldDto fieldDto=(FieldDto)value;
    for (int i=0; i < fieldDto.getSize(); i++) {
      writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
    }
    writer.setValue(fieldDto.getText());
  }
  public Object unmarshal(  HierarchicalStreamReader reader,  UnmarshallingContext context){
    FieldDto fieldDto=new FieldDto();
    for (int i=0; i < reader.getAttributeCount(); i++) {
      fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
    }
    fieldDto.setText(reader.getValue());
    return fieldDto;
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: HierarchicalStreamReader reader
For node: HierarchicalStreamReader reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type62 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type62 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: HierarchicalStreamReader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type62 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type62 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: UnmarshallingContext context
For node: UnmarshallingContext context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type63 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type63 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: UnmarshallingContext expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type63 got: com.thoughtworks.xstream.converters.UnmarshallingContext
For node: context expected fqn: com.thoughtworks.xstream.converters.UnmarshallingContext with type: Type63 got: com.thoughtworks.xstream.converters.UnmarshallingContext
Did not find solution for node: FieldDto with type Type4
Did not find solution for node: FieldDto with type Type4
Cannot find matching typeVariable for: fieldDto=new FieldDto()
Did not find solution for node: fieldDto=new FieldDto() with type Type4
Did not find solution for node: fieldDto with type Type4
Did not find solution for node: new FieldDto() with type Type4
Did not find solution for node: FieldDto with type Type4
Did not find solution for node: FieldDto with type Type4
Cannot find matching typeVariable for: int i=0
Did not find solution for node: int i=0 with type Type5
Did not find solution for node: int with type Type5
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type5
Did not find solution for node: i with type Type5
For node: 0 expected fqn: int with type: Type43 got: byte
For node: i < reader.getAttributeCount() expected fqn: boolean with type: Type9 got: boolean
Did not find solution for node: i with type Type5
For node: reader.getAttributeCount() expected fqn: int with type: Type65 got: int
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type62 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: getAttributeCount
For node: getAttributeCount expected fqn: int with type: Type65 got: int
Did not find solution for node: i++ with type Type5
Did not find solution for node: i with type Type5
Did not find solution for node: fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i)) with type Type73
Did not find solution for node: fieldDto with type Type4
Cannot find matching typeVariable for: addAttribute
Did not find solution for node: addAttribute with type Type73
Did not find solution for node: reader.getAttributeName(i) with type Type67
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type62 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: getAttributeName
Did not find solution for node: getAttributeName with type Type67
Did not find solution for node: i with type Type5
Did not find solution for node: reader.getAttribute(i) with type Type70
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type62 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: getAttribute
Did not find solution for node: getAttribute with type Type70
Did not find solution for node: i with type Type5
Did not find solution for node: fieldDto.setText(reader.getValue()) with type Type79
Did not find solution for node: fieldDto with type Type4
Cannot find matching typeVariable for: setText
Did not find solution for node: setText with type Type79
Did not find solution for node: reader.getValue() with type Type77
For node: reader expected fqn: com.thoughtworks.xstream.io.HierarchicalStreamReader with type: Type62 got: com.thoughtworks.xstream.io.HierarchicalStreamReader
Cannot find matching typeVariable for: getValue
Did not find solution for node: getValue with type Type77
Did not find solution for node: fieldDto with type Type4
Cannot find matching typeVariable for: public class FieldDto {
  private ArrayList<String> attributeName=null;
  private ArrayList<String> attributeValue=null;
  private String text;
  public FieldDto(){
    attributeName=new ArrayList<String>();
    attributeValue=new ArrayList<String>();
  }
  public String getAttributeName(  int index){
    return attributeName.get(index);
  }
  public void addAttribute(  String attributeName,  String attributeValue){
    this.attributeName.add(attributeName);
    this.attributeValue.add(attributeValue);
  }
  public String getAttributeValue(  int index){
    return attributeValue.get(index);
  }
  public String getText(){
    return text;
  }
  public void setText(  String text){
    this.text=text;
  }
  public int getSize(){
    return attributeName.size();
  }
}

Did not find solution for node: FieldDto with type Type4
For node: ArrayList<String> expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.String> with type: Type82 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.String> with type: Type82 got: java.util.ArrayList
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: attributeName=null
For node: attributeName=null expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: attributeName expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: null expected fqn: null with type: Type84 got: java.util.ArrayList
For node: ArrayList<String> expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.String> with type: Type82 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.String> with type: Type82 got: java.util.ArrayList
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: attributeValue=null
For node: attributeValue=null expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: attributeValue expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: null expected fqn: null with type: Type85 got: java.util.ArrayList
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: text
For node: text expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: text
Cannot find matching typeVariable for: private String text;

Cannot find matching typeVariable for: public class FieldDto {
  private ArrayList<String> attributeName=null;
  private ArrayList<String> attributeValue=null;
  private String text;
  public FieldDto(){
    attributeName=new ArrayList<String>();
    attributeValue=new ArrayList<String>();
  }
  public String getAttributeName(  int index){
    return attributeName.get(index);
  }
  public void addAttribute(  String attributeName,  String attributeValue){
    this.attributeName.add(attributeName);
    this.attributeValue.add(attributeValue);
  }
  public String getAttributeValue(  int index){
    return attributeValue.get(index);
  }
  public String getText(){
    return text;
  }
  public void setText(  String text){
    this.text=text;
  }
  public int getSize(){
    return attributeName.size();
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: FieldDto
Cannot find matching typeVariable for: public FieldDto(){
  attributeName=new ArrayList<String>();
  attributeValue=new ArrayList<String>();
}

Cannot find matching typeVariable for: public class FieldDto {
  private ArrayList<String> attributeName=null;
  private ArrayList<String> attributeValue=null;
  private String text;
  public FieldDto(){
    attributeName=new ArrayList<String>();
    attributeValue=new ArrayList<String>();
  }
  public String getAttributeName(  int index){
    return attributeName.get(index);
  }
  public void addAttribute(  String attributeName,  String attributeValue){
    this.attributeName.add(attributeName);
    this.attributeValue.add(attributeValue);
  }
  public String getAttributeValue(  int index){
    return attributeValue.get(index);
  }
  public String getText(){
    return text;
  }
  public void setText(  String text){
    this.text=text;
  }
  public int getSize(){
    return attributeName.size();
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

For node: attributeName=new ArrayList<String>() expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: attributeName expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: new ArrayList<String>() expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: ArrayList<String> expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.String> with type: Type82 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.String> with type: Type82 got: java.util.ArrayList
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: attributeValue=new ArrayList<String>() expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: attributeValue expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: new ArrayList<String>() expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: ArrayList<String> expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.String> with type: Type82 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.String> with type: Type82 got: java.util.ArrayList
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: getAttributeName
Cannot find matching typeVariable for: public String getAttributeName(int index){
  return attributeName.get(index);
}

Cannot find matching typeVariable for: public class FieldDto {
  private ArrayList<String> attributeName=null;
  private ArrayList<String> attributeValue=null;
  private String text;
  public FieldDto(){
    attributeName=new ArrayList<String>();
    attributeValue=new ArrayList<String>();
  }
  public String getAttributeName(  int index){
    return attributeName.get(index);
  }
  public void addAttribute(  String attributeName,  String attributeValue){
    this.attributeName.add(attributeName);
    this.attributeValue.add(attributeValue);
  }
  public String getAttributeValue(  int index){
    return attributeValue.get(index);
  }
  public String getText(){
    return text;
  }
  public void setText(  String text){
    this.text=text;
  }
  public int getSize(){
    return attributeName.size();
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: int index
Did not find solution for node: int index with type Type5
Did not find solution for node: int with type Type5
Did not find solution for node: index with type Type5
For node: attributeName.get(index) expected fqn: java.lang.String with type: Type89 got: java.lang.String
For node: attributeName expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
Cannot find matching typeVariable for: get
For node: get expected fqn: java.lang.String with type: Type89 got: java.lang.String
Did not find solution for node: index with type Type5
For node: void expected fqn: void with type: Type8 got: void
Cannot find matching typeVariable for: addAttribute
Cannot find matching typeVariable for: public void addAttribute(String attributeName,String attributeValue){
  this.attributeName.add(attributeName);
  this.attributeValue.add(attributeValue);
}

Cannot find matching typeVariable for: public class FieldDto {
  private ArrayList<String> attributeName=null;
  private ArrayList<String> attributeValue=null;
  private String text;
  public FieldDto(){
    attributeName=new ArrayList<String>();
    attributeValue=new ArrayList<String>();
  }
  public String getAttributeName(  int index){
    return attributeName.get(index);
  }
  public void addAttribute(  String attributeName,  String attributeValue){
    this.attributeName.add(attributeName);
    this.attributeValue.add(attributeValue);
  }
  public String getAttributeValue(  int index){
    return attributeValue.get(index);
  }
  public String getText(){
    return text;
  }
  public void setText(  String text){
    this.text=text;
  }
  public int getSize(){
    return attributeName.size();
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: String attributeName
For node: String attributeName expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: attributeName expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: String attributeValue
For node: String attributeValue expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: attributeValue expected fqn: java.lang.String with type: Type6 got: java.lang.String
Did not find solution for node: this.attributeName.add(attributeName) with type Type95
For node: this.attributeName expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
Did not find solution for node: this with type Type4
Cannot find matching typeVariable for: attributeName
For node: attributeName expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type95
For node: attributeName expected fqn: java.lang.String with type: Type6 got: java.lang.String
Did not find solution for node: this.attributeValue.add(attributeValue) with type Type100
For node: this.attributeValue expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
Did not find solution for node: this with type Type4
Cannot find matching typeVariable for: attributeValue
For node: attributeValue expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type100
For node: attributeValue expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: getAttributeValue
Cannot find matching typeVariable for: public String getAttributeValue(int index){
  return attributeValue.get(index);
}

Cannot find matching typeVariable for: public class FieldDto {
  private ArrayList<String> attributeName=null;
  private ArrayList<String> attributeValue=null;
  private String text;
  public FieldDto(){
    attributeName=new ArrayList<String>();
    attributeValue=new ArrayList<String>();
  }
  public String getAttributeName(  int index){
    return attributeName.get(index);
  }
  public void addAttribute(  String attributeName,  String attributeValue){
    this.attributeName.add(attributeName);
    this.attributeValue.add(attributeValue);
  }
  public String getAttributeValue(  int index){
    return attributeValue.get(index);
  }
  public String getText(){
    return text;
  }
  public void setText(  String text){
    this.text=text;
  }
  public int getSize(){
    return attributeName.size();
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: int index
Did not find solution for node: int index with type Type5
Did not find solution for node: int with type Type5
Did not find solution for node: index with type Type5
Did not find solution for node: attributeValue.get(index) with type Type94
For node: attributeValue expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
Cannot find matching typeVariable for: get
Did not find solution for node: get with type Type94
Did not find solution for node: index with type Type5
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: getText
Cannot find matching typeVariable for: public String getText(){
  return text;
}

Cannot find matching typeVariable for: public class FieldDto {
  private ArrayList<String> attributeName=null;
  private ArrayList<String> attributeValue=null;
  private String text;
  public FieldDto(){
    attributeName=new ArrayList<String>();
    attributeValue=new ArrayList<String>();
  }
  public String getAttributeName(  int index){
    return attributeName.get(index);
  }
  public void addAttribute(  String attributeName,  String attributeValue){
    this.attributeName.add(attributeName);
    this.attributeValue.add(attributeValue);
  }
  public String getAttributeValue(  int index){
    return attributeValue.get(index);
  }
  public String getText(){
    return text;
  }
  public void setText(  String text){
    this.text=text;
  }
  public int getSize(){
    return attributeName.size();
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

For node: text expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: void expected fqn: void with type: Type8 got: void
Cannot find matching typeVariable for: setText
Cannot find matching typeVariable for: public void setText(String text){
  this.text=text;
}

Cannot find matching typeVariable for: public class FieldDto {
  private ArrayList<String> attributeName=null;
  private ArrayList<String> attributeValue=null;
  private String text;
  public FieldDto(){
    attributeName=new ArrayList<String>();
    attributeValue=new ArrayList<String>();
  }
  public String getAttributeName(  int index){
    return attributeName.get(index);
  }
  public void addAttribute(  String attributeName,  String attributeValue){
    this.attributeName.add(attributeName);
    this.attributeValue.add(attributeValue);
  }
  public String getAttributeValue(  int index){
    return attributeValue.get(index);
  }
  public String getText(){
    return text;
  }
  public void setText(  String text){
    this.text=text;
  }
  public int getSize(){
    return attributeName.size();
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: String text
For node: String text expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: text expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: this.text=text expected fqn: java.lang.String with type: Type6 got: java.lang.String
For node: this.text expected fqn: java.lang.String with type: Type6 got: java.lang.String
Did not find solution for node: this with type Type4
Cannot find matching typeVariable for: text
For node: text expected fqn: java.lang.String with type: Type6 got: java.lang.String
Cannot find matching typeVariable for: text
For node: text expected fqn: java.lang.String with type: Type6 got: java.lang.String
Did not find solution for node: int with type Type5
Cannot find matching typeVariable for: getSize
Cannot find matching typeVariable for: public int getSize(){
  return attributeName.size();
}

Cannot find matching typeVariable for: public class FieldDto {
  private ArrayList<String> attributeName=null;
  private ArrayList<String> attributeValue=null;
  private String text;
  public FieldDto(){
    attributeName=new ArrayList<String>();
    attributeValue=new ArrayList<String>();
  }
  public String getAttributeName(  int index){
    return attributeName.get(index);
  }
  public void addAttribute(  String attributeName,  String attributeValue){
    this.attributeName.add(attributeName);
    this.attributeValue.add(attributeValue);
  }
  public String getAttributeValue(  int index){
    return attributeValue.get(index);
  }
  public String getText(){
    return text;
  }
  public void setText(  String text){
    this.text=text;
  }
  public int getSize(){
    return attributeName.size();
  }
}

Cannot find matching typeVariable for: public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

Cannot find matching typeVariable for: import java.util.ArrayList;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
public class xstream_class_37 {
public class FieldDtoConvertor implements Converter {
    public boolean canConvert(    Class clazz){
      return clazz.equals(FieldDto.class);
    }
    public void marshal(    final Object value,    final HierarchicalStreamWriter writer,    final MarshallingContext context){
      final FieldDto fieldDto=(FieldDto)value;
      for (int i=0; i < fieldDto.getSize(); i++) {
        writer.addAttribute(fieldDto.getAttributeName(i),fieldDto.getAttributeValue(i));
      }
      writer.setValue(fieldDto.getText());
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      FieldDto fieldDto=new FieldDto();
      for (int i=0; i < reader.getAttributeCount(); i++) {
        fieldDto.addAttribute(reader.getAttributeName(i),reader.getAttribute(i));
      }
      fieldDto.setText(reader.getValue());
      return fieldDto;
    }
  }
public class FieldDto {
    private ArrayList<String> attributeName=null;
    private ArrayList<String> attributeValue=null;
    private String text;
    public FieldDto(){
      attributeName=new ArrayList<String>();
      attributeValue=new ArrayList<String>();
    }
    public String getAttributeName(    int index){
      return attributeName.get(index);
    }
    public void addAttribute(    String attributeName,    String attributeValue){
      this.attributeName.add(attributeName);
      this.attributeValue.add(attributeValue);
    }
    public String getAttributeValue(    int index){
      return attributeValue.get(index);
    }
    public String getText(){
      return text;
    }
    public void setText(    String text){
      this.text=text;
    }
    public int getSize(){
      return attributeName.size();
    }
  }
}

For node: attributeName.size() expected fqn: int with type: Type101 got: int
For node: attributeName expected fqn: java.util.ArrayList<java.lang.String> with type: Type83=Type82<Type6> got: java.util.ArrayList<java.lang.String>
Cannot find matching typeVariable for: size
For node: size expected fqn: int with type: Type101 got: int
{Checked=202, Analyzed=126, Unsolved=76, Incorrect=12, Correct=114}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=15, Analyzed=0, Unsolved=15, Incorrect=0, Correct=0}
=SimpleType: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
=ThisExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=15, Analyzed=15, Unsolved=0, Incorrect=0, Correct=15}
com.thoughtworks.xstream.=SimpleType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
int=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
int=NumberLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
int=PostfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
int=SimpleName: {Checked=17, Analyzed=3, Unsolved=14, Incorrect=0, Correct=3}
int=SingleVariableDeclaration: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=VariableDeclarationExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=Assignment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=FieldAccess: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=8, Analyzed=4, Unsolved=4, Incorrect=0, Correct=4}
java=ParameterizedType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=SimpleName: {Checked=47, Analyzed=40, Unsolved=7, Incorrect=4, Correct=36}
java=SimpleType: {Checked=18, Analyzed=17, Unsolved=1, Incorrect=4, Correct=13}
java=SingleVariableDeclaration: {Checked=5, Analyzed=4, Unsolved=1, Incorrect=0, Correct=4}
java=TypeLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
null=NullLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
void=MethodInvocation: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
Total stats
{Checked=202, Analyzed=126, Unsolved=76, Incorrect=12, Correct=114}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=SimpleName: {Checked=15, Analyzed=0, Unsolved=15, Incorrect=0, Correct=0}
=SimpleType: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
=ThisExpression: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=3, Analyzed=1, Unsolved=2, Incorrect=0, Correct=1}
com.thoughtworks.xstream.=SimpleName: {Checked=15, Analyzed=15, Unsolved=0, Incorrect=0, Correct=15}
com.thoughtworks.xstream.=SimpleType: {Checked=5, Analyzed=5, Unsolved=0, Incorrect=0, Correct=5}
com.thoughtworks.xstream.=SingleVariableDeclaration: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
int=MethodInvocation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
int=NumberLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
int=PostfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
int=SimpleName: {Checked=17, Analyzed=3, Unsolved=14, Incorrect=0, Correct=3}
int=SingleVariableDeclaration: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=VariableDeclarationExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=Assignment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=FieldAccess: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=MethodInvocation: {Checked=8, Analyzed=4, Unsolved=4, Incorrect=0, Correct=4}
java=ParameterizedType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=SimpleName: {Checked=47, Analyzed=40, Unsolved=7, Incorrect=4, Correct=36}
java=SimpleType: {Checked=18, Analyzed=17, Unsolved=1, Incorrect=4, Correct=13}
java=SingleVariableDeclaration: {Checked=5, Analyzed=4, Unsolved=1, Incorrect=0, Correct=4}
java=TypeLiteral: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
null=NullLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=2, Correct=0}
void=MethodInvocation: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
,CastExpression,0,1,0,0,1
,ClassInstanceCreation,0,1,0,0,1
,SimpleName,0,15,0,0,15
,SimpleType,0,5,0,0,5
,ThisExpression,0,3,0,0,3
,VariableDeclarationFragment,0,2,0,0,2
boolean,InfixExpression,2,2,2,0,0
boolean,MethodInvocation,1,3,1,0,2
boolean,PrimitiveType,1,1,1,0,0
boolean,SimpleName,1,3,1,0,2
com.thoughtworks.xstream.,SimpleName,15,15,15,0,0
com.thoughtworks.xstream.,SimpleType,5,5,5,0,0
com.thoughtworks.xstream.,SingleVariableDeclaration,4,4,4,0,0
int,MethodInvocation,3,3,3,0,0
int,NumberLiteral,2,2,0,2,0
int,PostfixExpression,0,2,0,0,2
int,PrimitiveType,0,5,0,0,5
int,SimpleName,3,17,3,0,14
int,SingleVariableDeclaration,0,2,0,0,2
int,VariableDeclarationExpression,0,2,0,0,2
int,VariableDeclarationFragment,0,2,0,0,2
java,Assignment,3,3,3,0,0
java,ClassInstanceCreation,2,2,2,0,0
java,FieldAccess,3,3,3,0,0
java,MethodInvocation,4,8,4,0,4
java,ParameterizedType,4,4,4,0,0
java,SimpleName,40,47,36,4,7
java,SimpleType,17,18,13,4,1
java,SingleVariableDeclaration,4,5,4,0,1
java,TypeLiteral,0,1,0,0,1
java,VariableDeclarationFragment,3,3,3,0,0
null,NullLiteral,2,2,0,2,0
void,MethodInvocation,2,4,2,0,2
void,PrimitiveType,3,3,3,0,0
void,SimpleName,2,4,2,0,2
