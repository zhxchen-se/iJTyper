echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/Class_7.java
Expect check=274
Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: Class_7
Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: public static class Person {
  public String name;
  public int id;
  public Date hireDate;
  public Person(  String iname,  int iid,  Date ihireDate){
    name=iname;
    id=iid;
    hireDate=ihireDate;
  }
  public String toString(){
    return name + " " + id+ " "+ hireDate.toString();
  }
public static class CompId implements Comparator<Person> {
    @Override public int compare(    Person arg0,    Person arg1){
      return arg0.id - arg1.id;
    }
  }
public static class CompDate implements Comparator<Person> {
    private int mod=1;
    public CompDate(    boolean desc){
      if (desc)       mod=-1;
    }
    @Override public int compare(    Person arg0,    Person arg1){
      return mod * arg0.hireDate.compareTo(arg1.hireDate);
    }
  }
}

For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: String expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type10 got: java.lang.String
Cannot find matching typeVariable for: name
For node: name expected fqn: java.lang.String with type: Type10 got: java.lang.String
Cannot find matching typeVariable for: name
Cannot find matching typeVariable for: public String name;

Cannot find matching typeVariable for: public static class Person {
  public String name;
  public int id;
  public Date hireDate;
  public Person(  String iname,  int iid,  Date ihireDate){
    name=iname;
    id=iid;
    hireDate=ihireDate;
  }
  public String toString(){
    return name + " " + id+ " "+ hireDate.toString();
  }
public static class CompId implements Comparator<Person> {
    @Override public int compare(    Person arg0,    Person arg1){
      return arg0.id - arg1.id;
    }
  }
public static class CompDate implements Comparator<Person> {
    private int mod=1;
    public CompDate(    boolean desc){
      if (desc)       mod=-1;
    }
    @Override public int compare(    Person arg0,    Person arg1){
      return mod * arg0.hireDate.compareTo(arg1.hireDate);
    }
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Did not find solution for node: int with type Type9
Cannot find matching typeVariable for: id
Did not find solution for node: id with type Type9
Cannot find matching typeVariable for: id
Cannot find matching typeVariable for: public int id;

Cannot find matching typeVariable for: public static class Person {
  public String name;
  public int id;
  public Date hireDate;
  public Person(  String iname,  int iid,  Date ihireDate){
    name=iname;
    id=iid;
    hireDate=ihireDate;
  }
  public String toString(){
    return name + " " + id+ " "+ hireDate.toString();
  }
public static class CompId implements Comparator<Person> {
    @Override public int compare(    Person arg0,    Person arg1){
      return arg0.id - arg1.id;
    }
  }
public static class CompDate implements Comparator<Person> {
    private int mod=1;
    public CompDate(    boolean desc){
      if (desc)       mod=-1;
    }
    @Override public int compare(    Person arg0,    Person arg1){
      return mod * arg0.hireDate.compareTo(arg1.hireDate);
    }
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Did not find solution for node: Date with type Type55
Did not find solution for node: Date with type Type55
Cannot find matching typeVariable for: hireDate
Did not find solution for node: hireDate with type Type55
Cannot find matching typeVariable for: hireDate
Cannot find matching typeVariable for: public Date hireDate;

Cannot find matching typeVariable for: public static class Person {
  public String name;
  public int id;
  public Date hireDate;
  public Person(  String iname,  int iid,  Date ihireDate){
    name=iname;
    id=iid;
    hireDate=ihireDate;
  }
  public String toString(){
    return name + " " + id+ " "+ hireDate.toString();
  }
public static class CompId implements Comparator<Person> {
    @Override public int compare(    Person arg0,    Person arg1){
      return arg0.id - arg1.id;
    }
  }
public static class CompDate implements Comparator<Person> {
    private int mod=1;
    public CompDate(    boolean desc){
      if (desc)       mod=-1;
    }
    @Override public int compare(    Person arg0,    Person arg1){
      return mod * arg0.hireDate.compareTo(arg1.hireDate);
    }
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: Person
Cannot find matching typeVariable for: public Person(String iname,int iid,Date ihireDate){
  name=iname;
  id=iid;
  hireDate=ihireDate;
}

Cannot find matching typeVariable for: public static class Person {
  public String name;
  public int id;
  public Date hireDate;
  public Person(  String iname,  int iid,  Date ihireDate){
    name=iname;
    id=iid;
    hireDate=ihireDate;
  }
  public String toString(){
    return name + " " + id+ " "+ hireDate.toString();
  }
public static class CompId implements Comparator<Person> {
    @Override public int compare(    Person arg0,    Person arg1){
      return arg0.id - arg1.id;
    }
  }
public static class CompDate implements Comparator<Person> {
    private int mod=1;
    public CompDate(    boolean desc){
      if (desc)       mod=-1;
    }
    @Override public int compare(    Person arg0,    Person arg1){
      return mod * arg0.hireDate.compareTo(arg1.hireDate);
    }
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: String iname
For node: String iname expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: iname expected fqn: java.lang.String with type: Type10 got: java.lang.String
Cannot find matching typeVariable for: int iid
Did not find solution for node: int iid with type Type9
Did not find solution for node: int with type Type9
Did not find solution for node: iid with type Type9
Cannot find matching typeVariable for: Date ihireDate
Did not find solution for node: Date ihireDate with type Type55
Did not find solution for node: Date with type Type55
Did not find solution for node: Date with type Type55
Did not find solution for node: ihireDate with type Type55
For node: name=iname expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: name expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: iname expected fqn: java.lang.String with type: Type10 got: java.lang.String
Did not find solution for node: id=iid with type Type9
Did not find solution for node: id with type Type9
Did not find solution for node: iid with type Type9
Did not find solution for node: hireDate=ihireDate with type Type55
Did not find solution for node: hireDate with type Type55
Did not find solution for node: ihireDate with type Type55
For node: String expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type10 got: java.lang.String
Cannot find matching typeVariable for: toString
Cannot find matching typeVariable for: public String toString(){
  return name + " " + id+ " "+ hireDate.toString();
}

Cannot find matching typeVariable for: public static class Person {
  public String name;
  public int id;
  public Date hireDate;
  public Person(  String iname,  int iid,  Date ihireDate){
    name=iname;
    id=iid;
    hireDate=ihireDate;
  }
  public String toString(){
    return name + " " + id+ " "+ hireDate.toString();
  }
public static class CompId implements Comparator<Person> {
    @Override public int compare(    Person arg0,    Person arg1){
      return arg0.id - arg1.id;
    }
  }
public static class CompDate implements Comparator<Person> {
    private int mod=1;
    public CompDate(    boolean desc){
      if (desc)       mod=-1;
    }
    @Override public int compare(    Person arg0,    Person arg1){
      return mod * arg0.hireDate.compareTo(arg1.hireDate);
    }
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

For node: name + " " + id+ " "+ hireDate.toString() expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: name expected fqn: java.lang.String with type: Type10 got: java.lang.String
For node: " " expected fqn: java.lang.String with type: Type56 got: java.lang.String
Cannot find matching typeVariable for: id
For node: id expected fqn: int with type: Type10 got: java.lang.String
For node: " " expected fqn: java.lang.String with type: Type56 got: java.lang.String
For node: hireDate.toString() expected fqn: java.lang.String with type: Type57 got: java.lang.String
Did not find solution for node: hireDate with type Type55
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type57 got: java.lang.String
Cannot find matching typeVariable for: public static class CompId implements Comparator<Person> {
  @Override public int compare(  Person arg0,  Person arg1){
    return arg0.id - arg1.id;
  }
}

Cannot find matching typeVariable for: CompId
Cannot find matching typeVariable for: public static class CompId implements Comparator<Person> {
  @Override public int compare(  Person arg0,  Person arg1){
    return arg0.id - arg1.id;
  }
}

Cannot find matching typeVariable for: public static class Person {
  public String name;
  public int id;
  public Date hireDate;
  public Person(  String iname,  int iid,  Date ihireDate){
    name=iname;
    id=iid;
    hireDate=ihireDate;
  }
  public String toString(){
    return name + " " + id+ " "+ hireDate.toString();
  }
public static class CompId implements Comparator<Person> {
    @Override public int compare(    Person arg0,    Person arg1){
      return arg0.id - arg1.id;
    }
  }
public static class CompDate implements Comparator<Person> {
    private int mod=1;
    public CompDate(    boolean desc){
      if (desc)       mod=-1;
    }
    @Override public int compare(    Person arg0,    Person arg1){
      return mod * arg0.hireDate.compareTo(arg1.hireDate);
    }
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

For node: Comparator<Person> expected fqn: java.util.Comparator<Class_.Class_7.Person> with type: Type4=Type2<Type3> got: java.util.Comparator<java.lang.Object>
For node: Comparator expected fqn: java.util.Comparator<Class_.Class_7.Person> with type: Type2 got: java.util.Comparator
For node: Comparator expected fqn: java.util.Comparator<Class_.Class_7.Person> with type: Type2 got: java.util.Comparator
For node: Person expected fqn: Class_.Class_7.Person with type: Type3 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type3 got: java.lang.Object
For node: @Override expected fqn: java.lang.Override with type: Type58 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type58 got: java.lang.Override
Did not find solution for node: int with type Type9
Cannot find matching typeVariable for: compare
Cannot find matching typeVariable for: @Override public int compare(Person arg0,Person arg1){
  return arg0.id - arg1.id;
}

Cannot find matching typeVariable for: public static class CompId implements Comparator<Person> {
  @Override public int compare(  Person arg0,  Person arg1){
    return arg0.id - arg1.id;
  }
}

Cannot find matching typeVariable for: public static class Person {
  public String name;
  public int id;
  public Date hireDate;
  public Person(  String iname,  int iid,  Date ihireDate){
    name=iname;
    id=iid;
    hireDate=ihireDate;
  }
  public String toString(){
    return name + " " + id+ " "+ hireDate.toString();
  }
public static class CompId implements Comparator<Person> {
    @Override public int compare(    Person arg0,    Person arg1){
      return arg0.id - arg1.id;
    }
  }
public static class CompDate implements Comparator<Person> {
    private int mod=1;
    public CompDate(    boolean desc){
      if (desc)       mod=-1;
    }
    @Override public int compare(    Person arg0,    Person arg1){
      return mod * arg0.hireDate.compareTo(arg1.hireDate);
    }
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: Person arg0
For node: Person arg0 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: arg0 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: Person arg1
For node: Person arg1 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: arg1 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Did not find solution for node: arg0.id - arg1.id with type Type9
Cannot find matching typeVariable for: arg0.id
Did not find solution for node: arg0.id with type Type9
For node: arg0 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Did not find solution for node: id with type Type9
Cannot find matching typeVariable for: arg1.id
Did not find solution for node: arg1.id with type Type9
For node: arg1 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Did not find solution for node: id with type Type9
Cannot find matching typeVariable for: public static class CompDate implements Comparator<Person> {
  private int mod=1;
  public CompDate(  boolean desc){
    if (desc)     mod=-1;
  }
  @Override public int compare(  Person arg0,  Person arg1){
    return mod * arg0.hireDate.compareTo(arg1.hireDate);
  }
}

Did not find solution for node: CompDate with type Type1
For node: Comparator<Person> expected fqn: java.util.Comparator<Class_.Class_7.Person> with type: Type4=Type2<Type3> got: java.util.Comparator<java.lang.Object>
For node: Comparator expected fqn: java.util.Comparator<Class_.Class_7.Person> with type: Type2 got: java.util.Comparator
For node: Comparator expected fqn: java.util.Comparator<Class_.Class_7.Person> with type: Type2 got: java.util.Comparator
For node: Person expected fqn: Class_.Class_7.Person with type: Type3 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type3 got: java.lang.Object
Did not find solution for node: int with type Type9
Cannot find matching typeVariable for: mod=1
Did not find solution for node: mod=1 with type Type9
Did not find solution for node: mod with type Type9
Did not find solution for node: 1 with type Type59
Cannot find matching typeVariable for: CompDate
Cannot find matching typeVariable for: public CompDate(boolean desc){
  if (desc)   mod=-1;
}

Cannot find matching typeVariable for: public static class CompDate implements Comparator<Person> {
  private int mod=1;
  public CompDate(  boolean desc){
    if (desc)     mod=-1;
  }
  @Override public int compare(  Person arg0,  Person arg1){
    return mod * arg0.hireDate.compareTo(arg1.hireDate);
  }
}

Cannot find matching typeVariable for: public static class Person {
  public String name;
  public int id;
  public Date hireDate;
  public Person(  String iname,  int iid,  Date ihireDate){
    name=iname;
    id=iid;
    hireDate=ihireDate;
  }
  public String toString(){
    return name + " " + id+ " "+ hireDate.toString();
  }
public static class CompId implements Comparator<Person> {
    @Override public int compare(    Person arg0,    Person arg1){
      return arg0.id - arg1.id;
    }
  }
public static class CompDate implements Comparator<Person> {
    private int mod=1;
    public CompDate(    boolean desc){
      if (desc)       mod=-1;
    }
    @Override public int compare(    Person arg0,    Person arg1){
      return mod * arg0.hireDate.compareTo(arg1.hireDate);
    }
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: boolean desc
Did not find solution for node: boolean desc with type Type60
Did not find solution for node: boolean with type Type60
Did not find solution for node: desc with type Type60
Cannot find matching typeVariable for: desc
Cannot find matching typeVariable for: if (desc) mod=-1;

Cannot find matching typeVariable for: {
  if (desc)   mod=-1;
}

Cannot find matching typeVariable for: public CompDate(boolean desc){
  if (desc)   mod=-1;
}

Cannot find matching typeVariable for: public static class CompDate implements Comparator<Person> {
  private int mod=1;
  public CompDate(  boolean desc){
    if (desc)     mod=-1;
  }
  @Override public int compare(  Person arg0,  Person arg1){
    return mod * arg0.hireDate.compareTo(arg1.hireDate);
  }
}

Cannot find matching typeVariable for: public static class Person {
  public String name;
  public int id;
  public Date hireDate;
  public Person(  String iname,  int iid,  Date ihireDate){
    name=iname;
    id=iid;
    hireDate=ihireDate;
  }
  public String toString(){
    return name + " " + id+ " "+ hireDate.toString();
  }
public static class CompId implements Comparator<Person> {
    @Override public int compare(    Person arg0,    Person arg1){
      return arg0.id - arg1.id;
    }
  }
public static class CompDate implements Comparator<Person> {
    private int mod=1;
    public CompDate(    boolean desc){
      if (desc)       mod=-1;
    }
    @Override public int compare(    Person arg0,    Person arg1){
      return mod * arg0.hireDate.compareTo(arg1.hireDate);
    }
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Did not find solution for node: mod=-1 with type Type9
Did not find solution for node: mod with type Type9
Did not find solution for node: -1 with type Type59
Did not find solution for node: 1 with type Type59
For node: @Override expected fqn: java.lang.Override with type: Type58 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type58 got: java.lang.Override
Did not find solution for node: int with type Type9
Cannot find matching typeVariable for: compare
Cannot find matching typeVariable for: @Override public int compare(Person arg0,Person arg1){
  return mod * arg0.hireDate.compareTo(arg1.hireDate);
}

Cannot find matching typeVariable for: public static class CompDate implements Comparator<Person> {
  private int mod=1;
  public CompDate(  boolean desc){
    if (desc)     mod=-1;
  }
  @Override public int compare(  Person arg0,  Person arg1){
    return mod * arg0.hireDate.compareTo(arg1.hireDate);
  }
}

Cannot find matching typeVariable for: public static class Person {
  public String name;
  public int id;
  public Date hireDate;
  public Person(  String iname,  int iid,  Date ihireDate){
    name=iname;
    id=iid;
    hireDate=ihireDate;
  }
  public String toString(){
    return name + " " + id+ " "+ hireDate.toString();
  }
public static class CompId implements Comparator<Person> {
    @Override public int compare(    Person arg0,    Person arg1){
      return arg0.id - arg1.id;
    }
  }
public static class CompDate implements Comparator<Person> {
    private int mod=1;
    public CompDate(    boolean desc){
      if (desc)       mod=-1;
    }
    @Override public int compare(    Person arg0,    Person arg1){
      return mod * arg0.hireDate.compareTo(arg1.hireDate);
    }
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: Person arg0
For node: Person arg0 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: arg0 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: Person arg1
For node: Person arg1 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: arg1 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Did not find solution for node: mod * arg0.hireDate.compareTo(arg1.hireDate) with type Type9
Did not find solution for node: mod with type Type9
Did not find solution for node: arg0.hireDate.compareTo(arg1.hireDate) with type Type62
Cannot find matching typeVariable for: arg0.hireDate
Did not find solution for node: arg0.hireDate with type Type62
For node: arg0 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Did not find solution for node: hireDate with type Type55
Cannot find matching typeVariable for: compareTo
Did not find solution for node: compareTo with type Type62
Cannot find matching typeVariable for: arg1.hireDate
Did not find solution for node: arg1.hireDate with type Type62
For node: arg1 expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Did not find solution for node: hireDate with type Type55
For node: void expected fqn: void with type: Type11 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static void main(String[] args){
  SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
  ArrayList<Person> people;
  people=new ArrayList<Person>();
  try {
    people.add(new Person("Joe",92422,df.parse("12-12-2010")));
    people.add(new Person("Joef",24122,df.parse("1-12-2010")));
    people.add(new Person("Joee",24922,df.parse("12-2-2010")));
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  Collections.sort(people,new Person.CompId());
  System.out.println("BY ID");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(false));
  System.out.println("BY Date asc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(true));
  System.out.println("BY Date desc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: String[] args
For node: String[] args expected fqn: java.lang.String[] with type: Type65 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type65 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type56 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type56 got: java.lang.String
For node: args expected fqn: java.lang.String[] with type: Type65 got: java.lang.String[]
For node: SimpleDateFormat expected fqn: java.text.SimpleDateFormat with type: Type66 got: java.text.SimpleDateFormat
For node: SimpleDateFormat expected fqn: java.text.SimpleDateFormat with type: Type66 got: java.text.SimpleDateFormat
Cannot find matching typeVariable for: df=new SimpleDateFormat("mm-dd-yyyy")
For node: df=new SimpleDateFormat("mm-dd-yyyy") expected fqn: java.text.SimpleDateFormat with type: Type66 got: java.text.SimpleDateFormat
For node: df expected fqn: java.text.SimpleDateFormat with type: Type66 got: java.text.SimpleDateFormat
For node: new SimpleDateFormat("mm-dd-yyyy") expected fqn: java.text.SimpleDateFormat with type: Type66 got: java.text.SimpleDateFormat
For node: SimpleDateFormat expected fqn: java.text.SimpleDateFormat with type: Type66 got: java.text.SimpleDateFormat
For node: SimpleDateFormat expected fqn: java.text.SimpleDateFormat with type: Type66 got: java.text.SimpleDateFormat
For node: "mm-dd-yyyy" expected fqn: java.lang.String with type: Type56 got: java.lang.String
For node: ArrayList<Person> expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
For node: ArrayList expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type69 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type69 got: java.util.ArrayList
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: people
For node: people expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
Cannot find matching typeVariable for: people
Cannot find matching typeVariable for: ArrayList<Person> people;

Cannot find matching typeVariable for: {
  SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
  ArrayList<Person> people;
  people=new ArrayList<Person>();
  try {
    people.add(new Person("Joe",92422,df.parse("12-12-2010")));
    people.add(new Person("Joef",24122,df.parse("1-12-2010")));
    people.add(new Person("Joee",24922,df.parse("12-2-2010")));
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  Collections.sort(people,new Person.CompId());
  System.out.println("BY ID");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(false));
  System.out.println("BY Date asc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(true));
  System.out.println("BY Date desc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
}

Cannot find matching typeVariable for: public static void main(String[] args){
  SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
  ArrayList<Person> people;
  people=new ArrayList<Person>();
  try {
    people.add(new Person("Joe",92422,df.parse("12-12-2010")));
    people.add(new Person("Joef",24122,df.parse("1-12-2010")));
    people.add(new Person("Joee",24922,df.parse("12-2-2010")));
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  Collections.sort(people,new Person.CompId());
  System.out.println("BY ID");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(false));
  System.out.println("BY Date asc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(true));
  System.out.println("BY Date desc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

For node: people=new ArrayList<Person>() expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
For node: people expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
For node: new ArrayList<Person>() expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
For node: ArrayList<Person> expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
For node: ArrayList expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type69 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type69 got: java.util.ArrayList
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Did not find solution for node: people.add(new Person("Joe",92422,df.parse("12-12-2010"))) with type Type81
For node: people expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type81
For node: new Person("Joe",92422,df.parse("12-12-2010")) expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: "Joe" expected fqn: java.lang.String with type: Type56 got: java.lang.String
Did not find solution for node: 92422 with type Type9
Did not find solution for node: df.parse("12-12-2010") with type Type74
For node: df expected fqn: java.text.SimpleDateFormat with type: Type66 got: java.text.SimpleDateFormat
Cannot find matching typeVariable for: parse
Did not find solution for node: parse with type Type74
For node: "12-12-2010" expected fqn: java.lang.String with type: Type56 got: java.lang.String
Did not find solution for node: people.add(new Person("Joef",24122,df.parse("1-12-2010"))) with type Type86
For node: people expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type86
For node: new Person("Joef",24122,df.parse("1-12-2010")) expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: "Joef" expected fqn: java.lang.String with type: Type56 got: java.lang.String
Did not find solution for node: 24122 with type Type87
Did not find solution for node: df.parse("1-12-2010") with type Type76
For node: df expected fqn: java.text.SimpleDateFormat with type: Type66 got: java.text.SimpleDateFormat
Cannot find matching typeVariable for: parse
Did not find solution for node: parse with type Type76
For node: "1-12-2010" expected fqn: java.lang.String with type: Type56 got: java.lang.String
Did not find solution for node: people.add(new Person("Joee",24922,df.parse("12-2-2010"))) with type Type86
For node: people expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type86
For node: new Person("Joee",24922,df.parse("12-2-2010")) expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: "Joee" expected fqn: java.lang.String with type: Type56 got: java.lang.String
Did not find solution for node: 24922 with type Type87
Did not find solution for node: df.parse("12-2-2010") with type Type76
For node: df expected fqn: java.text.SimpleDateFormat with type: Type66 got: java.text.SimpleDateFormat
Cannot find matching typeVariable for: parse
Did not find solution for node: parse with type Type76
For node: "12-2-2010" expected fqn: java.lang.String with type: Type56 got: java.lang.String
Cannot find matching typeVariable for: ParseException e
For node: ParseException e expected fqn: java.text.ParseException with type: Type92 got: java.text.ParseException
For node: ParseException expected fqn: java.text.ParseException with type: Type92 got: java.text.ParseException
For node: ParseException expected fqn: java.text.ParseException with type: Type92 got: java.text.ParseException
For node: e expected fqn: java.text.ParseException with type: Type92 got: java.text.ParseException
For node: e.printStackTrace() expected fqn: void with type: Type93 got: void
For node: e expected fqn: java.text.ParseException with type: Type92 got: java.text.ParseException
Cannot find matching typeVariable for: printStackTrace
For node: printStackTrace expected fqn: void with type: Type93 got: void
For node: Collections.sort(people,new Person.CompId()) expected fqn: void with type: Type98 got: void
For node: Collections expected fqn: java.util.Collections with type: Type97 got: java.util.Collections
Cannot find matching typeVariable for: sort
For node: sort expected fqn: void with type: Type98 got: void
For node: people expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
Did not find solution for node: new Person.CompId() with type Type95
Did not find solution for node: Person.CompId with type Type95
Did not find solution for node: Person.CompId with type Type95
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: CompId
Did not find solution for node: CompId with type Type95
For node: System.out.println("BY ID") expected fqn: void with type: Type104 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type104 got: void
Did not find solution for node: System with type Type102
For node: out expected fqn: java.io.PrintStream with type: Type103 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type104 got: void
For node: "BY ID" expected fqn: java.lang.String with type: Type56 got: java.lang.String
Cannot find matching typeVariable for: Person p
For node: Person p expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: p expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: people
Cannot find matching typeVariable for: for (Person p : people) {
  System.out.println(p.toString());
}

Cannot find matching typeVariable for: {
  SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
  ArrayList<Person> people;
  people=new ArrayList<Person>();
  try {
    people.add(new Person("Joe",92422,df.parse("12-12-2010")));
    people.add(new Person("Joef",24122,df.parse("1-12-2010")));
    people.add(new Person("Joee",24922,df.parse("12-2-2010")));
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  Collections.sort(people,new Person.CompId());
  System.out.println("BY ID");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(false));
  System.out.println("BY Date asc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(true));
  System.out.println("BY Date desc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
}

Cannot find matching typeVariable for: public static void main(String[] args){
  SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
  ArrayList<Person> people;
  people=new ArrayList<Person>();
  try {
    people.add(new Person("Joe",92422,df.parse("12-12-2010")));
    people.add(new Person("Joef",24122,df.parse("1-12-2010")));
    people.add(new Person("Joee",24922,df.parse("12-2-2010")));
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  Collections.sort(people,new Person.CompId());
  System.out.println("BY ID");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(false));
  System.out.println("BY Date asc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(true));
  System.out.println("BY Date desc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

For node: System.out.println(p.toString()) expected fqn: void with type: Type108 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type108 got: void
Did not find solution for node: System with type Type102
For node: out expected fqn: java.io.PrintStream with type: Type103 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type108 got: void
For node: p.toString() expected fqn: java.lang.String with type: Type107 got: java.lang.String
For node: p expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type107 got: java.lang.String
For node: Collections.sort(people,new Person.CompDate(false)) expected fqn: void with type: Type114 got: void
For node: Collections expected fqn: java.util.Collections with type: Type97 got: java.util.Collections
Cannot find matching typeVariable for: sort
For node: sort expected fqn: void with type: Type114 got: void
For node: people expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
Did not find solution for node: new Person.CompDate(false) with type Type111
Did not find solution for node: Person.CompDate with type Type111
Did not find solution for node: Person.CompDate with type Type111
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: CompDate
Did not find solution for node: CompDate with type Type111
Did not find solution for node: false with type Type60
For node: System.out.println("BY Date asc") expected fqn: void with type: Type106 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type106 got: void
Did not find solution for node: System with type Type102
For node: out expected fqn: java.io.PrintStream with type: Type103 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type106 got: void
For node: "BY Date asc" expected fqn: java.lang.String with type: Type56 got: java.lang.String
Cannot find matching typeVariable for: Person p
For node: Person p expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: p expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: people
Cannot find matching typeVariable for: for (Person p : people) {
  System.out.println(p.toString());
}

Cannot find matching typeVariable for: {
  SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
  ArrayList<Person> people;
  people=new ArrayList<Person>();
  try {
    people.add(new Person("Joe",92422,df.parse("12-12-2010")));
    people.add(new Person("Joef",24122,df.parse("1-12-2010")));
    people.add(new Person("Joee",24922,df.parse("12-2-2010")));
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  Collections.sort(people,new Person.CompId());
  System.out.println("BY ID");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(false));
  System.out.println("BY Date asc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(true));
  System.out.println("BY Date desc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
}

Cannot find matching typeVariable for: public static void main(String[] args){
  SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
  ArrayList<Person> people;
  people=new ArrayList<Person>();
  try {
    people.add(new Person("Joe",92422,df.parse("12-12-2010")));
    people.add(new Person("Joef",24122,df.parse("1-12-2010")));
    people.add(new Person("Joee",24922,df.parse("12-2-2010")));
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  Collections.sort(people,new Person.CompId());
  System.out.println("BY ID");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(false));
  System.out.println("BY Date asc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(true));
  System.out.println("BY Date desc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

For node: System.out.println(p.toString()) expected fqn: void with type: Type119 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type119 got: void
Did not find solution for node: System with type Type102
For node: out expected fqn: java.io.PrintStream with type: Type103 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type119 got: void
For node: p.toString() expected fqn: java.lang.String with type: Type118 got: java.lang.String
For node: p expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type118 got: java.lang.String
For node: Collections.sort(people,new Person.CompDate(true)) expected fqn: void with type: Type117 got: void
For node: Collections expected fqn: java.util.Collections with type: Type97 got: java.util.Collections
Cannot find matching typeVariable for: sort
For node: sort expected fqn: void with type: Type117 got: void
For node: people expected fqn: java.util.ArrayList<Class_.Class_7.Person> with type: Type70=Type69<Type7> got: java.util.ArrayList<java.lang.Object>
Did not find solution for node: new Person.CompDate(true) with type Type111
Did not find solution for node: Person.CompDate with type Type111
Did not find solution for node: Person.CompDate with type Type111
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: CompDate
Did not find solution for node: CompDate with type Type111
Did not find solution for node: true with type Type60
For node: System.out.println("BY Date desc") expected fqn: void with type: Type106 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type106 got: void
Did not find solution for node: System with type Type102
For node: out expected fqn: java.io.PrintStream with type: Type103 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type106 got: void
For node: "BY Date desc" expected fqn: java.lang.String with type: Type56 got: java.lang.String
Cannot find matching typeVariable for: Person p
For node: Person p expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: Person expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
For node: p expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: people
Cannot find matching typeVariable for: for (Person p : people) {
  System.out.println(p.toString());
}

Cannot find matching typeVariable for: {
  SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
  ArrayList<Person> people;
  people=new ArrayList<Person>();
  try {
    people.add(new Person("Joe",92422,df.parse("12-12-2010")));
    people.add(new Person("Joef",24122,df.parse("1-12-2010")));
    people.add(new Person("Joee",24922,df.parse("12-2-2010")));
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  Collections.sort(people,new Person.CompId());
  System.out.println("BY ID");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(false));
  System.out.println("BY Date asc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(true));
  System.out.println("BY Date desc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
}

Cannot find matching typeVariable for: public static void main(String[] args){
  SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
  ArrayList<Person> people;
  people=new ArrayList<Person>();
  try {
    people.add(new Person("Joe",92422,df.parse("12-12-2010")));
    people.add(new Person("Joef",24122,df.parse("1-12-2010")));
    people.add(new Person("Joee",24922,df.parse("12-2-2010")));
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  Collections.sort(people,new Person.CompId());
  System.out.println("BY ID");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(false));
  System.out.println("BY Date asc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
  Collections.sort(people,new Person.CompDate(true));
  System.out.println("BY Date desc");
  for (  Person p : people) {
    System.out.println(p.toString());
  }
}

Cannot find matching typeVariable for: public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
public class Class_7 {
public static class Person {
    public String name;
    public int id;
    public Date hireDate;
    public Person(    String iname,    int iid,    Date ihireDate){
      name=iname;
      id=iid;
      hireDate=ihireDate;
    }
    public String toString(){
      return name + " " + id+ " "+ hireDate.toString();
    }
public static class CompId implements Comparator<Person> {
      @Override public int compare(      Person arg0,      Person arg1){
        return arg0.id - arg1.id;
      }
    }
public static class CompDate implements Comparator<Person> {
      private int mod=1;
      public CompDate(      boolean desc){
        if (desc)         mod=-1;
      }
      @Override public int compare(      Person arg0,      Person arg1){
        return mod * arg0.hireDate.compareTo(arg1.hireDate);
      }
    }
  }
  public static void main(  String[] args){
    SimpleDateFormat df=new SimpleDateFormat("mm-dd-yyyy");
    ArrayList<Person> people;
    people=new ArrayList<Person>();
    try {
      people.add(new Person("Joe",92422,df.parse("12-12-2010")));
      people.add(new Person("Joef",24122,df.parse("1-12-2010")));
      people.add(new Person("Joee",24922,df.parse("12-2-2010")));
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
    Collections.sort(people,new Person.CompId());
    System.out.println("BY ID");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(false));
    System.out.println("BY Date asc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
    Collections.sort(people,new Person.CompDate(true));
    System.out.println("BY Date desc");
    for (    Person p : people) {
      System.out.println(p.toString());
    }
  }
}

For node: System.out.println(p.toString()) expected fqn: void with type: Type123 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type123 got: void
Did not find solution for node: System with type Type102
For node: out expected fqn: java.io.PrintStream with type: Type103 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type123 got: void
For node: p.toString() expected fqn: java.lang.String with type: Type122 got: java.lang.String
For node: p expected fqn: Class_.Class_7.Person with type: Type7 got: java.lang.Object
Cannot find matching typeVariable for: toString
For node: toString expected fqn: java.lang.String with type: Type122 got: java.lang.String
{Checked=254, Analyzed=173, Unsolved=81, Incorrect=91, Correct=82}
=ClassInstanceCreation: {Checked=6, Analyzed=3, Unsolved=3, Incorrect=3, Correct=0}
=QualifiedName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=SimpleName: {Checked=36, Analyzed=32, Unsolved=4, Incorrect=32, Correct=0}
=SimpleType: {Checked=17, Analyzed=14, Unsolved=3, Incorrect=14, Correct=0}
=SingleVariableDeclaration: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=7, Correct=0}
boolean=BooleanLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=MethodInvocation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
boolean=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
boolean=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=InfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=SimpleName: {Checked=10, Analyzed=1, Unsolved=9, Incorrect=1, Correct=0}
int=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=1, Correct=1}
java=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MethodInvocation: {Checked=7, Analyzed=4, Unsolved=3, Incorrect=0, Correct=4}
java=ParameterizedType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=4, Correct=0}
java=QualifiedName: {Checked=8, Analyzed=6, Unsolved=2, Incorrect=6, Correct=0}
java=SimpleName: {Checked=61, Analyzed=44, Unsolved=17, Incorrect=17, Correct=27}
java=SimpleType: {Checked=13, Analyzed=11, Unsolved=2, Incorrect=4, Correct=7}
java=SingleVariableDeclaration: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=12, Analyzed=12, Unsolved=0, Incorrect=0, Correct=12}
java=VariableDeclarationFragment: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=1, Correct=2}
void=MethodInvocation: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
Total stats
{Checked=254, Analyzed=173, Unsolved=81, Incorrect=91, Correct=82}
=ClassInstanceCreation: {Checked=6, Analyzed=3, Unsolved=3, Incorrect=3, Correct=0}
=QualifiedName: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
=SimpleName: {Checked=36, Analyzed=32, Unsolved=4, Incorrect=32, Correct=0}
=SimpleType: {Checked=17, Analyzed=14, Unsolved=3, Incorrect=14, Correct=0}
=SingleVariableDeclaration: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=7, Correct=0}
boolean=BooleanLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=MethodInvocation: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
boolean=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=SimpleName: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
boolean=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=InfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=SimpleName: {Checked=10, Analyzed=1, Unsolved=9, Incorrect=1, Correct=0}
int=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=Assignment: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=1, Correct=1}
java=ClassInstanceCreation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=MethodInvocation: {Checked=7, Analyzed=4, Unsolved=3, Incorrect=0, Correct=4}
java=ParameterizedType: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=4, Correct=0}
java=QualifiedName: {Checked=8, Analyzed=6, Unsolved=2, Incorrect=6, Correct=0}
java=SimpleName: {Checked=61, Analyzed=44, Unsolved=17, Incorrect=17, Correct=27}
java=SimpleType: {Checked=13, Analyzed=11, Unsolved=2, Incorrect=4, Correct=7}
java=SingleVariableDeclaration: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=12, Analyzed=12, Unsolved=0, Incorrect=0, Correct=12}
java=VariableDeclarationFragment: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=1, Correct=2}
void=MethodInvocation: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
,ClassInstanceCreation,3,6,0,3,3
,QualifiedName,0,3,0,0,3
,SimpleName,32,36,0,32,4
,SimpleType,14,17,0,14,3
,SingleVariableDeclaration,7,7,0,7,0
boolean,BooleanLiteral,0,2,0,0,2
boolean,MethodInvocation,0,3,0,0,3
boolean,PrimitiveType,0,1,0,0,1
boolean,SimpleName,0,4,0,0,4
boolean,SingleVariableDeclaration,0,1,0,0,1
int,Assignment,0,2,0,0,2
int,InfixExpression,0,2,0,0,2
int,MethodInvocation,0,1,0,0,1
int,NumberLiteral,0,5,0,0,5
int,PrefixExpression,0,1,0,0,1
int,PrimitiveType,0,5,0,0,5
int,QualifiedName,0,2,0,0,2
int,SimpleName,1,10,0,1,9
int,SingleVariableDeclaration,0,1,0,0,1
int,VariableDeclarationFragment,0,2,0,0,2
java,ArrayType,1,1,1,0,0
java,Assignment,2,3,1,1,1
java,ClassInstanceCreation,2,2,1,1,0
java,InfixExpression,1,1,1,0,0
java,MarkerAnnotation,2,2,2,0,0
java,MethodInvocation,4,7,4,0,3
java,ParameterizedType,4,4,0,4,0
java,QualifiedName,6,8,0,6,2
java,SimpleName,44,61,27,17,17
java,SimpleType,11,13,7,4,2
java,SingleVariableDeclaration,3,4,3,0,1
java,StringLiteral,12,12,12,0,0
java,VariableDeclarationFragment,3,4,2,1,1
void,MethodInvocation,10,10,10,0,0
void,PrimitiveType,1,1,1,0,0
void,SimpleName,10,10,10,0,0
