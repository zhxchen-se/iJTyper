echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/Class_15.java
Expect check=182
Cannot find matching typeVariable for: public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: Class_15
Cannot find matching typeVariable for: public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.HashMap;
public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: public class Employee {
  String name;
  String mobile;
  public Employee(  String name,  String mobile){
    this.name=name;
    this.mobile=mobile;
  }
  @Override public int hashCode(){
    System.out.println("calling hascode method of Employee");
    String str=this.name;
    Integer sum=0;
    for (int i=0; i < str.length(); i++) {
      sum=sum + str.charAt(i);
    }
    return sum;
  }
  @Override public boolean equals(  Object obj){
    System.out.println("calling equals method of Employee");
    Employee emp=(Employee)obj;
    if (this.mobile.equalsIgnoreCase(emp.mobile)) {
      System.out.println("returning true");
      return true;
    }
 else {
      System.out.println("returning false");
      return false;
    }
  }
  public void main(  String[] args){
    Employee emp=new Employee("abc","hhh");
    Employee emp2=new Employee("abc","hhh");
    HashMap<Employee,Employee> h=new HashMap<>();
    h.put(emp,emp);
    h.put(emp2,emp2);
    System.out.println("----------------");
    System.out.println("size of hashmap: " + h.size());
  }
}

Did not find solution for node: Employee with type Type2
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: name
For node: name expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: name
Cannot find matching typeVariable for: String name;

Cannot find matching typeVariable for: public class Employee {
  String name;
  String mobile;
  public Employee(  String name,  String mobile){
    this.name=name;
    this.mobile=mobile;
  }
  @Override public int hashCode(){
    System.out.println("calling hascode method of Employee");
    String str=this.name;
    Integer sum=0;
    for (int i=0; i < str.length(); i++) {
      sum=sum + str.charAt(i);
    }
    return sum;
  }
  @Override public boolean equals(  Object obj){
    System.out.println("calling equals method of Employee");
    Employee emp=(Employee)obj;
    if (this.mobile.equalsIgnoreCase(emp.mobile)) {
      System.out.println("returning true");
      return true;
    }
 else {
      System.out.println("returning false");
      return false;
    }
  }
  public void main(  String[] args){
    Employee emp=new Employee("abc","hhh");
    Employee emp2=new Employee("abc","hhh");
    HashMap<Employee,Employee> h=new HashMap<>();
    h.put(emp,emp);
    h.put(emp2,emp2);
    System.out.println("----------------");
    System.out.println("size of hashmap: " + h.size());
  }
}

Cannot find matching typeVariable for: public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.HashMap;
public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: mobile
For node: mobile expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: mobile
Cannot find matching typeVariable for: String mobile;

Cannot find matching typeVariable for: public class Employee {
  String name;
  String mobile;
  public Employee(  String name,  String mobile){
    this.name=name;
    this.mobile=mobile;
  }
  @Override public int hashCode(){
    System.out.println("calling hascode method of Employee");
    String str=this.name;
    Integer sum=0;
    for (int i=0; i < str.length(); i++) {
      sum=sum + str.charAt(i);
    }
    return sum;
  }
  @Override public boolean equals(  Object obj){
    System.out.println("calling equals method of Employee");
    Employee emp=(Employee)obj;
    if (this.mobile.equalsIgnoreCase(emp.mobile)) {
      System.out.println("returning true");
      return true;
    }
 else {
      System.out.println("returning false");
      return false;
    }
  }
  public void main(  String[] args){
    Employee emp=new Employee("abc","hhh");
    Employee emp2=new Employee("abc","hhh");
    HashMap<Employee,Employee> h=new HashMap<>();
    h.put(emp,emp);
    h.put(emp2,emp2);
    System.out.println("----------------");
    System.out.println("size of hashmap: " + h.size());
  }
}

Cannot find matching typeVariable for: public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.HashMap;
public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: Employee
Cannot find matching typeVariable for: public Employee(String name,String mobile){
  this.name=name;
  this.mobile=mobile;
}

Cannot find matching typeVariable for: public class Employee {
  String name;
  String mobile;
  public Employee(  String name,  String mobile){
    this.name=name;
    this.mobile=mobile;
  }
  @Override public int hashCode(){
    System.out.println("calling hascode method of Employee");
    String str=this.name;
    Integer sum=0;
    for (int i=0; i < str.length(); i++) {
      sum=sum + str.charAt(i);
    }
    return sum;
  }
  @Override public boolean equals(  Object obj){
    System.out.println("calling equals method of Employee");
    Employee emp=(Employee)obj;
    if (this.mobile.equalsIgnoreCase(emp.mobile)) {
      System.out.println("returning true");
      return true;
    }
 else {
      System.out.println("returning false");
      return false;
    }
  }
  public void main(  String[] args){
    Employee emp=new Employee("abc","hhh");
    Employee emp2=new Employee("abc","hhh");
    HashMap<Employee,Employee> h=new HashMap<>();
    h.put(emp,emp);
    h.put(emp2,emp2);
    System.out.println("----------------");
    System.out.println("size of hashmap: " + h.size());
  }
}

Cannot find matching typeVariable for: public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.HashMap;
public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: String name
For node: String name expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: name expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: String mobile
For node: String mobile expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: mobile expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: this.name=name expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: this.name expected fqn: java.lang.String with type: Type20 got: java.lang.String
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: name
For node: name expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: name
For node: name expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: this.mobile=mobile expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: this.mobile expected fqn: java.lang.String with type: Type20 got: java.lang.String
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: mobile
For node: mobile expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: mobile
For node: mobile expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: @Override expected fqn: java.lang.Override with type: Type21 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type21 got: java.lang.Override
Did not find solution for node: int with type Type4
Cannot find matching typeVariable for: hashCode
Cannot find matching typeVariable for: @Override public int hashCode(){
  System.out.println("calling hascode method of Employee");
  String str=this.name;
  Integer sum=0;
  for (int i=0; i < str.length(); i++) {
    sum=sum + str.charAt(i);
  }
  return sum;
}

Cannot find matching typeVariable for: public class Employee {
  String name;
  String mobile;
  public Employee(  String name,  String mobile){
    this.name=name;
    this.mobile=mobile;
  }
  @Override public int hashCode(){
    System.out.println("calling hascode method of Employee");
    String str=this.name;
    Integer sum=0;
    for (int i=0; i < str.length(); i++) {
      sum=sum + str.charAt(i);
    }
    return sum;
  }
  @Override public boolean equals(  Object obj){
    System.out.println("calling equals method of Employee");
    Employee emp=(Employee)obj;
    if (this.mobile.equalsIgnoreCase(emp.mobile)) {
      System.out.println("returning true");
      return true;
    }
 else {
      System.out.println("returning false");
      return false;
    }
  }
  public void main(  String[] args){
    Employee emp=new Employee("abc","hhh");
    Employee emp2=new Employee("abc","hhh");
    HashMap<Employee,Employee> h=new HashMap<>();
    h.put(emp,emp);
    h.put(emp2,emp2);
    System.out.println("----------------");
    System.out.println("size of hashmap: " + h.size());
  }
}

Cannot find matching typeVariable for: public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.HashMap;
public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

For node: System.out.println("calling hascode method of Employee") expected fqn: void with type: Type25 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type25 got: void
Did not find solution for node: System with type Type23
For node: out expected fqn: java.io.PrintStream with type: Type24 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type25 got: void
For node: "calling hascode method of Employee" expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type22 got: java.lang.String
Cannot find matching typeVariable for: str=this.name
For node: str=this.name expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: str expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: this.name expected fqn: java.lang.String with type: Type20 got: java.lang.String
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: name
For node: name expected fqn: java.lang.String with type: Type20 got: java.lang.String
Did not find solution for node: Integer with type Type28
Did not find solution for node: Integer with type Type28
Cannot find matching typeVariable for: sum=0
Did not find solution for node: sum=0 with type Type28
Did not find solution for node: sum with type Type28
Did not find solution for node: 0 with type Type29
Cannot find matching typeVariable for: int i=0
Did not find solution for node: int i=0 with type Type4
Did not find solution for node: int with type Type4
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type4
Did not find solution for node: i with type Type4
Did not find solution for node: 0 with type Type29
For node: i < str.length() expected fqn: boolean with type: Type5 got: boolean
Did not find solution for node: i with type Type4
Did not find solution for node: str.length() with type Type30
For node: str expected fqn: java.lang.String with type: Type22 got: java.lang.String
Cannot find matching typeVariable for: length
Did not find solution for node: length with type Type30
Did not find solution for node: i++ with type Type4
Did not find solution for node: i with type Type4
Did not find solution for node: sum=sum + str.charAt(i) with type Type28
Did not find solution for node: sum with type Type28
Did not find solution for node: sum + str.charAt(i) with type Type28
Did not find solution for node: sum with type Type28
Did not find solution for node: str.charAt(i) with type Type33
For node: str expected fqn: java.lang.String with type: Type22 got: java.lang.String
Cannot find matching typeVariable for: charAt
Did not find solution for node: charAt with type Type33
Did not find solution for node: i with type Type4
Did not find solution for node: sum with type Type28
For node: @Override expected fqn: java.lang.Override with type: Type21 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type21 got: java.lang.Override
For node: boolean expected fqn: boolean with type: Type5 got: boolean
Cannot find matching typeVariable for: equals
Cannot find matching typeVariable for: @Override public boolean equals(Object obj){
  System.out.println("calling equals method of Employee");
  Employee emp=(Employee)obj;
  if (this.mobile.equalsIgnoreCase(emp.mobile)) {
    System.out.println("returning true");
    return true;
  }
 else {
    System.out.println("returning false");
    return false;
  }
}

Cannot find matching typeVariable for: public class Employee {
  String name;
  String mobile;
  public Employee(  String name,  String mobile){
    this.name=name;
    this.mobile=mobile;
  }
  @Override public int hashCode(){
    System.out.println("calling hascode method of Employee");
    String str=this.name;
    Integer sum=0;
    for (int i=0; i < str.length(); i++) {
      sum=sum + str.charAt(i);
    }
    return sum;
  }
  @Override public boolean equals(  Object obj){
    System.out.println("calling equals method of Employee");
    Employee emp=(Employee)obj;
    if (this.mobile.equalsIgnoreCase(emp.mobile)) {
      System.out.println("returning true");
      return true;
    }
 else {
      System.out.println("returning false");
      return false;
    }
  }
  public void main(  String[] args){
    Employee emp=new Employee("abc","hhh");
    Employee emp2=new Employee("abc","hhh");
    HashMap<Employee,Employee> h=new HashMap<>();
    h.put(emp,emp);
    h.put(emp2,emp2);
    System.out.println("----------------");
    System.out.println("size of hashmap: " + h.size());
  }
}

Cannot find matching typeVariable for: public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.HashMap;
public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: Object obj
For node: Object obj expected fqn: java.lang.Object with type: Type36 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type36 got: java.lang.Object
For node: Object expected fqn: java.lang.Object with type: Type36 got: java.lang.Object
For node: obj expected fqn: java.lang.Object with type: Type36 got: java.lang.Object
For node: System.out.println("calling equals method of Employee") expected fqn: void with type: Type39 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type39 got: void
Did not find solution for node: System with type Type37
For node: out expected fqn: java.io.PrintStream with type: Type38 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type39 got: void
For node: "calling equals method of Employee" expected fqn: java.lang.String with type: Type22 got: java.lang.String
Did not find solution for node: Employee with type Type2
Did not find solution for node: Employee with type Type2
Cannot find matching typeVariable for: emp=(Employee)obj
Did not find solution for node: emp=(Employee)obj with type Type2
Did not find solution for node: emp with type Type2
Did not find solution for node: (Employee)obj with type Type2
Did not find solution for node: Employee with type Type2
Did not find solution for node: Employee with type Type2
For node: obj expected fqn: java.lang.Object with type: Type36 got: java.lang.Object
For node: this.mobile.equalsIgnoreCase(emp.mobile) expected fqn: boolean with type: Type42 got: boolean
For node: this.mobile expected fqn: java.lang.String with type: Type20 got: java.lang.String
Did not find solution for node: this with type Type2
Cannot find matching typeVariable for: mobile
For node: mobile expected fqn: java.lang.String with type: Type20 got: java.lang.String
Cannot find matching typeVariable for: equalsIgnoreCase
For node: equalsIgnoreCase expected fqn: boolean with type: Type42 got: boolean
Cannot find matching typeVariable for: emp.mobile
For node: emp.mobile expected fqn: java.lang.String with type: Type42 got: boolean
Did not find solution for node: emp with type Type2
For node: mobile expected fqn: java.lang.String with type: Type20 got: java.lang.String
For node: System.out.println("returning true") expected fqn: void with type: Type41 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type41 got: void
Did not find solution for node: System with type Type37
For node: out expected fqn: java.io.PrintStream with type: Type38 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type41 got: void
For node: "returning true" expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: true expected fqn: boolean with type: Type5 got: boolean
For node: System.out.println("returning false") expected fqn: void with type: Type41 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type41 got: void
Did not find solution for node: System with type Type37
For node: out expected fqn: java.io.PrintStream with type: Type38 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type41 got: void
For node: "returning false" expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: false expected fqn: boolean with type: Type5 got: boolean
For node: void expected fqn: void with type: Type6 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public void main(String[] args){
  Employee emp=new Employee("abc","hhh");
  Employee emp2=new Employee("abc","hhh");
  HashMap<Employee,Employee> h=new HashMap<>();
  h.put(emp,emp);
  h.put(emp2,emp2);
  System.out.println("----------------");
  System.out.println("size of hashmap: " + h.size());
}

Cannot find matching typeVariable for: public class Employee {
  String name;
  String mobile;
  public Employee(  String name,  String mobile){
    this.name=name;
    this.mobile=mobile;
  }
  @Override public int hashCode(){
    System.out.println("calling hascode method of Employee");
    String str=this.name;
    Integer sum=0;
    for (int i=0; i < str.length(); i++) {
      sum=sum + str.charAt(i);
    }
    return sum;
  }
  @Override public boolean equals(  Object obj){
    System.out.println("calling equals method of Employee");
    Employee emp=(Employee)obj;
    if (this.mobile.equalsIgnoreCase(emp.mobile)) {
      System.out.println("returning true");
      return true;
    }
 else {
      System.out.println("returning false");
      return false;
    }
  }
  public void main(  String[] args){
    Employee emp=new Employee("abc","hhh");
    Employee emp2=new Employee("abc","hhh");
    HashMap<Employee,Employee> h=new HashMap<>();
    h.put(emp,emp);
    h.put(emp2,emp2);
    System.out.println("----------------");
    System.out.println("size of hashmap: " + h.size());
  }
}

Cannot find matching typeVariable for: public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.HashMap;
public class Class_15 {
public class Employee {
    String name;
    String mobile;
    public Employee(    String name,    String mobile){
      this.name=name;
      this.mobile=mobile;
    }
    @Override public int hashCode(){
      System.out.println("calling hascode method of Employee");
      String str=this.name;
      Integer sum=0;
      for (int i=0; i < str.length(); i++) {
        sum=sum + str.charAt(i);
      }
      return sum;
    }
    @Override public boolean equals(    Object obj){
      System.out.println("calling equals method of Employee");
      Employee emp=(Employee)obj;
      if (this.mobile.equalsIgnoreCase(emp.mobile)) {
        System.out.println("returning true");
        return true;
      }
 else {
        System.out.println("returning false");
        return false;
      }
    }
    public void main(    String[] args){
      Employee emp=new Employee("abc","hhh");
      Employee emp2=new Employee("abc","hhh");
      HashMap<Employee,Employee> h=new HashMap<>();
      h.put(emp,emp);
      h.put(emp2,emp2);
      System.out.println("----------------");
      System.out.println("size of hashmap: " + h.size());
    }
  }
}

Cannot find matching typeVariable for: String[] args
Did not find solution for node: String[] args with type Type45
Did not find solution for node: String[] with type Type45
For node: String expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type22 got: java.lang.String
Did not find solution for node: args with type Type45
Did not find solution for node: Employee with type Type2
Did not find solution for node: Employee with type Type2
Cannot find matching typeVariable for: emp=new Employee("abc","hhh")
Did not find solution for node: emp=new Employee("abc","hhh") with type Type2
Did not find solution for node: emp with type Type2
Did not find solution for node: new Employee("abc","hhh") with type Type2
Did not find solution for node: Employee with type Type2
Did not find solution for node: Employee with type Type2
For node: "abc" expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: "hhh" expected fqn: java.lang.String with type: Type22 got: java.lang.String
Did not find solution for node: Employee with type Type2
Did not find solution for node: Employee with type Type2
Cannot find matching typeVariable for: emp2=new Employee("abc","hhh")
Did not find solution for node: emp2=new Employee("abc","hhh") with type Type2
Did not find solution for node: emp2 with type Type2
Did not find solution for node: new Employee("abc","hhh") with type Type2
Did not find solution for node: Employee with type Type2
Did not find solution for node: Employee with type Type2
For node: "abc" expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: "hhh" expected fqn: java.lang.String with type: Type22 got: java.lang.String
Did not find solution for node: HashMap<Employee,Employee> with type Type50=Type49<Type2,Type2>
For node: HashMap expected fqn: java.util.HashMap<Class_.Class_15.Employee,Class_.Class_15.Employee> with type: Type49 got: java.util.HashMap
For node: HashMap expected fqn: java.util.HashMap<Class_.Class_15.Employee,Class_.Class_15.Employee> with type: Type49 got: java.util.HashMap
Did not find solution for node: Employee with type Type2
Did not find solution for node: Employee with type Type2
Did not find solution for node: Employee with type Type2
Did not find solution for node: Employee with type Type2
Cannot find matching typeVariable for: h=new HashMap<>()
Did not find solution for node: h=new HashMap<>() with type Type50=Type49<Type2,Type2>
Did not find solution for node: h with type Type50=Type49<Type2,Type2>
Did not find solution for node: new HashMap<>() with type Type51=Type49<>
Did not find solution for node: HashMap<> with type Type51=Type49<>
For node: HashMap expected fqn: java.util.HashMap<Class_.Class_15.Employee,Class_.Class_15.Employee> with type: Type49 got: java.util.HashMap
For node: HashMap expected fqn: java.util.HashMap<Class_.Class_15.Employee,Class_.Class_15.Employee> with type: Type49 got: java.util.HashMap
Did not find solution for node: h.put(emp,emp) with type Type55
Did not find solution for node: h with type Type50=Type49<Type2,Type2>
Cannot find matching typeVariable for: put
Did not find solution for node: put with type Type55
Did not find solution for node: emp with type Type2
Did not find solution for node: emp with type Type2
Did not find solution for node: h.put(emp2,emp2) with type Type62
Did not find solution for node: h with type Type50=Type49<Type2,Type2>
Cannot find matching typeVariable for: put
Did not find solution for node: put with type Type62
Did not find solution for node: emp2 with type Type2
Did not find solution for node: emp2 with type Type2
For node: System.out.println("----------------") expected fqn: void with type: Type65 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type65 got: void
Did not find solution for node: System with type Type63
For node: out expected fqn: java.io.PrintStream with type: Type64 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type65 got: void
For node: "----------------" expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: System.out.println("size of hashmap: " + h.size()) expected fqn: void with type: Type67 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type67 got: void
Did not find solution for node: System with type Type63
For node: out expected fqn: java.io.PrintStream with type: Type64 got: java.io.PrintWriter
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type67 got: void
For node: "size of hashmap: " + h.size() expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: "size of hashmap: " expected fqn: java.lang.String with type: Type22 got: java.lang.String
For node: h.size() expected fqn: int with type: Type68 got: java.lang.String
Did not find solution for node: h with type Type50=Type49<Type2,Type2>
Cannot find matching typeVariable for: size
For node: size expected fqn: int with type: Type68 got: java.lang.String
{Checked=173, Analyzed=93, Unsolved=80, Incorrect=19, Correct=74}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=SimpleName: {Checked=19, Analyzed=0, Unsolved=19, Incorrect=0, Correct=0}
=SimpleType: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
=ThisExpression: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
char=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
char=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=InfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
int=NumberLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PostfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=SimpleName: {Checked=6, Analyzed=1, Unsolved=5, Incorrect=1, Correct=0}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=FieldAccess: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=ParameterizedType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=7, Correct=0}
java=SimpleName: {Checked=47, Analyzed=31, Unsolved=16, Incorrect=8, Correct=23}
java=SimpleType: {Checked=10, Analyzed=9, Unsolved=1, Incorrect=2, Correct=7}
java=SingleVariableDeclaration: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
java=VariableDeclarationFragment: {Checked=5, Analyzed=3, Unsolved=2, Incorrect=0, Correct=3}
void=MethodInvocation: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
Total stats
{Checked=173, Analyzed=93, Unsolved=80, Incorrect=19, Correct=74}
=CastExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=ClassInstanceCreation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
=SimpleName: {Checked=19, Analyzed=0, Unsolved=19, Incorrect=0, Correct=0}
=SimpleType: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
=ThisExpression: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
char=MethodInvocation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
char=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=InfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
int=NumberLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PostfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=SimpleName: {Checked=6, Analyzed=1, Unsolved=5, Incorrect=1, Correct=0}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=FieldAccess: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MarkerAnnotation: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
java=ParameterizedType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=7, Correct=0}
java=SimpleName: {Checked=47, Analyzed=31, Unsolved=16, Incorrect=8, Correct=23}
java=SimpleType: {Checked=10, Analyzed=9, Unsolved=1, Incorrect=2, Correct=7}
java=SingleVariableDeclaration: {Checked=4, Analyzed=3, Unsolved=1, Incorrect=0, Correct=3}
java=StringLiteral: {Checked=10, Analyzed=10, Unsolved=0, Incorrect=0, Correct=10}
java=VariableDeclarationFragment: {Checked=5, Analyzed=3, Unsolved=2, Incorrect=0, Correct=3}
void=MethodInvocation: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
,CastExpression,0,1,0,0,1
,ClassInstanceCreation,0,2,0,0,2
,MethodInvocation,0,2,0,0,2
,SimpleName,0,19,0,0,19
,SimpleType,0,8,0,0,8
,ThisExpression,0,4,0,0,4
,VariableDeclarationFragment,0,3,0,0,3
boolean,BooleanLiteral,2,2,2,0,0
boolean,InfixExpression,1,1,1,0,0
boolean,MethodInvocation,1,1,1,0,0
boolean,PrimitiveType,1,1,1,0,0
boolean,SimpleName,1,1,1,0,0
char,MethodInvocation,0,1,0,0,1
char,SimpleName,0,1,0,0,1
int,InfixExpression,0,1,0,0,1
int,MethodInvocation,1,2,0,1,1
int,NumberLiteral,0,2,0,0,2
int,PostfixExpression,0,1,0,0,1
int,PrimitiveType,0,2,0,0,2
int,SimpleName,1,6,0,1,5
int,VariableDeclarationExpression,0,1,0,0,1
int,VariableDeclarationFragment,0,1,0,0,1
java,ArrayType,0,1,0,0,1
java,Assignment,2,3,2,0,1
java,ClassInstanceCreation,0,1,0,0,1
java,FieldAccess,4,4,4,0,0
java,InfixExpression,1,1,1,0,0
java,MarkerAnnotation,2,2,2,0,0
java,ParameterizedType,0,2,0,0,2
java,QualifiedName,7,7,0,7,0
java,SimpleName,31,47,23,8,16
java,SimpleType,9,10,7,2,1
java,SingleVariableDeclaration,3,4,3,0,1
java,StringLiteral,10,10,10,0,0
java,VariableDeclarationFragment,3,5,3,0,2
void,MethodInvocation,6,6,6,0,0
void,PrimitiveType,1,1,1,0,0
void,SimpleName,6,6,6,0,0
