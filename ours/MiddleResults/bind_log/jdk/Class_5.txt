echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/Class_5.java
Expect check=289
Cannot find matching typeVariable for: public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: Class_5
Cannot find matching typeVariable for: public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Map;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Comparator;
public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: K
Cannot find matching typeVariable for: K
Cannot find matching typeVariable for: public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(Map<K,V> map){
  List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
  Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
    public int compare(    Map.Entry<K,V> o1,    Map.Entry<K,V> o2){
      return (o1.getValue()).compareTo(o2.getValue());
    }
  }
);
  Map<K,V> result=new LinkedHashMap<K,V>();
  for (  Map.Entry<K,V> entry : list) {
    result.put(entry.getKey(),entry.getValue());
  }
  return result;
}

Cannot find matching typeVariable for: public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Map;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Comparator;
public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: V extends Comparable<? super V>
Cannot find matching typeVariable for: V
Cannot find matching typeVariable for: V extends Comparable<? super V>
Cannot find matching typeVariable for: public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(Map<K,V> map){
  List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
  Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
    public int compare(    Map.Entry<K,V> o1,    Map.Entry<K,V> o2){
      return (o1.getValue()).compareTo(o2.getValue());
    }
  }
);
  Map<K,V> result=new LinkedHashMap<K,V>();
  for (  Map.Entry<K,V> entry : list) {
    result.put(entry.getKey(),entry.getValue());
  }
  return result;
}

Cannot find matching typeVariable for: public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Map;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Comparator;
public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Did not find solution for node: Comparable<? super V> with type Type33=Type31<Type32>
For node: Comparable expected fqn: java.lang.Comparable<? super V> with type: Type31 got: java.lang.Comparable
For node: Comparable expected fqn: java.lang.Comparable<? super V> with type: Type31 got: java.lang.Comparable
For node: ? super V expected fqn: ? super V with type: Type32 got: java.lang.Object
Did not find solution for node: V with type Type11
Did not find solution for node: V with type Type11
Did not find solution for node: Map<K,V> with type Type12=Type9<Type10,Type11>
Did not find solution for node: Map with type Type9
Did not find solution for node: Map with type Type9
Did not find solution for node: K with type Type10
Did not find solution for node: K with type Type10
Did not find solution for node: V with type Type11
Did not find solution for node: V with type Type11
Cannot find matching typeVariable for: sortByValue
Cannot find matching typeVariable for: public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(Map<K,V> map){
  List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
  Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
    public int compare(    Map.Entry<K,V> o1,    Map.Entry<K,V> o2){
      return (o1.getValue()).compareTo(o2.getValue());
    }
  }
);
  Map<K,V> result=new LinkedHashMap<K,V>();
  for (  Map.Entry<K,V> entry : list) {
    result.put(entry.getKey(),entry.getValue());
  }
  return result;
}

Cannot find matching typeVariable for: public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Map;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Comparator;
public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: Map<K,V> map
Did not find solution for node: Map<K,V> map with type Type12=Type9<Type10,Type11>
Did not find solution for node: Map<K,V> with type Type12=Type9<Type10,Type11>
Did not find solution for node: Map with type Type9
Did not find solution for node: Map with type Type9
Did not find solution for node: K with type Type10
Did not find solution for node: K with type Type10
Did not find solution for node: V with type Type11
Did not find solution for node: V with type Type11
Did not find solution for node: map with type Type12=Type9<Type10,Type11>
Did not find solution for node: List<Map.Entry<K,V>> with type Type37=Type34<Type36=Type35<Type10,Type11>>
For node: List expected fqn: java.util.List<java.util.Map.Entry<K,V>> with type: Type34 got: java.util.List
For node: List expected fqn: java.util.List<java.util.Map.Entry<K,V>> with type: Type34 got: java.util.List
For node: Map.Entry<K,V> expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: Map with type Type9
Cannot find matching typeVariable for: Entry
For node: Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: K with type Type10
Did not find solution for node: K with type Type10
Did not find solution for node: V with type Type11
Did not find solution for node: V with type Type11
Cannot find matching typeVariable for: list=new LinkedList<Map.Entry<K,V>>(map.entrySet())
Did not find solution for node: list=new LinkedList<Map.Entry<K,V>>(map.entrySet()) with type Type37=Type34<Type36=Type35<Type10,Type11>>
Did not find solution for node: list with type Type37=Type34<Type36=Type35<Type10,Type11>>
Did not find solution for node: new LinkedList<Map.Entry<K,V>>(map.entrySet()) with type Type39=Type38<Type36=Type35<Type10,Type11>>
Did not find solution for node: LinkedList<Map.Entry<K,V>> with type Type39=Type38<Type36=Type35<Type10,Type11>>
Did not find solution for node: LinkedList with type Type38
Did not find solution for node: LinkedList with type Type38
For node: Map.Entry<K,V> expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: Map with type Type9
Cannot find matching typeVariable for: Entry
For node: Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: K with type Type10
Did not find solution for node: K with type Type10
Did not find solution for node: V with type Type11
Did not find solution for node: V with type Type11
Did not find solution for node: map.entrySet() with type Type40
Did not find solution for node: map with type Type12=Type9<Type10,Type11>
Cannot find matching typeVariable for: entrySet
Did not find solution for node: entrySet with type Type40
For node: Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
  public int compare(  Map.Entry<K,V> o1,  Map.Entry<K,V> o2){
    return (o1.getValue()).compareTo(o2.getValue());
  }
}
) expected fqn: void with type: Type61 got: void
For node: Collections expected fqn: java.util.Collections with type: Type60 got: java.util.Collections
Cannot find matching typeVariable for: sort
For node: sort expected fqn: void with type: Type61 got: void
Did not find solution for node: list with type Type37=Type34<Type36=Type35<Type10,Type11>>
For node: new Comparator<Map.Entry<K,V>>(){
  public int compare(  Map.Entry<K,V> o1,  Map.Entry<K,V> o2){
    return (o1.getValue()).compareTo(o2.getValue());
  }
}
 expected fqn:  with type: Type49=Type2<Type36=Type35<Type10,Type11>> got: java.util.Comparator<java.lang.Object>
For node: Comparator<Map.Entry<K,V>> expected fqn: java.util.Comparator<java.util.Map.Entry<K,V>> with type: Type49=Type2<Type36=Type35<Type10,Type11>> got: java.util.Comparator<java.lang.Object>
For node: Comparator expected fqn: java.util.Comparator<java.util.Map.Entry<K,V>> with type: Type2 got: java.util.Comparator
For node: Comparator expected fqn: java.util.Comparator<java.util.Map.Entry<K,V>> with type: Type2 got: java.util.Comparator
For node: Map.Entry<K,V> expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: Map with type Type9
Cannot find matching typeVariable for: Entry
For node: Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: K with type Type10
Did not find solution for node: K with type Type10
Did not find solution for node: V with type Type11
Did not find solution for node: V with type Type11
Cannot find matching typeVariable for: {
  public int compare(  Map.Entry<K,V> o1,  Map.Entry<K,V> o2){
    return (o1.getValue()).compareTo(o2.getValue());
  }
}

For node: int expected fqn: int with type: Type7 got: int
Cannot find matching typeVariable for: compare
Cannot find matching typeVariable for: public int compare(Map.Entry<K,V> o1,Map.Entry<K,V> o2){
  return (o1.getValue()).compareTo(o2.getValue());
}

Cannot find matching typeVariable for: {
  public int compare(  Map.Entry<K,V> o1,  Map.Entry<K,V> o2){
    return (o1.getValue()).compareTo(o2.getValue());
  }
}

For node: compare expected fqn: int with type: Type49=Type2<Type36=Type35<Type10,Type11>> got: java.util.Comparator<java.lang.Object>
Cannot find matching typeVariable for: Map.Entry<K,V> o1
For node: Map.Entry<K,V> o1 expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
For node: Map.Entry<K,V> expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: Map with type Type9
Cannot find matching typeVariable for: Entry
For node: Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: K with type Type10
Did not find solution for node: K with type Type10
Did not find solution for node: V with type Type11
Did not find solution for node: V with type Type11
For node: o1 expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
Cannot find matching typeVariable for: Map.Entry<K,V> o2
For node: Map.Entry<K,V> o2 expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
For node: Map.Entry<K,V> expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: Map with type Type9
Cannot find matching typeVariable for: Entry
For node: Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: K with type Type10
Did not find solution for node: K with type Type10
Did not find solution for node: V with type Type11
Did not find solution for node: V with type Type11
For node: o2 expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
For node: (o1.getValue()).compareTo(o2.getValue()) expected fqn: int with type: Type54 got: int
For node: (o1.getValue()) expected fqn: V with type: Type50 got: com.google.gwt.dev.protobuf.SmallSortedMap$Entry
For node: o1.getValue() expected fqn: V with type: Type50 got: com.google.gwt.dev.protobuf.SmallSortedMap$Entry
For node: o1 expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
Cannot find matching typeVariable for: getValue
For node: getValue expected fqn: V with type: Type50 got: com.google.gwt.dev.protobuf.SmallSortedMap$Entry
Cannot find matching typeVariable for: compareTo
For node: compareTo expected fqn: int with type: Type54 got: int
Did not find solution for node: o2.getValue() with type Type53
For node: o2 expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
Cannot find matching typeVariable for: getValue
Did not find solution for node: getValue with type Type53
Did not find solution for node: Map<K,V> with type Type12=Type9<Type10,Type11>
Did not find solution for node: Map with type Type9
Did not find solution for node: Map with type Type9
Did not find solution for node: K with type Type10
Did not find solution for node: K with type Type10
Did not find solution for node: V with type Type11
Did not find solution for node: V with type Type11
Cannot find matching typeVariable for: result=new LinkedHashMap<K,V>()
Did not find solution for node: result=new LinkedHashMap<K,V>() with type Type12=Type9<Type10,Type11>
Did not find solution for node: result with type Type12=Type9<Type10,Type11>
Did not find solution for node: new LinkedHashMap<K,V>() with type Type66=Type65<Type10,Type11>
Did not find solution for node: LinkedHashMap<K,V> with type Type66=Type65<Type10,Type11>
For node: LinkedHashMap expected fqn: java.util.LinkedHashMap<K,V> with type: Type65 got: java.util.LinkedHashMap
For node: LinkedHashMap expected fqn: java.util.LinkedHashMap<K,V> with type: Type65 got: java.util.LinkedHashMap
Did not find solution for node: K with type Type10
Did not find solution for node: K with type Type10
Did not find solution for node: V with type Type11
Did not find solution for node: V with type Type11
Cannot find matching typeVariable for: Map.Entry<K,V> entry
For node: Map.Entry<K,V> entry expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
For node: Map.Entry<K,V> expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
For node: Map.Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: Map with type Type9
Cannot find matching typeVariable for: Entry
For node: Entry expected fqn: java.util.Map.Entry<K,V> with type: Type35 got: java.lang.Object
Did not find solution for node: K with type Type10
Did not find solution for node: K with type Type10
Did not find solution for node: V with type Type11
Did not find solution for node: V with type Type11
For node: entry expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
Cannot find matching typeVariable for: list
Cannot find matching typeVariable for: for (Map.Entry<K,V> entry : list) {
  result.put(entry.getKey(),entry.getValue());
}

Cannot find matching typeVariable for: {
  List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
  Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
    public int compare(    Map.Entry<K,V> o1,    Map.Entry<K,V> o2){
      return (o1.getValue()).compareTo(o2.getValue());
    }
  }
);
  Map<K,V> result=new LinkedHashMap<K,V>();
  for (  Map.Entry<K,V> entry : list) {
    result.put(entry.getKey(),entry.getValue());
  }
  return result;
}

Cannot find matching typeVariable for: public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(Map<K,V> map){
  List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
  Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
    public int compare(    Map.Entry<K,V> o1,    Map.Entry<K,V> o2){
      return (o1.getValue()).compareTo(o2.getValue());
    }
  }
);
  Map<K,V> result=new LinkedHashMap<K,V>();
  for (  Map.Entry<K,V> entry : list) {
    result.put(entry.getKey(),entry.getValue());
  }
  return result;
}

Cannot find matching typeVariable for: public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Map;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Comparator;
public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Did not find solution for node: result.put(entry.getKey(),entry.getValue()) with type Type74
Did not find solution for node: result with type Type12=Type9<Type10,Type11>
Cannot find matching typeVariable for: put
Did not find solution for node: put with type Type74
Did not find solution for node: entry.getKey() with type Type70
For node: entry expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
Cannot find matching typeVariable for: getKey
Did not find solution for node: getKey with type Type70
Did not find solution for node: entry.getValue() with type Type53
For node: entry expected fqn: java.util.Map.Entry<K,V> with type: Type36=Type35<Type10,Type11> got: java.lang.Object
Cannot find matching typeVariable for: getValue
Did not find solution for node: getValue with type Type53
Did not find solution for node: result with type Type12=Type9<Type10,Type11>
Cannot find matching typeVariable for: public class main {
  public void main_1(){
    HashMap<String,Double> map=new HashMap<String,Double>();
    ValueComparator bvc=new ValueComparator(map);
    TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
    map.put("A",99.5);
    map.put("B",67.4);
    map.put("C",67.4);
    map.put("D",67.3);
    System.out.println("unsorted map: " + map);
    sorted_map.putAll(map);
    System.out.println("results: " + sorted_map);
  }
}

Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public class main {
  public void main_1(){
    HashMap<String,Double> map=new HashMap<String,Double>();
    ValueComparator bvc=new ValueComparator(map);
    TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
    map.put("A",99.5);
    map.put("B",67.4);
    map.put("C",67.4);
    map.put("D",67.3);
    System.out.println("unsorted map: " + map);
    sorted_map.putAll(map);
    System.out.println("results: " + sorted_map);
  }
}

Cannot find matching typeVariable for: public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Map;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Comparator;
public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

For node: void expected fqn: void with type: Type8 got: void
Cannot find matching typeVariable for: main_1
Cannot find matching typeVariable for: public void main_1(){
  HashMap<String,Double> map=new HashMap<String,Double>();
  ValueComparator bvc=new ValueComparator(map);
  TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
  map.put("A",99.5);
  map.put("B",67.4);
  map.put("C",67.4);
  map.put("D",67.3);
  System.out.println("unsorted map: " + map);
  sorted_map.putAll(map);
  System.out.println("results: " + sorted_map);
}

Cannot find matching typeVariable for: public class main {
  public void main_1(){
    HashMap<String,Double> map=new HashMap<String,Double>();
    ValueComparator bvc=new ValueComparator(map);
    TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
    map.put("A",99.5);
    map.put("B",67.4);
    map.put("C",67.4);
    map.put("D",67.3);
    System.out.println("unsorted map: " + map);
    sorted_map.putAll(map);
    System.out.println("results: " + sorted_map);
  }
}

Cannot find matching typeVariable for: public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Map;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Comparator;
public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Did not find solution for node: HashMap<String,Double> with type Type84=Type82<Type3,Type83>
For node: HashMap expected fqn: java.util.HashMap<java.lang.String,java.lang.Double> with type: Type82 got: java.util.HashMap
For node: HashMap expected fqn: java.util.HashMap<java.lang.String,java.lang.Double> with type: Type82 got: java.util.HashMap
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
Did not find solution for node: Double with type Type83
Did not find solution for node: Double with type Type83
Cannot find matching typeVariable for: map=new HashMap<String,Double>()
Did not find solution for node: map=new HashMap<String,Double>() with type Type84=Type82<Type3,Type83>
Did not find solution for node: map with type Type84=Type82<Type3,Type83>
Did not find solution for node: new HashMap<String,Double>() with type Type84=Type82<Type3,Type83>
Did not find solution for node: HashMap<String,Double> with type Type84=Type82<Type3,Type83>
For node: HashMap expected fqn: java.util.HashMap<java.lang.String,java.lang.Double> with type: Type82 got: java.util.HashMap
For node: HashMap expected fqn: java.util.HashMap<java.lang.String,java.lang.Double> with type: Type82 got: java.util.HashMap
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
Did not find solution for node: Double with type Type83
Did not find solution for node: Double with type Type83
Did not find solution for node: ValueComparator with type Type1
Did not find solution for node: ValueComparator with type Type1
Cannot find matching typeVariable for: bvc=new ValueComparator(map)
Did not find solution for node: bvc=new ValueComparator(map) with type Type1
Did not find solution for node: bvc with type Type1
Did not find solution for node: new ValueComparator(map) with type Type1
Did not find solution for node: ValueComparator with type Type1
Did not find solution for node: ValueComparator with type Type1
Did not find solution for node: map with type Type84=Type82<Type3,Type83>
Did not find solution for node: TreeMap<String,Double> with type Type91=Type90<Type3,Type83>
For node: TreeMap expected fqn: java.util.TreeMap<java.lang.String,java.lang.Double> with type: Type90 got: java.util.TreeMap
For node: TreeMap expected fqn: java.util.TreeMap<java.lang.String,java.lang.Double> with type: Type90 got: java.util.TreeMap
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
Did not find solution for node: Double with type Type83
Did not find solution for node: Double with type Type83
Cannot find matching typeVariable for: sorted_map=new TreeMap<String,Double>(bvc)
Did not find solution for node: sorted_map=new TreeMap<String,Double>(bvc) with type Type91=Type90<Type3,Type83>
Did not find solution for node: sorted_map with type Type91=Type90<Type3,Type83>
Did not find solution for node: new TreeMap<String,Double>(bvc) with type Type91=Type90<Type3,Type83>
Did not find solution for node: TreeMap<String,Double> with type Type91=Type90<Type3,Type83>
For node: TreeMap expected fqn: java.util.TreeMap<java.lang.String,java.lang.Double> with type: Type90 got: java.util.TreeMap
For node: TreeMap expected fqn: java.util.TreeMap<java.lang.String,java.lang.Double> with type: Type90 got: java.util.TreeMap
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
Did not find solution for node: Double with type Type83
Did not find solution for node: Double with type Type83
Did not find solution for node: bvc with type Type1
For node: map.put("A",99.5) expected fqn: java.lang.Double with type: Type99 got: V
Did not find solution for node: map with type Type84=Type82<Type3,Type83>
Cannot find matching typeVariable for: put
For node: put expected fqn: java.lang.Double with type: Type99 got: V
Did not find solution for node: "A" with type Type97
Did not find solution for node: 99.5 with type Type98
Did not find solution for node: map.put("B",67.4) with type Type106
Did not find solution for node: map with type Type84=Type82<Type3,Type83>
Cannot find matching typeVariable for: put
Did not find solution for node: put with type Type106
Did not find solution for node: "B" with type Type97
Did not find solution for node: 67.4 with type Type98
Did not find solution for node: map.put("C",67.4) with type Type106
Did not find solution for node: map with type Type84=Type82<Type3,Type83>
Cannot find matching typeVariable for: put
Did not find solution for node: put with type Type106
Did not find solution for node: "C" with type Type97
Did not find solution for node: 67.4 with type Type98
Did not find solution for node: map.put("D",67.3) with type Type106
Did not find solution for node: map with type Type84=Type82<Type3,Type83>
Cannot find matching typeVariable for: put
Did not find solution for node: put with type Type106
Did not find solution for node: "D" with type Type97
Did not find solution for node: 67.3 with type Type98
For node: System.out.println("unsorted map: " + map) expected fqn: void with type: Type109 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type109 got: void
For node: System expected fqn: java.lang.System with type: Type107 got: java.lang.System
Did not find solution for node: out with type Type108
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type109 got: void
Did not find solution for node: "unsorted map: " + map with type Type97
Did not find solution for node: "unsorted map: " with type Type97
Did not find solution for node: map with type Type84=Type82<Type3,Type83>
Did not find solution for node: sorted_map.putAll(map) with type Type112
Did not find solution for node: sorted_map with type Type91=Type90<Type3,Type83>
Cannot find matching typeVariable for: putAll
Did not find solution for node: putAll with type Type112
Did not find solution for node: map with type Type84=Type82<Type3,Type83>
Did not find solution for node: System.out.println("results: " + sorted_map) with type Type111
Cannot find matching typeVariable for: System.out
Did not find solution for node: System.out with type Type111
For node: System expected fqn: java.lang.System with type: Type107 got: java.lang.System
Did not find solution for node: out with type Type108
Cannot find matching typeVariable for: println
Did not find solution for node: println with type Type111
Did not find solution for node: "results: " + sorted_map with type Type97
Did not find solution for node: "results: " with type Type97
Did not find solution for node: sorted_map with type Type91=Type90<Type3,Type83>
Cannot find matching typeVariable for: class ValueComparator implements Comparator<String> {
  Map<String,Double> base;
  public ValueComparator(  Map<String,Double> base){
    this.base=base;
  }
  public int compare(  String a,  String b){
    if (base.get(a) >= base.get(b)) {
      return -1;
    }
 else {
      return 1;
    }
  }
}

Did not find solution for node: ValueComparator with type Type1
For node: Comparator<String> expected fqn: java.util.Comparator<java.lang.String> with type: Type4=Type2<Type3> got: java.util.Comparator<java.lang.String>
For node: Comparator expected fqn: java.util.Comparator<java.lang.String> with type: Type2 got: java.util.Comparator
For node: Comparator expected fqn: java.util.Comparator<java.lang.String> with type: Type2 got: java.util.Comparator
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
Did not find solution for node: Map<String,Double> with type Type118=Type9<Type97,Type83>
Did not find solution for node: Map with type Type9
Did not find solution for node: Map with type Type9
Did not find solution for node: String with type Type97
Did not find solution for node: String with type Type97
Did not find solution for node: Double with type Type83
Did not find solution for node: Double with type Type83
Cannot find matching typeVariable for: base
Did not find solution for node: base with type Type118=Type9<Type97,Type83>
Cannot find matching typeVariable for: base
Cannot find matching typeVariable for: Map<String,Double> base;

Cannot find matching typeVariable for: class ValueComparator implements Comparator<String> {
  Map<String,Double> base;
  public ValueComparator(  Map<String,Double> base){
    this.base=base;
  }
  public int compare(  String a,  String b){
    if (base.get(a) >= base.get(b)) {
      return -1;
    }
 else {
      return 1;
    }
  }
}

Cannot find matching typeVariable for: public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Map;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Comparator;
public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: ValueComparator
Cannot find matching typeVariable for: public ValueComparator(Map<String,Double> base){
  this.base=base;
}

Cannot find matching typeVariable for: class ValueComparator implements Comparator<String> {
  Map<String,Double> base;
  public ValueComparator(  Map<String,Double> base){
    this.base=base;
  }
  public int compare(  String a,  String b){
    if (base.get(a) >= base.get(b)) {
      return -1;
    }
 else {
      return 1;
    }
  }
}

Cannot find matching typeVariable for: public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Map;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Comparator;
public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: Map<String,Double> base
Did not find solution for node: Map<String,Double> base with type Type118=Type9<Type97,Type83>
Did not find solution for node: Map<String,Double> with type Type118=Type9<Type97,Type83>
Did not find solution for node: Map with type Type9
Did not find solution for node: Map with type Type9
Did not find solution for node: String with type Type97
Did not find solution for node: String with type Type97
Did not find solution for node: Double with type Type83
Did not find solution for node: Double with type Type83
Did not find solution for node: base with type Type118=Type9<Type97,Type83>
Did not find solution for node: this.base=base with type Type118=Type9<Type97,Type83>
Did not find solution for node: this.base with type Type118=Type9<Type97,Type83>
Did not find solution for node: this with type Type1
Cannot find matching typeVariable for: base
Did not find solution for node: base with type Type118=Type9<Type97,Type83>
Cannot find matching typeVariable for: base
Did not find solution for node: base with type Type118=Type9<Type97,Type83>
For node: int expected fqn: int with type: Type7 got: int
Cannot find matching typeVariable for: compare
Cannot find matching typeVariable for: public int compare(String a,String b){
  if (base.get(a) >= base.get(b)) {
    return -1;
  }
 else {
    return 1;
  }
}

Cannot find matching typeVariable for: class ValueComparator implements Comparator<String> {
  Map<String,Double> base;
  public ValueComparator(  Map<String,Double> base){
    this.base=base;
  }
  public int compare(  String a,  String b){
    if (base.get(a) >= base.get(b)) {
      return -1;
    }
 else {
      return 1;
    }
  }
}

Cannot find matching typeVariable for: public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.Map;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Comparator;
public class Class_5 {
  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(  Map<K,V> map){
    List<Map.Entry<K,V>> list=new LinkedList<Map.Entry<K,V>>(map.entrySet());
    Collections.sort(list,new Comparator<Map.Entry<K,V>>(){
      public int compare(      Map.Entry<K,V> o1,      Map.Entry<K,V> o2){
        return (o1.getValue()).compareTo(o2.getValue());
      }
    }
);
    Map<K,V> result=new LinkedHashMap<K,V>();
    for (    Map.Entry<K,V> entry : list) {
      result.put(entry.getKey(),entry.getValue());
    }
    return result;
  }
public class main {
    public void main_1(){
      HashMap<String,Double> map=new HashMap<String,Double>();
      ValueComparator bvc=new ValueComparator(map);
      TreeMap<String,Double> sorted_map=new TreeMap<String,Double>(bvc);
      map.put("A",99.5);
      map.put("B",67.4);
      map.put("C",67.4);
      map.put("D",67.3);
      System.out.println("unsorted map: " + map);
      sorted_map.putAll(map);
      System.out.println("results: " + sorted_map);
    }
  }
class ValueComparator implements Comparator<String> {
    Map<String,Double> base;
    public ValueComparator(    Map<String,Double> base){
      this.base=base;
    }
    public int compare(    String a,    String b){
      if (base.get(a) >= base.get(b)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
}

Cannot find matching typeVariable for: String a
Did not find solution for node: String a with type Type97
Did not find solution for node: String with type Type97
Did not find solution for node: String with type Type97
Did not find solution for node: a with type Type97
Cannot find matching typeVariable for: String b
Did not find solution for node: String b with type Type97
Did not find solution for node: String with type Type97
Did not find solution for node: String with type Type97
Did not find solution for node: b with type Type97
For node: base.get(a) >= base.get(b) expected fqn: boolean with type: Type125 got: boolean
Did not find solution for node: base.get(a) with type Type119
Did not find solution for node: base with type Type118=Type9<Type97,Type83>
Cannot find matching typeVariable for: get
Did not find solution for node: get with type Type119
Did not find solution for node: a with type Type97
Did not find solution for node: base.get(b) with type Type124
Did not find solution for node: base with type Type118=Type9<Type97,Type83>
Cannot find matching typeVariable for: get
Did not find solution for node: get with type Type124
Did not find solution for node: b with type Type97
Did not find solution for node: -1 with type Type126
Did not find solution for node: 1 with type Type126
Did not find solution for node: 1 with type Type126
{Checked=273, Analyzed=86, Unsolved=187, Incorrect=62, Correct=24}
=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
=MethodInvocation: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=1, Correct=0}
=ParenthesizedExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
=SimpleName: {Checked=31, Analyzed=1, Unsolved=30, Incorrect=1, Correct=0}
=SimpleType: {Checked=23, Analyzed=0, Unsolved=23, Incorrect=0, Correct=0}
=ThisExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=WildcardType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
double=NumberLiteral: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
java=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
java=FieldAccess: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=InfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=7, Analyzed=1, Unsolved=6, Incorrect=1, Correct=0}
java=ParameterizedType: {Checked=21, Analyzed=8, Unsolved=13, Incorrect=7, Correct=1}
java=QualifiedName: {Checked=8, Analyzed=7, Unsolved=1, Incorrect=7, Correct=0}
java=SimpleName: {Checked=88, Analyzed=31, Unsolved=57, Incorrect=23, Correct=8}
java=SimpleType: {Checked=36, Analyzed=20, Unsolved=16, Incorrect=15, Correct=5}
java=SingleVariableDeclaration: {Checked=7, Analyzed=3, Unsolved=4, Incorrect=3, Correct=0}
java=StringLiteral: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
Total stats
{Checked=273, Analyzed=86, Unsolved=187, Incorrect=62, Correct=24}
=ClassInstanceCreation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=1, Correct=0}
=MethodInvocation: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=1, Correct=0}
=ParenthesizedExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
=SimpleName: {Checked=31, Analyzed=1, Unsolved=30, Incorrect=1, Correct=0}
=SimpleType: {Checked=23, Analyzed=0, Unsolved=23, Incorrect=0, Correct=0}
=ThisExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
=WildcardType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=1, Correct=0}
boolean=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
double=NumberLiteral: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
int=SimpleName: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=1, Correct=1}
java=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
java=FieldAccess: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=InfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=7, Analyzed=1, Unsolved=6, Incorrect=1, Correct=0}
java=ParameterizedType: {Checked=21, Analyzed=8, Unsolved=13, Incorrect=7, Correct=1}
java=QualifiedName: {Checked=8, Analyzed=7, Unsolved=1, Incorrect=7, Correct=0}
java=SimpleName: {Checked=88, Analyzed=31, Unsolved=57, Incorrect=23, Correct=8}
java=SimpleType: {Checked=36, Analyzed=20, Unsolved=16, Incorrect=15, Correct=5}
java=SingleVariableDeclaration: {Checked=7, Analyzed=3, Unsolved=4, Incorrect=3, Correct=0}
java=StringLiteral: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
void=PrimitiveType: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
void=SimpleName: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
,ClassInstanceCreation,1,2,0,1,1
,MethodInvocation,1,5,0,1,4
,ParenthesizedExpression,1,1,0,1,0
,SimpleName,1,31,0,1,30
,SimpleType,0,23,0,0,23
,ThisExpression,0,1,0,0,1
,VariableDeclarationFragment,0,1,0,0,1
,WildcardType,1,1,0,1,0
boolean,InfixExpression,1,1,1,0,0
double,NumberLiteral,0,4,0,0,4
int,MethodInvocation,1,1,1,0,0
int,NumberLiteral,0,2,0,0,2
int,PrefixExpression,0,1,0,0,1
int,PrimitiveType,2,2,2,0,0
int,SimpleName,2,2,1,1,0
java,Assignment,0,1,0,0,1
java,ClassInstanceCreation,0,4,0,0,4
java,FieldAccess,0,1,0,0,1
java,InfixExpression,0,2,0,0,2
java,MethodInvocation,1,7,0,1,6
java,ParameterizedType,8,21,1,7,13
java,QualifiedName,7,8,0,7,1
java,SimpleName,31,88,8,23,57
java,SimpleType,20,36,5,15,16
java,SingleVariableDeclaration,3,7,0,3,4
java,StringLiteral,0,6,0,0,6
java,VariableDeclarationFragment,0,5,0,0,5
void,MethodInvocation,2,4,2,0,2
void,PrimitiveType,1,1,1,0,0
void,SimpleName,2,4,2,0,2
