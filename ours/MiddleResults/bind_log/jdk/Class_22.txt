echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /api-resolution/Baseline/SnR/benchmark/../src/test/resources/snippets/so/Class_22.java
Expect check=939
Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Did not find solution for node: Class_22 with type Type1
Cannot find matching typeVariable for: public class TwoRoot extends JFrame {
  private static final String s="0.000000000000000";
  private JProgressBar progressBar=new JProgressBar(0,100);
  private JLabel label=new JLabel(s,JLabel.CENTER);
  public TwoRoot(){
    this.setLayout(new GridLayout(0,1));
    this.setTitle("???2");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(progressBar);
    this.add(label);
    this.setSize(161,100);
    this.setLocationRelativeTo(null);
    this.setVisible(true);
  }
  public void runCalc(){
    progressBar.setIndeterminate(true);
    TwoWorker task=new TwoWorker();
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
private class TwoWorker extends SwingWorker<Double,Double> {
    private static final int N=5;
    private final DecimalFormat df=new DecimalFormat(s);
    double x=1;
    @Override protected Double doInBackground() throws Exception {
      for (int i=1; i <= N; i++) {
        x=x - (((x * x - 2) / (2 * x)));
        setProgress(i * (100 / N));
        publish(Double.valueOf(x));
        Thread.sleep(1000);
      }
      return Double.valueOf(x);
    }
    @Override protected void process(    List<Double> chunks){
      for (      double d : chunks) {
        label.setText(df.format(d));
      }
    }
  }
  public void main(  String[] args){
    EventQueue.invokeLater(new Runnable(){
      @Override public void run(){
        TwoRoot t=new TwoRoot();
        t.runCalc();
      }
    }
);
  }
}

Did not find solution for node: TwoRoot with type Type6
For node: JFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
For node: JFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
For node: String expected fqn: java.lang.String with type: Type101 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type101 got: java.lang.String
Cannot find matching typeVariable for: s="0.000000000000000"
For node: s="0.000000000000000" expected fqn: java.lang.String with type: Type101 got: java.lang.String
For node: s expected fqn: java.lang.String with type: Type101 got: java.lang.String
For node: "0.000000000000000" expected fqn: java.lang.String with type: Type102 got: java.lang.String
For node: JProgressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
For node: JProgressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: progressBar=new JProgressBar(0,100)
For node: progressBar=new JProgressBar(0,100) expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
For node: new JProgressBar(0,100) expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
For node: JProgressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
For node: JProgressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Did not find solution for node: 0 with type Type103
Did not find solution for node: 100 with type Type103
For node: JLabel expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: JLabel expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
Cannot find matching typeVariable for: label=new JLabel(s,JLabel.CENTER)
For node: label=new JLabel(s,JLabel.CENTER) expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: label expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: new JLabel(s,JLabel.CENTER) expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: JLabel expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: JLabel expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: s expected fqn: java.lang.String with type: Type101 got: java.lang.String
Cannot find matching typeVariable for: JLabel.CENTER
For node: JLabel.CENTER expected fqn: int with type: Type98 got: javax.swing.JLabel
For node: JLabel expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: CENTER expected fqn: int with type: Type107 got: int
Cannot find matching typeVariable for: TwoRoot
Cannot find matching typeVariable for: public TwoRoot(){
  this.setLayout(new GridLayout(0,1));
  this.setTitle("???2");
  this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  this.add(progressBar);
  this.add(label);
  this.setSize(161,100);
  this.setLocationRelativeTo(null);
  this.setVisible(true);
}

Cannot find matching typeVariable for: public class TwoRoot extends JFrame {
  private static final String s="0.000000000000000";
  private JProgressBar progressBar=new JProgressBar(0,100);
  private JLabel label=new JLabel(s,JLabel.CENTER);
  public TwoRoot(){
    this.setLayout(new GridLayout(0,1));
    this.setTitle("???2");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(progressBar);
    this.add(label);
    this.setSize(161,100);
    this.setLocationRelativeTo(null);
    this.setVisible(true);
  }
  public void runCalc(){
    progressBar.setIndeterminate(true);
    TwoWorker task=new TwoWorker();
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
private class TwoWorker extends SwingWorker<Double,Double> {
    private static final int N=5;
    private final DecimalFormat df=new DecimalFormat(s);
    double x=1;
    @Override protected Double doInBackground() throws Exception {
      for (int i=1; i <= N; i++) {
        x=x - (((x * x - 2) / (2 * x)));
        setProgress(i * (100 / N));
        publish(Double.valueOf(x));
        Thread.sleep(1000);
      }
      return Double.valueOf(x);
    }
    @Override protected void process(    List<Double> chunks){
      for (      double d : chunks) {
        label.setText(df.format(d));
      }
    }
  }
  public void main(  String[] args){
    EventQueue.invokeLater(new Runnable(){
      @Override public void run(){
        TwoRoot t=new TwoRoot();
        t.runCalc();
      }
    }
);
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Did not find solution for node: this.setLayout(new GridLayout(0,1)) with type Type115
Did not find solution for node: this with type Type6
Cannot find matching typeVariable for: setLayout
Did not find solution for node: setLayout with type Type115
Did not find solution for node: new GridLayout(0,1) with type Type111
Did not find solution for node: GridLayout with type Type111
Did not find solution for node: GridLayout with type Type111
Did not find solution for node: 0 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: this.setTitle("???2") with type Type118
Did not find solution for node: this with type Type6
Cannot find matching typeVariable for: setTitle
Did not find solution for node: setTitle with type Type118
For node: "???2" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) with type Type122
Did not find solution for node: this with type Type6
Cannot find matching typeVariable for: setDefaultCloseOperation
Did not find solution for node: setDefaultCloseOperation with type Type122
Cannot find matching typeVariable for: JFrame.EXIT_ON_CLOSE
Did not find solution for node: JFrame.EXIT_ON_CLOSE with type Type122
For node: JFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
For node: EXIT_ON_CLOSE expected fqn: int with type: Type121 got: int
Did not find solution for node: this.add(progressBar) with type Type125
Did not find solution for node: this with type Type6
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type125
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Did not find solution for node: this.add(label) with type Type128
Did not find solution for node: this with type Type6
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type128
For node: label expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
Did not find solution for node: this.setSize(161,100) with type Type132
Did not find solution for node: this with type Type6
Cannot find matching typeVariable for: setSize
Did not find solution for node: setSize with type Type132
For node: 161 expected fqn: int with type: Type131 got: short
Did not find solution for node: 100 with type Type103
Did not find solution for node: this.setLocationRelativeTo(null) with type Type137
Did not find solution for node: this with type Type6
Cannot find matching typeVariable for: setLocationRelativeTo
Did not find solution for node: setLocationRelativeTo with type Type137
Did not find solution for node: null with type Type136
Did not find solution for node: this.setVisible(true) with type Type141
Did not find solution for node: this with type Type6
Cannot find matching typeVariable for: setVisible
Did not find solution for node: setVisible with type Type141
For node: true expected fqn: boolean with type: Type140 got: boolean
For node: void expected fqn: void with type: Type10 got: void
Cannot find matching typeVariable for: runCalc
Cannot find matching typeVariable for: public void runCalc(){
  progressBar.setIndeterminate(true);
  TwoWorker task=new TwoWorker();
  task.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent e){
      if ("progress".equals(e.getPropertyName())) {
        progressBar.setIndeterminate(false);
        progressBar.setValue((Integer)e.getNewValue());
      }
    }
  }
);
  task.execute();
}

Cannot find matching typeVariable for: public class TwoRoot extends JFrame {
  private static final String s="0.000000000000000";
  private JProgressBar progressBar=new JProgressBar(0,100);
  private JLabel label=new JLabel(s,JLabel.CENTER);
  public TwoRoot(){
    this.setLayout(new GridLayout(0,1));
    this.setTitle("???2");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(progressBar);
    this.add(label);
    this.setSize(161,100);
    this.setLocationRelativeTo(null);
    this.setVisible(true);
  }
  public void runCalc(){
    progressBar.setIndeterminate(true);
    TwoWorker task=new TwoWorker();
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
private class TwoWorker extends SwingWorker<Double,Double> {
    private static final int N=5;
    private final DecimalFormat df=new DecimalFormat(s);
    double x=1;
    @Override protected Double doInBackground() throws Exception {
      for (int i=1; i <= N; i++) {
        x=x - (((x * x - 2) / (2 * x)));
        setProgress(i * (100 / N));
        publish(Double.valueOf(x));
        Thread.sleep(1000);
      }
      return Double.valueOf(x);
    }
    @Override protected void process(    List<Double> chunks){
      for (      double d : chunks) {
        label.setText(df.format(d));
      }
    }
  }
  public void main(  String[] args){
    EventQueue.invokeLater(new Runnable(){
      @Override public void run(){
        TwoRoot t=new TwoRoot();
        t.runCalc();
      }
    }
);
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

For node: progressBar.setIndeterminate(true) expected fqn: void with type: Type144 got: void
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: setIndeterminate
For node: setIndeterminate expected fqn: void with type: Type144 got: void
For node: true expected fqn: boolean with type: Type140 got: boolean
Did not find solution for node: TwoWorker with type Type8
Did not find solution for node: TwoWorker with type Type8
Cannot find matching typeVariable for: task=new TwoWorker()
Did not find solution for node: task=new TwoWorker() with type Type8
Did not find solution for node: task with type Type8
Did not find solution for node: new TwoWorker() with type Type8
Did not find solution for node: TwoWorker with type Type8
Did not find solution for node: TwoWorker with type Type8
Did not find solution for node: task.addPropertyChangeListener(new PropertyChangeListener(){
  @Override public void propertyChange(  PropertyChangeEvent e){
    if ("progress".equals(e.getPropertyName())) {
      progressBar.setIndeterminate(false);
      progressBar.setValue((Integer)e.getNewValue());
    }
  }
}
) with type Type163
Did not find solution for node: task with type Type8
Cannot find matching typeVariable for: addPropertyChangeListener
Did not find solution for node: addPropertyChangeListener with type Type163
Did not find solution for node: new PropertyChangeListener(){
  @Override public void propertyChange(  PropertyChangeEvent e){
    if ("progress".equals(e.getPropertyName())) {
      progressBar.setIndeterminate(false);
      progressBar.setValue((Integer)e.getNewValue());
    }
  }
}
 with type Type148
Did not find solution for node: PropertyChangeListener with type Type148
Did not find solution for node: PropertyChangeListener with type Type148
Cannot find matching typeVariable for: {
  @Override public void propertyChange(  PropertyChangeEvent e){
    if ("progress".equals(e.getPropertyName())) {
      progressBar.setIndeterminate(false);
      progressBar.setValue((Integer)e.getNewValue());
    }
  }
}

For node: @Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: void expected fqn: void with type: Type10 got: void
Cannot find matching typeVariable for: propertyChange
Cannot find matching typeVariable for: @Override public void propertyChange(PropertyChangeEvent e){
  if ("progress".equals(e.getPropertyName())) {
    progressBar.setIndeterminate(false);
    progressBar.setValue((Integer)e.getNewValue());
  }
}

Cannot find matching typeVariable for: {
  @Override public void propertyChange(  PropertyChangeEvent e){
    if ("progress".equals(e.getPropertyName())) {
      progressBar.setIndeterminate(false);
      progressBar.setValue((Integer)e.getNewValue());
    }
  }
}

Did not find solution for node: propertyChange with type Type148
Cannot find matching typeVariable for: PropertyChangeEvent e
For node: PropertyChangeEvent e expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
For node: PropertyChangeEvent expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
For node: PropertyChangeEvent expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
For node: e expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
Did not find solution for node: "progress".equals(e.getPropertyName()) with type Type153
For node: "progress" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Cannot find matching typeVariable for: equals
Did not find solution for node: equals with type Type153
Did not find solution for node: e.getPropertyName() with type Type151
For node: e expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
Cannot find matching typeVariable for: getPropertyName
Did not find solution for node: getPropertyName with type Type151
For node: progressBar.setIndeterminate(false) expected fqn: void with type: Type146 got: void
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: setIndeterminate
For node: setIndeterminate expected fqn: void with type: Type146 got: void
For node: false expected fqn: boolean with type: Type140 got: boolean
For node: progressBar.setValue((Integer)e.getNewValue()) expected fqn: void with type: Type159 got: void
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: setValue
For node: setValue expected fqn: void with type: Type159 got: void
Did not find solution for node: (Integer)e.getNewValue() with type Type156
Did not find solution for node: Integer with type Type156
Did not find solution for node: Integer with type Type156
Did not find solution for node: e.getNewValue() with type Type157
For node: e expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
Cannot find matching typeVariable for: getNewValue
Did not find solution for node: getNewValue with type Type157
Did not find solution for node: task.execute() with type Type166
Did not find solution for node: task with type Type8
Cannot find matching typeVariable for: execute
Did not find solution for node: execute with type Type166
Cannot find matching typeVariable for: private class TwoWorker extends SwingWorker<Double,Double> {
  private static final int N=5;
  private final DecimalFormat df=new DecimalFormat(s);
  double x=1;
  @Override protected Double doInBackground() throws Exception {
    for (int i=1; i <= N; i++) {
      x=x - (((x * x - 2) / (2 * x)));
      setProgress(i * (100 / N));
      publish(Double.valueOf(x));
      Thread.sleep(1000);
    }
    return Double.valueOf(x);
  }
  @Override protected void process(  List<Double> chunks){
    for (    double d : chunks) {
      label.setText(df.format(d));
    }
  }
}

Did not find solution for node: TwoWorker with type Type8
Did not find solution for node: SwingWorker<Double,Double> with type Type5=Type3<Type4,Type4>
Did not find solution for node: SwingWorker with type Type3
Did not find solution for node: SwingWorker with type Type3
Did not find solution for node: Double with type Type4
Did not find solution for node: Double with type Type4
Did not find solution for node: Double with type Type4
Did not find solution for node: Double with type Type4
Did not find solution for node: int with type Type100
Cannot find matching typeVariable for: N=5
Did not find solution for node: N=5 with type Type100
Did not find solution for node: N with type Type100
Did not find solution for node: 5 with type Type103
For node: DecimalFormat expected fqn: java.text.DecimalFormat with type: Type168 got: java.text.DecimalFormat
For node: DecimalFormat expected fqn: java.text.DecimalFormat with type: Type168 got: java.text.DecimalFormat
Cannot find matching typeVariable for: df=new DecimalFormat(s)
For node: df=new DecimalFormat(s) expected fqn: java.text.DecimalFormat with type: Type168 got: java.text.DecimalFormat
For node: df expected fqn: java.text.DecimalFormat with type: Type168 got: java.text.DecimalFormat
For node: new DecimalFormat(s) expected fqn: java.text.DecimalFormat with type: Type168 got: java.text.DecimalFormat
For node: DecimalFormat expected fqn: java.text.DecimalFormat with type: Type168 got: java.text.DecimalFormat
For node: DecimalFormat expected fqn: java.text.DecimalFormat with type: Type168 got: java.text.DecimalFormat
For node: s expected fqn: java.lang.String with type: Type101 got: java.lang.String
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: x=1
Did not find solution for node: x=1 with type Type12
Did not find solution for node: x with type Type12
Did not find solution for node: 1 with type Type103
For node: @Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
Did not find solution for node: Double with type Type4
Did not find solution for node: Double with type Type4
Cannot find matching typeVariable for: doInBackground
Cannot find matching typeVariable for: @Override protected Double doInBackground() throws Exception {
  for (int i=1; i <= N; i++) {
    x=x - (((x * x - 2) / (2 * x)));
    setProgress(i * (100 / N));
    publish(Double.valueOf(x));
    Thread.sleep(1000);
  }
  return Double.valueOf(x);
}

Cannot find matching typeVariable for: private class TwoWorker extends SwingWorker<Double,Double> {
  private static final int N=5;
  private final DecimalFormat df=new DecimalFormat(s);
  double x=1;
  @Override protected Double doInBackground() throws Exception {
    for (int i=1; i <= N; i++) {
      x=x - (((x * x - 2) / (2 * x)));
      setProgress(i * (100 / N));
      publish(Double.valueOf(x));
      Thread.sleep(1000);
    }
    return Double.valueOf(x);
  }
  @Override protected void process(  List<Double> chunks){
    for (    double d : chunks) {
      label.setText(df.format(d));
    }
  }
}

Cannot find matching typeVariable for: public class TwoRoot extends JFrame {
  private static final String s="0.000000000000000";
  private JProgressBar progressBar=new JProgressBar(0,100);
  private JLabel label=new JLabel(s,JLabel.CENTER);
  public TwoRoot(){
    this.setLayout(new GridLayout(0,1));
    this.setTitle("???2");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(progressBar);
    this.add(label);
    this.setSize(161,100);
    this.setLocationRelativeTo(null);
    this.setVisible(true);
  }
  public void runCalc(){
    progressBar.setIndeterminate(true);
    TwoWorker task=new TwoWorker();
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
private class TwoWorker extends SwingWorker<Double,Double> {
    private static final int N=5;
    private final DecimalFormat df=new DecimalFormat(s);
    double x=1;
    @Override protected Double doInBackground() throws Exception {
      for (int i=1; i <= N; i++) {
        x=x - (((x * x - 2) / (2 * x)));
        setProgress(i * (100 / N));
        publish(Double.valueOf(x));
        Thread.sleep(1000);
      }
      return Double.valueOf(x);
    }
    @Override protected void process(    List<Double> chunks){
      for (      double d : chunks) {
        label.setText(df.format(d));
      }
    }
  }
  public void main(  String[] args){
    EventQueue.invokeLater(new Runnable(){
      @Override public void run(){
        TwoRoot t=new TwoRoot();
        t.runCalc();
      }
    }
);
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

For node: Exception expected fqn: java.lang.Exception with type: Type171 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type171 got: java.lang.Exception
Cannot find matching typeVariable for: int i=1
Did not find solution for node: int i=1 with type Type100
Did not find solution for node: int with type Type100
Cannot find matching typeVariable for: i=1
Did not find solution for node: i=1 with type Type100
Did not find solution for node: i with type Type100
Did not find solution for node: 1 with type Type103
For node: i <= N expected fqn: boolean with type: Type140 got: boolean
Did not find solution for node: i with type Type100
Did not find solution for node: N with type Type100
Did not find solution for node: i++ with type Type100
Did not find solution for node: i with type Type100
Did not find solution for node: x=x - (((x * x - 2) / (2 * x))) with type Type12
Did not find solution for node: x with type Type12
Did not find solution for node: x - (((x * x - 2) / (2 * x))) with type Type12
Did not find solution for node: x with type Type12
Did not find solution for node: (((x * x - 2) / (2 * x))) with type Type12
Did not find solution for node: ((x * x - 2) / (2 * x)) with type Type12
Did not find solution for node: (x * x - 2) / (2 * x) with type Type12
Did not find solution for node: (x * x - 2) with type Type12
Did not find solution for node: x * x - 2 with type Type12
Did not find solution for node: x * x with type Type12
Did not find solution for node: x with type Type12
Did not find solution for node: x with type Type12
Did not find solution for node: 2 with type Type103
Did not find solution for node: (2 * x) with type Type103
Did not find solution for node: 2 * x with type Type103
Did not find solution for node: 2 with type Type103
Did not find solution for node: x with type Type12
Did not find solution for node: setProgress(i * (100 / N)) with type Type173
Cannot find matching typeVariable for: setProgress
Did not find solution for node: setProgress with type Type173
Did not find solution for node: i * (100 / N) with type Type100
Did not find solution for node: i with type Type100
Did not find solution for node: (100 / N) with type Type103
Did not find solution for node: 100 / N with type Type103
Did not find solution for node: 100 with type Type103
Did not find solution for node: N with type Type100
Did not find solution for node: publish(Double.valueOf(x)) with type Type182
Cannot find matching typeVariable for: publish
Did not find solution for node: publish with type Type182
Did not find solution for node: Double.valueOf(x) with type Type179
Did not find solution for node: Double with type Type4
Cannot find matching typeVariable for: valueOf
Did not find solution for node: valueOf with type Type179
Did not find solution for node: x with type Type12
For node: Thread.sleep(1000) expected fqn: void with type: Type189 got: void
For node: Thread expected fqn: java.lang.Thread with type: Type188 got: java.lang.Thread
Cannot find matching typeVariable for: sleep
For node: sleep expected fqn: void with type: Type189 got: void
For node: 1000 expected fqn: int with type: Type131 got: short
Did not find solution for node: Double.valueOf(x) with type Type181
Did not find solution for node: Double with type Type4
Cannot find matching typeVariable for: valueOf
Did not find solution for node: valueOf with type Type181
Did not find solution for node: x with type Type12
For node: @Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: void expected fqn: void with type: Type10 got: void
Cannot find matching typeVariable for: process
Cannot find matching typeVariable for: @Override protected void process(List<Double> chunks){
  for (  double d : chunks) {
    label.setText(df.format(d));
  }
}

Cannot find matching typeVariable for: private class TwoWorker extends SwingWorker<Double,Double> {
  private static final int N=5;
  private final DecimalFormat df=new DecimalFormat(s);
  double x=1;
  @Override protected Double doInBackground() throws Exception {
    for (int i=1; i <= N; i++) {
      x=x - (((x * x - 2) / (2 * x)));
      setProgress(i * (100 / N));
      publish(Double.valueOf(x));
      Thread.sleep(1000);
    }
    return Double.valueOf(x);
  }
  @Override protected void process(  List<Double> chunks){
    for (    double d : chunks) {
      label.setText(df.format(d));
    }
  }
}

Cannot find matching typeVariable for: public class TwoRoot extends JFrame {
  private static final String s="0.000000000000000";
  private JProgressBar progressBar=new JProgressBar(0,100);
  private JLabel label=new JLabel(s,JLabel.CENTER);
  public TwoRoot(){
    this.setLayout(new GridLayout(0,1));
    this.setTitle("???2");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(progressBar);
    this.add(label);
    this.setSize(161,100);
    this.setLocationRelativeTo(null);
    this.setVisible(true);
  }
  public void runCalc(){
    progressBar.setIndeterminate(true);
    TwoWorker task=new TwoWorker();
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
private class TwoWorker extends SwingWorker<Double,Double> {
    private static final int N=5;
    private final DecimalFormat df=new DecimalFormat(s);
    double x=1;
    @Override protected Double doInBackground() throws Exception {
      for (int i=1; i <= N; i++) {
        x=x - (((x * x - 2) / (2 * x)));
        setProgress(i * (100 / N));
        publish(Double.valueOf(x));
        Thread.sleep(1000);
      }
      return Double.valueOf(x);
    }
    @Override protected void process(    List<Double> chunks){
      for (      double d : chunks) {
        label.setText(df.format(d));
      }
    }
  }
  public void main(  String[] args){
    EventQueue.invokeLater(new Runnable(){
      @Override public void run(){
        TwoRoot t=new TwoRoot();
        t.runCalc();
      }
    }
);
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: List<Double> chunks
Did not find solution for node: List<Double> chunks with type Type193=Type192<Type4>
Did not find solution for node: List<Double> with type Type193=Type192<Type4>
For node: List expected fqn: java.util.List<java.lang.Double> with type: Type192 got: java.util.List
For node: List expected fqn: java.util.List<java.lang.Double> with type: Type192 got: java.util.List
Did not find solution for node: Double with type Type4
Did not find solution for node: Double with type Type4
Did not find solution for node: chunks with type Type193=Type192<Type4>
Cannot find matching typeVariable for: double d
Did not find solution for node: double d with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: d with type Type12
Cannot find matching typeVariable for: chunks
Cannot find matching typeVariable for: for (double d : chunks) {
  label.setText(df.format(d));
}

Cannot find matching typeVariable for: {
  for (  double d : chunks) {
    label.setText(df.format(d));
  }
}

Cannot find matching typeVariable for: @Override protected void process(List<Double> chunks){
  for (  double d : chunks) {
    label.setText(df.format(d));
  }
}

Cannot find matching typeVariable for: private class TwoWorker extends SwingWorker<Double,Double> {
  private static final int N=5;
  private final DecimalFormat df=new DecimalFormat(s);
  double x=1;
  @Override protected Double doInBackground() throws Exception {
    for (int i=1; i <= N; i++) {
      x=x - (((x * x - 2) / (2 * x)));
      setProgress(i * (100 / N));
      publish(Double.valueOf(x));
      Thread.sleep(1000);
    }
    return Double.valueOf(x);
  }
  @Override protected void process(  List<Double> chunks){
    for (    double d : chunks) {
      label.setText(df.format(d));
    }
  }
}

Cannot find matching typeVariable for: public class TwoRoot extends JFrame {
  private static final String s="0.000000000000000";
  private JProgressBar progressBar=new JProgressBar(0,100);
  private JLabel label=new JLabel(s,JLabel.CENTER);
  public TwoRoot(){
    this.setLayout(new GridLayout(0,1));
    this.setTitle("???2");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(progressBar);
    this.add(label);
    this.setSize(161,100);
    this.setLocationRelativeTo(null);
    this.setVisible(true);
  }
  public void runCalc(){
    progressBar.setIndeterminate(true);
    TwoWorker task=new TwoWorker();
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
private class TwoWorker extends SwingWorker<Double,Double> {
    private static final int N=5;
    private final DecimalFormat df=new DecimalFormat(s);
    double x=1;
    @Override protected Double doInBackground() throws Exception {
      for (int i=1; i <= N; i++) {
        x=x - (((x * x - 2) / (2 * x)));
        setProgress(i * (100 / N));
        publish(Double.valueOf(x));
        Thread.sleep(1000);
      }
      return Double.valueOf(x);
    }
    @Override protected void process(    List<Double> chunks){
      for (      double d : chunks) {
        label.setText(df.format(d));
      }
    }
  }
  public void main(  String[] args){
    EventQueue.invokeLater(new Runnable(){
      @Override public void run(){
        TwoRoot t=new TwoRoot();
        t.runCalc();
      }
    }
);
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

For node: label.setText(df.format(d)) expected fqn: void with type: Type197 got: void
For node: label expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
Cannot find matching typeVariable for: setText
For node: setText expected fqn: void with type: Type197 got: void
For node: df.format(d) expected fqn: java.lang.String with type: Type194 got: java.lang.String
For node: df expected fqn: java.text.DecimalFormat with type: Type168 got: java.text.DecimalFormat
Cannot find matching typeVariable for: format
For node: format expected fqn: java.lang.String with type: Type194 got: java.lang.String
Did not find solution for node: d with type Type12
For node: void expected fqn: void with type: Type10 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public void main(String[] args){
  EventQueue.invokeLater(new Runnable(){
    @Override public void run(){
      TwoRoot t=new TwoRoot();
      t.runCalc();
    }
  }
);
}

Cannot find matching typeVariable for: public class TwoRoot extends JFrame {
  private static final String s="0.000000000000000";
  private JProgressBar progressBar=new JProgressBar(0,100);
  private JLabel label=new JLabel(s,JLabel.CENTER);
  public TwoRoot(){
    this.setLayout(new GridLayout(0,1));
    this.setTitle("???2");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(progressBar);
    this.add(label);
    this.setSize(161,100);
    this.setLocationRelativeTo(null);
    this.setVisible(true);
  }
  public void runCalc(){
    progressBar.setIndeterminate(true);
    TwoWorker task=new TwoWorker();
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
private class TwoWorker extends SwingWorker<Double,Double> {
    private static final int N=5;
    private final DecimalFormat df=new DecimalFormat(s);
    double x=1;
    @Override protected Double doInBackground() throws Exception {
      for (int i=1; i <= N; i++) {
        x=x - (((x * x - 2) / (2 * x)));
        setProgress(i * (100 / N));
        publish(Double.valueOf(x));
        Thread.sleep(1000);
      }
      return Double.valueOf(x);
    }
    @Override protected void process(    List<Double> chunks){
      for (      double d : chunks) {
        label.setText(df.format(d));
      }
    }
  }
  public void main(  String[] args){
    EventQueue.invokeLater(new Runnable(){
      @Override public void run(){
        TwoRoot t=new TwoRoot();
        t.runCalc();
      }
    }
);
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: String[] args
Did not find solution for node: String[] args with type Type200
Did not find solution for node: String[] with type Type200
For node: String expected fqn: java.lang.String with type: Type102 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: args with type Type200
For node: EventQueue.invokeLater(new Runnable(){
  @Override public void run(){
    TwoRoot t=new TwoRoot();
    t.runCalc();
  }
}
) expected fqn: void with type: Type207 got: void
For node: EventQueue expected fqn: java.awt.EventQueue with type: Type206 got: java.awt.EventQueue
Cannot find matching typeVariable for: invokeLater
For node: invokeLater expected fqn: void with type: Type207 got: void
For node: new Runnable(){
  @Override public void run(){
    TwoRoot t=new TwoRoot();
    t.runCalc();
  }
}
 expected fqn:  with type: Type201 got: java.lang.Runnable
For node: Runnable expected fqn: java.lang.Runnable with type: Type201 got: java.lang.Runnable
For node: Runnable expected fqn: java.lang.Runnable with type: Type201 got: java.lang.Runnable
Cannot find matching typeVariable for: {
  @Override public void run(){
    TwoRoot t=new TwoRoot();
    t.runCalc();
  }
}

For node: @Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: void expected fqn: void with type: Type10 got: void
Cannot find matching typeVariable for: run
Cannot find matching typeVariable for: @Override public void run(){
  TwoRoot t=new TwoRoot();
  t.runCalc();
}

Cannot find matching typeVariable for: {
  @Override public void run(){
    TwoRoot t=new TwoRoot();
    t.runCalc();
  }
}

For node: run expected fqn: void with type: Type201 got: java.lang.Runnable
Did not find solution for node: TwoRoot with type Type6
Did not find solution for node: TwoRoot with type Type6
Cannot find matching typeVariable for: t=new TwoRoot()
Did not find solution for node: t=new TwoRoot() with type Type6
Did not find solution for node: t with type Type6
Did not find solution for node: new TwoRoot() with type Type6
Did not find solution for node: TwoRoot with type Type6
Did not find solution for node: TwoRoot with type Type6
Did not find solution for node: t.runCalc() with type Type203
Did not find solution for node: t with type Type6
Cannot find matching typeVariable for: runCalc
Did not find solution for node: runCalc with type Type203
For node: JFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
For node: JFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
Cannot find matching typeVariable for: progressFrame
For node: progressFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
Cannot find matching typeVariable for: progressFrame
Cannot find matching typeVariable for: JFrame progressFrame;

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

For node: JProgressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
For node: JProgressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: progressBar
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: progressBar
Cannot find matching typeVariable for: JProgressBar progressBar;

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

For node: JLabel expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: JLabel expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
Cannot find matching typeVariable for: label=new JLabel("Calculating...")
For node: label=new JLabel("Calculating...") expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: label expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: new JLabel("Calculating...") expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: JLabel expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: JLabel expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: "Calculating..." expected fqn: java.lang.String with type: Type102 got: java.lang.String
For node: Container expected fqn: java.awt.Container with type: Type99 got: java.awt.Container
For node: Container expected fqn: java.awt.Container with type: Type99 got: java.awt.Container
Cannot find matching typeVariable for: pane
For node: pane expected fqn: java.awt.Container with type: Type99 got: java.awt.Container
Cannot find matching typeVariable for: pane
Cannot find matching typeVariable for: Container pane;

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: amountSaved=0
Did not find solution for node: amountSaved=0 with type Type12
Did not find solution for node: amountSaved with type Type12
Did not find solution for node: 0 with type Type103
Did not find solution for node: int with type Type100
Cannot find matching typeVariable for: i=0
Did not find solution for node: i=0 with type Type100
Did not find solution for node: i with type Type100
Did not find solution for node: 0 with type Type103
Did not find solution for node: int with type Type100
Cannot find matching typeVariable for: iterations
Did not find solution for node: iterations with type Type100
Cannot find matching typeVariable for: iterations
Cannot find matching typeVariable for: int iterations;

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

For node: void expected fqn: void with type: Type10 got: void
Cannot find matching typeVariable for: createGui
Cannot find matching typeVariable for: public void createGui(int iterations){
  progressFrame=new JFrame("Calculation Progress");
  progressFrame.setSize(300,100);
  pane=progressFrame.getContentPane();
  pane.setLayout(null);
  label=new JLabel("Calculating...");
  label.setBounds(115,35,200,25);
  progressBar=new JProgressBar(0,iterations);
  progressBar.setBounds(10,10,280,20);
  progressBar.setStringPainted(true);
  pane.add(progressBar);
  pane.add(label);
  progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  progressFrame.setResizable(false);
  progressFrame.setLocationRelativeTo(null);
  progressFrame.setVisible(true);
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: int iterations
Did not find solution for node: int iterations with type Type100
Did not find solution for node: int with type Type100
Did not find solution for node: iterations with type Type100
For node: progressFrame=new JFrame("Calculation Progress") expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
For node: progressFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
For node: new JFrame("Calculation Progress") expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
For node: JFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
For node: JFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
For node: "Calculation Progress" expected fqn: java.lang.String with type: Type102 got: java.lang.String
For node: progressFrame.setSize(300,100) expected fqn: void with type: Type214 got: void
For node: progressFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
Cannot find matching typeVariable for: setSize
For node: setSize expected fqn: void with type: Type214 got: void
For node: 300 expected fqn: int with type: Type131 got: short
Did not find solution for node: 100 with type Type103
For node: pane=progressFrame.getContentPane() expected fqn: java.awt.Container with type: Type99 got: java.awt.Container
For node: pane expected fqn: java.awt.Container with type: Type99 got: java.awt.Container
For node: progressFrame.getContentPane() expected fqn: java.awt.Container with type: Type218 got: java.awt.Container
For node: progressFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
Cannot find matching typeVariable for: getContentPane
For node: getContentPane expected fqn: java.awt.Container with type: Type218 got: java.awt.Container
For node: pane.setLayout(null) expected fqn: void with type: Type221 got: void
For node: pane expected fqn: java.awt.Container with type: Type99 got: java.awt.Container
Cannot find matching typeVariable for: setLayout
For node: setLayout expected fqn: void with type: Type221 got: void
For node: null expected fqn: null with type: Type220 got: java.awt.LayoutManager
For node: label=new JLabel("Calculating...") expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: label expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: new JLabel("Calculating...") expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: JLabel expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: JLabel expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: "Calculating..." expected fqn: java.lang.String with type: Type102 got: java.lang.String
For node: label.setBounds(115,35,200,25) expected fqn: void with type: Type224 got: void
For node: label expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
Cannot find matching typeVariable for: setBounds
For node: setBounds expected fqn: void with type: Type224 got: void
Did not find solution for node: 115 with type Type103
Did not find solution for node: 35 with type Type103
For node: 200 expected fqn: int with type: Type131 got: short
Did not find solution for node: 25 with type Type103
For node: progressBar=new JProgressBar(0,iterations) expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
For node: new JProgressBar(0,iterations) expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
For node: JProgressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
For node: JProgressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Did not find solution for node: 0 with type Type103
Did not find solution for node: iterations with type Type100
For node: progressBar.setBounds(10,10,280,20) expected fqn: void with type: Type233 got: void
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: setBounds
For node: setBounds expected fqn: void with type: Type233 got: void
Did not find solution for node: 10 with type Type103
Did not find solution for node: 10 with type Type103
For node: 280 expected fqn: int with type: Type131 got: short
Did not find solution for node: 20 with type Type103
For node: progressBar.setStringPainted(true) expected fqn: void with type: Type239 got: void
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: setStringPainted
For node: setStringPainted expected fqn: void with type: Type239 got: void
For node: true expected fqn: boolean with type: Type140 got: boolean
For node: pane.add(progressBar) expected fqn: java.awt.Component with type: Type242 got: void
For node: pane expected fqn: java.awt.Container with type: Type99 got: java.awt.Container
Cannot find matching typeVariable for: add
For node: add expected fqn: java.awt.Component with type: Type242 got: void
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
For node: pane.add(label) expected fqn: java.awt.Component with type: Type245 got: void
For node: pane expected fqn: java.awt.Container with type: Type99 got: java.awt.Container
Cannot find matching typeVariable for: add
For node: add expected fqn: java.awt.Component with type: Type245 got: void
For node: label expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
For node: progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) expected fqn: void with type: Type248 got: void
For node: progressFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
Cannot find matching typeVariable for: setDefaultCloseOperation
For node: setDefaultCloseOperation expected fqn: void with type: Type248 got: void
Cannot find matching typeVariable for: JFrame.EXIT_ON_CLOSE
For node: JFrame.EXIT_ON_CLOSE expected fqn: int with type: Type248 got: void
For node: JFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
For node: EXIT_ON_CLOSE expected fqn: int with type: Type121 got: int
For node: progressFrame.setResizable(false) expected fqn: void with type: Type251 got: void
For node: progressFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
Cannot find matching typeVariable for: setResizable
For node: setResizable expected fqn: void with type: Type251 got: void
For node: false expected fqn: boolean with type: Type140 got: boolean
For node: progressFrame.setLocationRelativeTo(null) expected fqn: void with type: Type255 got: void
For node: progressFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
Cannot find matching typeVariable for: setLocationRelativeTo
For node: setLocationRelativeTo expected fqn: void with type: Type255 got: void
For node: null expected fqn: null with type: Type254 got: java.awt.Component
For node: progressFrame.setVisible(true) expected fqn: void with type: Type258 got: void
For node: progressFrame expected fqn: javax.swing.JFrame with type: Type7 got: javax.swing.JFrame
Cannot find matching typeVariable for: setVisible
For node: setVisible expected fqn: void with type: Type258 got: void
For node: true expected fqn: boolean with type: Type140 got: boolean
For node: void expected fqn: void with type: Type10 got: void
Cannot find matching typeVariable for: runCalcs
Cannot find matching typeVariable for: public void runCalcs(double MP,double StepAmt,double L1,double L2,double C1,double C2,double IM1,double IM2,double M1Start,double M2Start){
  progressBar.setIndeterminate(false);
  TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
  task.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent e){
      if ("progress".equals(e.getPropertyName())) {
        progressBar.setIndeterminate(false);
        progressBar.setValue((Integer)e.getNewValue());
      }
    }
  }
);
  task.execute();
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: double MP
Did not find solution for node: double MP with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: MP with type Type12
Cannot find matching typeVariable for: double StepAmt
Did not find solution for node: double StepAmt with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: StepAmt with type Type12
Cannot find matching typeVariable for: double L1
Did not find solution for node: double L1 with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: L1 with type Type12
Cannot find matching typeVariable for: double L2
Did not find solution for node: double L2 with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: L2 with type Type12
Cannot find matching typeVariable for: double C1
Did not find solution for node: double C1 with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: C1 with type Type12
Cannot find matching typeVariable for: double C2
Did not find solution for node: double C2 with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: C2 with type Type12
Cannot find matching typeVariable for: double IM1
Did not find solution for node: double IM1 with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: IM1 with type Type12
Cannot find matching typeVariable for: double IM2
Did not find solution for node: double IM2 with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: IM2 with type Type12
Cannot find matching typeVariable for: double M1Start
Did not find solution for node: double M1Start with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: M1Start with type Type12
Cannot find matching typeVariable for: double M2Start
Did not find solution for node: double M2Start with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: M2Start with type Type12
For node: progressBar.setIndeterminate(false) expected fqn: void with type: Type146 got: void
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: setIndeterminate
For node: setIndeterminate expected fqn: void with type: Type146 got: void
For node: false expected fqn: boolean with type: Type140 got: boolean
Did not find solution for node: TwoWorker with type Type8
Did not find solution for node: TwoWorker with type Type8
Cannot find matching typeVariable for: task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start)
Did not find solution for node: task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start) with type Type8
Did not find solution for node: task with type Type8
Did not find solution for node: new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start) with type Type8
Did not find solution for node: TwoWorker with type Type8
Did not find solution for node: TwoWorker with type Type8
Did not find solution for node: MP with type Type12
Did not find solution for node: StepAmt with type Type12
Did not find solution for node: L1 with type Type12
Did not find solution for node: L2 with type Type12
Did not find solution for node: C1 with type Type12
Did not find solution for node: C2 with type Type12
Did not find solution for node: IM1 with type Type12
Did not find solution for node: IM2 with type Type12
Did not find solution for node: M1Start with type Type12
Did not find solution for node: M2Start with type Type12
Did not find solution for node: task.addPropertyChangeListener(new PropertyChangeListener(){
  @Override public void propertyChange(  PropertyChangeEvent e){
    if ("progress".equals(e.getPropertyName())) {
      progressBar.setIndeterminate(false);
      progressBar.setValue((Integer)e.getNewValue());
    }
  }
}
) with type Type165
Did not find solution for node: task with type Type8
Cannot find matching typeVariable for: addPropertyChangeListener
Did not find solution for node: addPropertyChangeListener with type Type165
Did not find solution for node: new PropertyChangeListener(){
  @Override public void propertyChange(  PropertyChangeEvent e){
    if ("progress".equals(e.getPropertyName())) {
      progressBar.setIndeterminate(false);
      progressBar.setValue((Integer)e.getNewValue());
    }
  }
}
 with type Type148
Did not find solution for node: PropertyChangeListener with type Type148
Did not find solution for node: PropertyChangeListener with type Type148
Cannot find matching typeVariable for: {
  @Override public void propertyChange(  PropertyChangeEvent e){
    if ("progress".equals(e.getPropertyName())) {
      progressBar.setIndeterminate(false);
      progressBar.setValue((Integer)e.getNewValue());
    }
  }
}

For node: @Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: void expected fqn: void with type: Type10 got: void
Cannot find matching typeVariable for: propertyChange
Cannot find matching typeVariable for: @Override public void propertyChange(PropertyChangeEvent e){
  if ("progress".equals(e.getPropertyName())) {
    progressBar.setIndeterminate(false);
    progressBar.setValue((Integer)e.getNewValue());
  }
}

Cannot find matching typeVariable for: {
  @Override public void propertyChange(  PropertyChangeEvent e){
    if ("progress".equals(e.getPropertyName())) {
      progressBar.setIndeterminate(false);
      progressBar.setValue((Integer)e.getNewValue());
    }
  }
}

Did not find solution for node: propertyChange with type Type148
Cannot find matching typeVariable for: PropertyChangeEvent e
For node: PropertyChangeEvent e expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
For node: PropertyChangeEvent expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
For node: PropertyChangeEvent expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
For node: e expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
Did not find solution for node: "progress".equals(e.getPropertyName()) with type Type272
For node: "progress" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Cannot find matching typeVariable for: equals
Did not find solution for node: equals with type Type272
Did not find solution for node: e.getPropertyName() with type Type152
For node: e expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
Cannot find matching typeVariable for: getPropertyName
Did not find solution for node: getPropertyName with type Type152
For node: progressBar.setIndeterminate(false) expected fqn: void with type: Type146 got: void
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: setIndeterminate
For node: setIndeterminate expected fqn: void with type: Type146 got: void
For node: false expected fqn: boolean with type: Type140 got: boolean
Did not find solution for node: progressBar.setValue((Integer)e.getNewValue()) with type Type161
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: setValue
Did not find solution for node: setValue with type Type161
Did not find solution for node: (Integer)e.getNewValue() with type Type156
Did not find solution for node: Integer with type Type156
Did not find solution for node: Integer with type Type156
For node: e.getNewValue() expected fqn: java.lang.Object with type: Type158 got: java.lang.Object
For node: e expected fqn: java.beans.PropertyChangeEvent with type: Type150 got: java.beans.PropertyChangeEvent
Cannot find matching typeVariable for: getNewValue
For node: getNewValue expected fqn: java.lang.Object with type: Type158 got: java.lang.Object
Did not find solution for node: task.execute() with type Type167
Did not find solution for node: task with type Type8
Cannot find matching typeVariable for: execute
Did not find solution for node: execute with type Type167
Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Did not find solution for node: TwoWorker with type Type8
Did not find solution for node: SwingWorker<Double,Double> with type Type5=Type3<Type4,Type4>
Did not find solution for node: SwingWorker with type Type3
Did not find solution for node: SwingWorker with type Type3
Did not find solution for node: Double with type Type4
Did not find solution for node: Double with type Type4
Did not find solution for node: Double with type Type4
Did not find solution for node: Double with type Type4
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: MP
Did not find solution for node: MP with type Type12
Cannot find matching typeVariable for: MP
Cannot find matching typeVariable for: private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: StepAmt
Did not find solution for node: StepAmt with type Type12
Cannot find matching typeVariable for: StepAmt
Cannot find matching typeVariable for: private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: L1
Did not find solution for node: L1 with type Type12
Cannot find matching typeVariable for: L1
Cannot find matching typeVariable for: private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: L2
Did not find solution for node: L2 with type Type12
Cannot find matching typeVariable for: L2
Cannot find matching typeVariable for: private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: C1
Did not find solution for node: C1 with type Type12
Cannot find matching typeVariable for: C1
Cannot find matching typeVariable for: private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: C2
Did not find solution for node: C2 with type Type12
Cannot find matching typeVariable for: C2
Cannot find matching typeVariable for: private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: IM1
Did not find solution for node: IM1 with type Type12
Cannot find matching typeVariable for: IM1
Cannot find matching typeVariable for: private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: IM2
Did not find solution for node: IM2 with type Type12
Cannot find matching typeVariable for: IM2
Cannot find matching typeVariable for: private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: M1Start
Did not find solution for node: M1Start with type Type12
Cannot find matching typeVariable for: M1Start
Cannot find matching typeVariable for: private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: M2Start
Did not find solution for node: M2Start with type Type12
Cannot find matching typeVariable for: M2Start
Cannot find matching typeVariable for: private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: TwoWorker
Cannot find matching typeVariable for: public TwoWorker(double MPa,double StepAmta,double L1a,double L2a,double C1a,double C2a,double IM1a,double IM2a,double M1Starta,double M2Starta){
  MP=MPa;
  StepAmt=StepAmta;
  L1=L1a;
  L2=L2a;
  C1=C1a;
  C2=C2a;
  IM1=IM1a;
  IM2=IM2a;
  M1Start=M1Starta;
  M2Start=M2Starta;
}

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: double MPa
Did not find solution for node: double MPa with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: MPa with type Type12
Cannot find matching typeVariable for: double StepAmta
Did not find solution for node: double StepAmta with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: StepAmta with type Type12
Cannot find matching typeVariable for: double L1a
Did not find solution for node: double L1a with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: L1a with type Type12
Cannot find matching typeVariable for: double L2a
Did not find solution for node: double L2a with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: L2a with type Type12
Cannot find matching typeVariable for: double C1a
Did not find solution for node: double C1a with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: C1a with type Type12
Cannot find matching typeVariable for: double C2a
Did not find solution for node: double C2a with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: C2a with type Type12
Cannot find matching typeVariable for: double IM1a
Did not find solution for node: double IM1a with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: IM1a with type Type12
Cannot find matching typeVariable for: double IM2a
Did not find solution for node: double IM2a with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: IM2a with type Type12
Cannot find matching typeVariable for: double M1Starta
Did not find solution for node: double M1Starta with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: M1Starta with type Type12
Cannot find matching typeVariable for: double M2Starta
Did not find solution for node: double M2Starta with type Type12
Did not find solution for node: double with type Type12
Did not find solution for node: M2Starta with type Type12
Did not find solution for node: MP=MPa with type Type12
Did not find solution for node: MP with type Type12
Did not find solution for node: MPa with type Type12
Did not find solution for node: StepAmt=StepAmta with type Type12
Did not find solution for node: StepAmt with type Type12
Did not find solution for node: StepAmta with type Type12
Did not find solution for node: L1=L1a with type Type12
Did not find solution for node: L1 with type Type12
Did not find solution for node: L1a with type Type12
Did not find solution for node: L2=L2a with type Type12
Did not find solution for node: L2 with type Type12
Did not find solution for node: L2a with type Type12
Did not find solution for node: C1=C1a with type Type12
Did not find solution for node: C1 with type Type12
Did not find solution for node: C1a with type Type12
Did not find solution for node: C2=C2a with type Type12
Did not find solution for node: C2 with type Type12
Did not find solution for node: C2a with type Type12
Did not find solution for node: IM1=IM1a with type Type12
Did not find solution for node: IM1 with type Type12
Did not find solution for node: IM1a with type Type12
Did not find solution for node: IM2=IM2a with type Type12
Did not find solution for node: IM2 with type Type12
Did not find solution for node: IM2a with type Type12
Did not find solution for node: M1Start=M1Starta with type Type12
Did not find solution for node: M1Start with type Type12
Did not find solution for node: M1Starta with type Type12
Did not find solution for node: M2Start=M2Starta with type Type12
Did not find solution for node: M2Start with type Type12
Did not find solution for node: M2Starta with type Type12
For node: @Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
Did not find solution for node: Double with type Type4
Did not find solution for node: Double with type Type4
Cannot find matching typeVariable for: doInBackground
Cannot find matching typeVariable for: @Override protected Double doInBackground(){
  double M1=M1Start;
  double M2=M2Start;
  double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
  double M1Sum=M1 * N1;
  double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
  double M2Sum=M2 * N2;
  double minLoop=M1Sum + M2Sum;
  double MTotal=0;
  double MP1=0;
  double MP2=0;
  double NP1=0;
  double NP2=0;
  double MP1Sum=0;
  double MP2Sum=0;
  while (M1 <= MP - M2Start && M2 >= M2Start) {
    N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    M1Sum=N1 * M1;
    N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    M2Sum=N2 * M2;
    MTotal=M1Sum + M2Sum;
    if (MTotal < minLoop) {
      minLoop=MTotal;
      MP1=M1;
      MP2=M2;
      NP1=N1;
      NP2=N2;
      MP1Sum=M1Sum;
      MP2Sum=M2Sum;
    }
    i++;
    progressBar.setValue(i);
    M1=M1 + StepAmt;
    M2=MP - M1;
    M1Sum=0;
    M2Sum=0;
  }
  System.out.printf("MP1 = %.2f\n",MP1);
  System.out.printf("MP2 = %.2f\n",MP2);
  System.out.printf("NP1 = %.2f\n",NP1);
  System.out.printf("NP2 = %.2f\n",NP2);
  System.out.printf("MP1Sum = %.2f\n",MP1Sum);
  System.out.printf("MP2Sum = %.2f\n",MP2Sum);
  System.out.printf("MTotal = %.2f\n",minLoop);
  System.out.printf("i = %d\n",i);
  System.out.printf("M1Start = %.2f\n",M1Start);
  System.out.printf("M2Start = %.2f\n",M2Start);
  System.out.printf("MP= %.2f\n",MP);
  if (C1 > 0) {
    double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
    double CT1=CN1 * C1;
    double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
    double CT2=CN2 * C2;
    double CTotal=CT1 + CT2;
    amountSaved=CTotal - minLoop;
  }
  return null;
}

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: M1=M1Start
Did not find solution for node: M1=M1Start with type Type12
Did not find solution for node: M1 with type Type12
Did not find solution for node: M1Start with type Type12
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: M2=M2Start
Did not find solution for node: M2=M2Start with type Type12
Did not find solution for node: M2 with type Type12
Did not find solution for node: M2Start with type Type12
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1)
Did not find solution for node: N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1) with type Type12
Did not find solution for node: N1 with type Type12
Did not find solution for node: (Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1) with type Type276
Did not find solution for node: (Math.log10(1 - IM1 * L1 / M1) * -1) with type Type276
Did not find solution for node: Math.log10(1 - IM1 * L1 / M1) * -1 with type Type276
Did not find solution for node: Math.log10(1 - IM1 * L1 / M1) with type Type276
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type276
Did not find solution for node: 1 - IM1 * L1 / M1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM1 * L1 / M1 with type Type12
Did not find solution for node: IM1 * L1 with type Type12
Did not find solution for node: IM1 with type Type12
Did not find solution for node: L1 with type Type12
Did not find solution for node: M1 with type Type12
Did not find solution for node: -1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: Math.log10(1 + IM1) with type Type278
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type278
Did not find solution for node: 1 + IM1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM1 with type Type12
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: M1Sum=M1 * N1
Did not find solution for node: M1Sum=M1 * N1 with type Type12
Did not find solution for node: M1Sum with type Type12
Did not find solution for node: M1 * N1 with type Type12
Did not find solution for node: M1 with type Type12
Did not find solution for node: N1 with type Type12
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2)
Did not find solution for node: N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2) with type Type12
Did not find solution for node: N2 with type Type12
Did not find solution for node: (Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2) with type Type278
Did not find solution for node: (Math.log10(1 - IM2 * L2 / M2) * -1) with type Type278
Did not find solution for node: Math.log10(1 - IM2 * L2 / M2) * -1 with type Type278
Did not find solution for node: Math.log10(1 - IM2 * L2 / M2) with type Type278
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type278
Did not find solution for node: 1 - IM2 * L2 / M2 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM2 * L2 / M2 with type Type12
Did not find solution for node: IM2 * L2 with type Type12
Did not find solution for node: IM2 with type Type12
Did not find solution for node: L2 with type Type12
Did not find solution for node: M2 with type Type12
Did not find solution for node: -1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: Math.log10(1 + IM2) with type Type278
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type278
Did not find solution for node: 1 + IM2 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM2 with type Type12
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: M2Sum=M2 * N2
Did not find solution for node: M2Sum=M2 * N2 with type Type12
Did not find solution for node: M2Sum with type Type12
Did not find solution for node: M2 * N2 with type Type12
Did not find solution for node: M2 with type Type12
Did not find solution for node: N2 with type Type12
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: minLoop=M1Sum + M2Sum
Did not find solution for node: minLoop=M1Sum + M2Sum with type Type12
Did not find solution for node: minLoop with type Type12
Did not find solution for node: M1Sum + M2Sum with type Type12
Did not find solution for node: M1Sum with type Type12
Did not find solution for node: M2Sum with type Type12
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: MTotal=0
Did not find solution for node: MTotal=0 with type Type12
Did not find solution for node: MTotal with type Type12
Did not find solution for node: 0 with type Type103
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: MP1=0
Did not find solution for node: MP1=0 with type Type12
Did not find solution for node: MP1 with type Type12
Did not find solution for node: 0 with type Type103
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: MP2=0
Did not find solution for node: MP2=0 with type Type12
Did not find solution for node: MP2 with type Type12
Did not find solution for node: 0 with type Type103
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: NP1=0
Did not find solution for node: NP1=0 with type Type12
Did not find solution for node: NP1 with type Type12
Did not find solution for node: 0 with type Type103
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: NP2=0
Did not find solution for node: NP2=0 with type Type12
Did not find solution for node: NP2 with type Type12
Did not find solution for node: 0 with type Type103
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: MP1Sum=0
Did not find solution for node: MP1Sum=0 with type Type12
Did not find solution for node: MP1Sum with type Type12
Did not find solution for node: 0 with type Type103
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: MP2Sum=0
Did not find solution for node: MP2Sum=0 with type Type12
Did not find solution for node: MP2Sum with type Type12
Did not find solution for node: 0 with type Type103
For node: M1 <= MP - M2Start && M2 >= M2Start expected fqn: boolean with type: Type140 got: boolean
For node: M1 <= MP - M2Start expected fqn: boolean with type: Type140 got: boolean
Did not find solution for node: M1 with type Type12
Did not find solution for node: MP - M2Start with type Type12
Did not find solution for node: MP with type Type12
Did not find solution for node: M2Start with type Type12
For node: M2 >= M2Start expected fqn: boolean with type: Type140 got: boolean
Did not find solution for node: M2 with type Type12
Did not find solution for node: M2Start with type Type12
Did not find solution for node: N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1) with type Type12
Did not find solution for node: N1 with type Type12
Did not find solution for node: (Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1) with type Type278
Did not find solution for node: (Math.log10(1 - IM1 * L1 / M1) * -1) with type Type278
Did not find solution for node: Math.log10(1 - IM1 * L1 / M1) * -1 with type Type278
Did not find solution for node: Math.log10(1 - IM1 * L1 / M1) with type Type278
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type278
Did not find solution for node: 1 - IM1 * L1 / M1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM1 * L1 / M1 with type Type12
Did not find solution for node: IM1 * L1 with type Type12
Did not find solution for node: IM1 with type Type12
Did not find solution for node: L1 with type Type12
Did not find solution for node: M1 with type Type12
Did not find solution for node: -1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: Math.log10(1 + IM1) with type Type278
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type278
Did not find solution for node: 1 + IM1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM1 with type Type12
Did not find solution for node: M1Sum=N1 * M1 with type Type12
Did not find solution for node: M1Sum with type Type12
Did not find solution for node: N1 * M1 with type Type12
Did not find solution for node: N1 with type Type12
Did not find solution for node: M1 with type Type12
Did not find solution for node: N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2) with type Type12
Did not find solution for node: N2 with type Type12
Did not find solution for node: (Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2) with type Type278
Did not find solution for node: (Math.log10(1 - IM2 * L2 / M2) * -1) with type Type278
Did not find solution for node: Math.log10(1 - IM2 * L2 / M2) * -1 with type Type278
Did not find solution for node: Math.log10(1 - IM2 * L2 / M2) with type Type278
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type278
Did not find solution for node: 1 - IM2 * L2 / M2 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM2 * L2 / M2 with type Type12
Did not find solution for node: IM2 * L2 with type Type12
Did not find solution for node: IM2 with type Type12
Did not find solution for node: L2 with type Type12
Did not find solution for node: M2 with type Type12
Did not find solution for node: -1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: Math.log10(1 + IM2) with type Type278
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type278
Did not find solution for node: 1 + IM2 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM2 with type Type12
Did not find solution for node: M2Sum=N2 * M2 with type Type12
Did not find solution for node: M2Sum with type Type12
Did not find solution for node: N2 * M2 with type Type12
Did not find solution for node: N2 with type Type12
Did not find solution for node: M2 with type Type12
Did not find solution for node: MTotal=M1Sum + M2Sum with type Type12
Did not find solution for node: MTotal with type Type12
Did not find solution for node: M1Sum + M2Sum with type Type12
Did not find solution for node: M1Sum with type Type12
Did not find solution for node: M2Sum with type Type12
For node: MTotal < minLoop expected fqn: boolean with type: Type140 got: boolean
Did not find solution for node: MTotal with type Type12
Did not find solution for node: minLoop with type Type12
Did not find solution for node: minLoop=MTotal with type Type12
Did not find solution for node: minLoop with type Type12
Did not find solution for node: MTotal with type Type12
Did not find solution for node: MP1=M1 with type Type12
Did not find solution for node: MP1 with type Type12
Did not find solution for node: M1 with type Type12
Did not find solution for node: MP2=M2 with type Type12
Did not find solution for node: MP2 with type Type12
Did not find solution for node: M2 with type Type12
Did not find solution for node: NP1=N1 with type Type12
Did not find solution for node: NP1 with type Type12
Did not find solution for node: N1 with type Type12
Did not find solution for node: NP2=N2 with type Type12
Did not find solution for node: NP2 with type Type12
Did not find solution for node: N2 with type Type12
Did not find solution for node: MP1Sum=M1Sum with type Type12
Did not find solution for node: MP1Sum with type Type12
Did not find solution for node: M1Sum with type Type12
Did not find solution for node: MP2Sum=M2Sum with type Type12
Did not find solution for node: MP2Sum with type Type12
Did not find solution for node: M2Sum with type Type12
Did not find solution for node: i++ with type Type100
Did not find solution for node: i with type Type100
For node: progressBar.setValue(i) expected fqn: void with type: Type279 got: void
For node: progressBar expected fqn: javax.swing.JProgressBar with type: Type97 got: javax.swing.JProgressBar
Cannot find matching typeVariable for: setValue
For node: setValue expected fqn: void with type: Type279 got: void
Did not find solution for node: i with type Type100
Did not find solution for node: M1=M1 + StepAmt with type Type12
Did not find solution for node: M1 with type Type12
Did not find solution for node: M1 + StepAmt with type Type12
Did not find solution for node: M1 with type Type12
Did not find solution for node: StepAmt with type Type12
Did not find solution for node: M2=MP - M1 with type Type12
Did not find solution for node: M2 with type Type12
Did not find solution for node: MP - M1 with type Type12
Did not find solution for node: MP with type Type12
Did not find solution for node: M1 with type Type12
Did not find solution for node: M1Sum=0 with type Type12
Did not find solution for node: M1Sum with type Type12
Did not find solution for node: 0 with type Type103
Did not find solution for node: M2Sum=0 with type Type12
Did not find solution for node: M2Sum with type Type12
Did not find solution for node: 0 with type Type103
For node: System.out.printf("MP1 = %.2f\n",MP1) expected fqn: java.io.PrintStream with type: Type284 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type284 got: java.io.Console
Did not find solution for node: System with type Type282
For node: out expected fqn: java.io.PrintStream with type: Type283 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type284 got: java.io.Console
For node: "MP1 = %.2f\n" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: MP1 with type Type12
For node: System.out.printf("MP2 = %.2f\n",MP2) expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Did not find solution for node: System with type Type282
For node: out expected fqn: java.io.PrintStream with type: Type283 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
For node: "MP2 = %.2f\n" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: MP2 with type Type12
For node: System.out.printf("NP1 = %.2f\n",NP1) expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Did not find solution for node: System with type Type282
For node: out expected fqn: java.io.PrintStream with type: Type283 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
For node: "NP1 = %.2f\n" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: NP1 with type Type12
For node: System.out.printf("NP2 = %.2f\n",NP2) expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Did not find solution for node: System with type Type282
For node: out expected fqn: java.io.PrintStream with type: Type283 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
For node: "NP2 = %.2f\n" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: NP2 with type Type12
For node: System.out.printf("MP1Sum = %.2f\n",MP1Sum) expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Did not find solution for node: System with type Type282
For node: out expected fqn: java.io.PrintStream with type: Type283 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
For node: "MP1Sum = %.2f\n" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: MP1Sum with type Type12
For node: System.out.printf("MP2Sum = %.2f\n",MP2Sum) expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Did not find solution for node: System with type Type282
For node: out expected fqn: java.io.PrintStream with type: Type283 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
For node: "MP2Sum = %.2f\n" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: MP2Sum with type Type12
For node: System.out.printf("MTotal = %.2f\n",minLoop) expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Did not find solution for node: System with type Type282
For node: out expected fqn: java.io.PrintStream with type: Type283 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
For node: "MTotal = %.2f\n" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: minLoop with type Type12
For node: System.out.printf("i = %d\n",i) expected fqn: java.io.PrintStream with type: Type288 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type288 got: java.io.Console
Did not find solution for node: System with type Type282
For node: out expected fqn: java.io.PrintStream with type: Type283 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type288 got: java.io.Console
For node: "i = %d\n" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: i with type Type100
For node: System.out.printf("M1Start = %.2f\n",M1Start) expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Did not find solution for node: System with type Type282
For node: out expected fqn: java.io.PrintStream with type: Type283 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
For node: "M1Start = %.2f\n" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: M1Start with type Type12
For node: System.out.printf("M2Start = %.2f\n",M2Start) expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Did not find solution for node: System with type Type282
For node: out expected fqn: java.io.PrintStream with type: Type283 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
For node: "M2Start = %.2f\n" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: M2Start with type Type12
For node: System.out.printf("MP= %.2f\n",MP) expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
Did not find solution for node: System with type Type282
For node: out expected fqn: java.io.PrintStream with type: Type283 got: java.io.Console
Cannot find matching typeVariable for: printf
For node: printf expected fqn: java.io.PrintStream with type: Type287 got: java.io.Console
For node: "MP= %.2f\n" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: MP with type Type12
For node: C1 > 0 expected fqn: boolean with type: Type140 got: boolean
Did not find solution for node: C1 with type Type12
Did not find solution for node: 0 with type Type103
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1)
Did not find solution for node: CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1) with type Type12
Did not find solution for node: CN1 with type Type12
Did not find solution for node: (Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1) with type Type278
Did not find solution for node: (Math.log10(1 - IM1 * L1 / C1) * -1) with type Type278
Did not find solution for node: Math.log10(1 - IM1 * L1 / C1) * -1 with type Type278
Did not find solution for node: Math.log10(1 - IM1 * L1 / C1) with type Type278
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type278
Did not find solution for node: 1 - IM1 * L1 / C1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM1 * L1 / C1 with type Type12
Did not find solution for node: IM1 * L1 with type Type12
Did not find solution for node: IM1 with type Type12
Did not find solution for node: L1 with type Type12
Did not find solution for node: C1 with type Type12
Did not find solution for node: -1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: Math.log10(1 + IM1) with type Type278
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type278
Did not find solution for node: 1 + IM1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM1 with type Type12
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: CT1=CN1 * C1
Did not find solution for node: CT1=CN1 * C1 with type Type12
Did not find solution for node: CT1 with type Type12
Did not find solution for node: CN1 * C1 with type Type12
Did not find solution for node: CN1 with type Type12
Did not find solution for node: C1 with type Type12
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2)
Did not find solution for node: CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2) with type Type12
Did not find solution for node: CN2 with type Type12
Did not find solution for node: (Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2) with type Type278
Did not find solution for node: (Math.log10(1 - IM2 * L2 / C2) * -1) with type Type278
Did not find solution for node: Math.log10(1 - IM2 * L2 / C2) * -1 with type Type278
Did not find solution for node: Math.log10(1 - IM2 * L2 / C2) with type Type278
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type278
Did not find solution for node: 1 - IM2 * L2 / C2 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM2 * L2 / C2 with type Type12
Did not find solution for node: IM2 * L2 with type Type12
Did not find solution for node: IM2 with type Type12
Did not find solution for node: L2 with type Type12
Did not find solution for node: C2 with type Type12
Did not find solution for node: -1 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: Math.log10(1 + IM2) with type Type278
For node: Math expected fqn: java.lang.Math with type: Type275 got: java.lang.Math
Cannot find matching typeVariable for: log10
Did not find solution for node: log10 with type Type278
Did not find solution for node: 1 + IM2 with type Type103
Did not find solution for node: 1 with type Type103
Did not find solution for node: IM2 with type Type12
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: CT2=CN2 * C2
Did not find solution for node: CT2=CN2 * C2 with type Type12
Did not find solution for node: CT2 with type Type12
Did not find solution for node: CN2 * C2 with type Type12
Did not find solution for node: CN2 with type Type12
Did not find solution for node: C2 with type Type12
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: CTotal=CT1 + CT2
Did not find solution for node: CTotal=CT1 + CT2 with type Type12
Did not find solution for node: CTotal with type Type12
Did not find solution for node: CT1 + CT2 with type Type12
Did not find solution for node: CT1 with type Type12
Did not find solution for node: CT2 with type Type12
Did not find solution for node: amountSaved=CTotal - minLoop with type Type12
Did not find solution for node: amountSaved with type Type12
Did not find solution for node: CTotal - minLoop with type Type12
Did not find solution for node: CTotal with type Type12
Did not find solution for node: minLoop with type Type12
Did not find solution for node: null with type Type292
For node: @Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: Override expected fqn: java.lang.Override with type: Type149 got: java.lang.Override
For node: void expected fqn: void with type: Type10 got: void
Cannot find matching typeVariable for: done
Cannot find matching typeVariable for: @Override protected void done(){
  label.setBounds(133,35,200,25);
  label.setText("Done!");
}

Cannot find matching typeVariable for: public class TwoWorker extends SwingWorker<Double,Double> {
  private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
  public TwoWorker(  double MPa,  double StepAmta,  double L1a,  double L2a,  double C1a,  double C2a,  double IM1a,  double IM2a,  double M1Starta,  double M2Starta){
    MP=MPa;
    StepAmt=StepAmta;
    L1=L1a;
    L2=L2a;
    C1=C1a;
    C2=C2a;
    IM1=IM1a;
    IM2=IM2a;
    M1Start=M1Starta;
    M2Start=M2Starta;
  }
  @Override protected Double doInBackground(){
    double M1=M1Start;
    double M2=M2Start;
    double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
    double M1Sum=M1 * N1;
    double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
    double M2Sum=M2 * N2;
    double minLoop=M1Sum + M2Sum;
    double MTotal=0;
    double MP1=0;
    double MP2=0;
    double NP1=0;
    double NP2=0;
    double MP1Sum=0;
    double MP2Sum=0;
    while (M1 <= MP - M2Start && M2 >= M2Start) {
      N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      M1Sum=N1 * M1;
      N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      M2Sum=N2 * M2;
      MTotal=M1Sum + M2Sum;
      if (MTotal < minLoop) {
        minLoop=MTotal;
        MP1=M1;
        MP2=M2;
        NP1=N1;
        NP2=N2;
        MP1Sum=M1Sum;
        MP2Sum=M2Sum;
      }
      i++;
      progressBar.setValue(i);
      M1=M1 + StepAmt;
      M2=MP - M1;
      M1Sum=0;
      M2Sum=0;
    }
    System.out.printf("MP1 = %.2f\n",MP1);
    System.out.printf("MP2 = %.2f\n",MP2);
    System.out.printf("NP1 = %.2f\n",NP1);
    System.out.printf("NP2 = %.2f\n",NP2);
    System.out.printf("MP1Sum = %.2f\n",MP1Sum);
    System.out.printf("MP2Sum = %.2f\n",MP2Sum);
    System.out.printf("MTotal = %.2f\n",minLoop);
    System.out.printf("i = %d\n",i);
    System.out.printf("M1Start = %.2f\n",M1Start);
    System.out.printf("M2Start = %.2f\n",M2Start);
    System.out.printf("MP= %.2f\n",MP);
    if (C1 > 0) {
      double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
      double CT1=CN1 * C1;
      double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
      double CT2=CN2 * C2;
      double CTotal=CT1 + CT2;
      amountSaved=CTotal - minLoop;
    }
    return null;
  }
  @Override protected void done(){
    label.setBounds(133,35,200,25);
    label.setText("Done!");
  }
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

For node: label.setBounds(133,35,200,25) expected fqn: void with type: Type293 got: void
For node: label expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
Cannot find matching typeVariable for: setBounds
For node: setBounds expected fqn: void with type: Type293 got: void
For node: 133 expected fqn: int with type: Type131 got: short
Did not find solution for node: 35 with type Type103
For node: 200 expected fqn: int with type: Type131 got: short
Did not find solution for node: 25 with type Type103
For node: label.setText("Done!") expected fqn: void with type: Type299 got: void
For node: label expected fqn: javax.swing.JLabel with type: Type98 got: javax.swing.JLabel
Cannot find matching typeVariable for: setText
For node: setText expected fqn: void with type: Type299 got: void
For node: "Done!" expected fqn: java.lang.String with type: Type102 got: java.lang.String
Did not find solution for node: double with type Type12
Cannot find matching typeVariable for: savedReturn
Cannot find matching typeVariable for: public double savedReturn(){
  return amountSaved;
}

Cannot find matching typeVariable for: public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Cannot find matching typeVariable for: package Class_;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;
public class Class_22 {
public class TwoRoot extends JFrame {
    private static final String s="0.000000000000000";
    private JProgressBar progressBar=new JProgressBar(0,100);
    private JLabel label=new JLabel(s,JLabel.CENTER);
    public TwoRoot(){
      this.setLayout(new GridLayout(0,1));
      this.setTitle("???2");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.add(progressBar);
      this.add(label);
      this.setSize(161,100);
      this.setLocationRelativeTo(null);
      this.setVisible(true);
    }
    public void runCalc(){
      progressBar.setIndeterminate(true);
      TwoWorker task=new TwoWorker();
      task.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent e){
          if ("progress".equals(e.getPropertyName())) {
            progressBar.setIndeterminate(false);
            progressBar.setValue((Integer)e.getNewValue());
          }
        }
      }
);
      task.execute();
    }
private class TwoWorker extends SwingWorker<Double,Double> {
      private static final int N=5;
      private final DecimalFormat df=new DecimalFormat(s);
      double x=1;
      @Override protected Double doInBackground() throws Exception {
        for (int i=1; i <= N; i++) {
          x=x - (((x * x - 2) / (2 * x)));
          setProgress(i * (100 / N));
          publish(Double.valueOf(x));
          Thread.sleep(1000);
        }
        return Double.valueOf(x);
      }
      @Override protected void process(      List<Double> chunks){
        for (        double d : chunks) {
          label.setText(df.format(d));
        }
      }
    }
    public void main(    String[] args){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          TwoRoot t=new TwoRoot();
          t.runCalc();
        }
      }
);
    }
  }
  JFrame progressFrame;
  JProgressBar progressBar;
  JLabel label=new JLabel("Calculating...");
  Container pane;
  double amountSaved=0;
  int i=0;
  int iterations;
  public void createGui(  int iterations){
    progressFrame=new JFrame("Calculation Progress");
    progressFrame.setSize(300,100);
    pane=progressFrame.getContentPane();
    pane.setLayout(null);
    label=new JLabel("Calculating...");
    label.setBounds(115,35,200,25);
    progressBar=new JProgressBar(0,iterations);
    progressBar.setBounds(10,10,280,20);
    progressBar.setStringPainted(true);
    pane.add(progressBar);
    pane.add(label);
    progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    progressFrame.setResizable(false);
    progressFrame.setLocationRelativeTo(null);
    progressFrame.setVisible(true);
  }
  public void runCalcs(  double MP,  double StepAmt,  double L1,  double L2,  double C1,  double C2,  double IM1,  double IM2,  double M1Start,  double M2Start){
    progressBar.setIndeterminate(false);
    TwoWorker task=new TwoWorker(MP,StepAmt,L1,L2,C1,C2,IM1,IM2,M1Start,M2Start);
    task.addPropertyChangeListener(new PropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent e){
        if ("progress".equals(e.getPropertyName())) {
          progressBar.setIndeterminate(false);
          progressBar.setValue((Integer)e.getNewValue());
        }
      }
    }
);
    task.execute();
  }
public class TwoWorker extends SwingWorker<Double,Double> {
    private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;
    public TwoWorker(    double MPa,    double StepAmta,    double L1a,    double L2a,    double C1a,    double C2a,    double IM1a,    double IM2a,    double M1Starta,    double M2Starta){
      MP=MPa;
      StepAmt=StepAmta;
      L1=L1a;
      L2=L2a;
      C1=C1a;
      C2=C2a;
      IM1=IM1a;
      IM2=IM2a;
      M1Start=M1Starta;
      M2Start=M2Starta;
    }
    @Override protected Double doInBackground(){
      double M1=M1Start;
      double M2=M2Start;
      double N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
      double M1Sum=M1 * N1;
      double N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
      double M2Sum=M2 * N2;
      double minLoop=M1Sum + M2Sum;
      double MTotal=0;
      double MP1=0;
      double MP2=0;
      double NP1=0;
      double NP2=0;
      double MP1Sum=0;
      double MP2Sum=0;
      while (M1 <= MP - M2Start && M2 >= M2Start) {
        N1=(Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
        M1Sum=N1 * M1;
        N2=(Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
        M2Sum=N2 * M2;
        MTotal=M1Sum + M2Sum;
        if (MTotal < minLoop) {
          minLoop=MTotal;
          MP1=M1;
          MP2=M2;
          NP1=N1;
          NP2=N2;
          MP1Sum=M1Sum;
          MP2Sum=M2Sum;
        }
        i++;
        progressBar.setValue(i);
        M1=M1 + StepAmt;
        M2=MP - M1;
        M1Sum=0;
        M2Sum=0;
      }
      System.out.printf("MP1 = %.2f\n",MP1);
      System.out.printf("MP2 = %.2f\n",MP2);
      System.out.printf("NP1 = %.2f\n",NP1);
      System.out.printf("NP2 = %.2f\n",NP2);
      System.out.printf("MP1Sum = %.2f\n",MP1Sum);
      System.out.printf("MP2Sum = %.2f\n",MP2Sum);
      System.out.printf("MTotal = %.2f\n",minLoop);
      System.out.printf("i = %d\n",i);
      System.out.printf("M1Start = %.2f\n",M1Start);
      System.out.printf("M2Start = %.2f\n",M2Start);
      System.out.printf("MP= %.2f\n",MP);
      if (C1 > 0) {
        double CN1=(Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
        double CT1=CN1 * C1;
        double CN2=(Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
        double CT2=CN2 * C2;
        double CTotal=CT1 + CT2;
        amountSaved=CTotal - minLoop;
      }
      return null;
    }
    @Override protected void done(){
      label.setBounds(133,35,200,25);
      label.setText("Done!");
    }
  }
  public double savedReturn(){
    return amountSaved;
  }
}

Did not find solution for node: amountSaved with type Type12
{Checked=906, Analyzed=292, Unsolved=614, Incorrect=63, Correct=229}
=ClassInstanceCreation: {Checked=6, Analyzed=1, Unsolved=5, Incorrect=1, Correct=0}
=SimpleName: {Checked=18, Analyzed=0, Unsolved=18, Incorrect=0, Correct=0}
=SimpleType: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
=ThisExpression: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
boolean=InfixExpression: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
boolean=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
double=Assignment: {Checked=28, Analyzed=0, Unsolved=28, Incorrect=0, Correct=0}
double=InfixExpression: {Checked=54, Analyzed=0, Unsolved=54, Incorrect=0, Correct=0}
double=MethodInvocation: {Checked=12, Analyzed=0, Unsolved=12, Incorrect=0, Correct=0}
double=ParenthesizedExpression: {Checked=10, Analyzed=0, Unsolved=10, Incorrect=0, Correct=0}
double=PrimitiveType: {Checked=44, Analyzed=0, Unsolved=44, Incorrect=0, Correct=0}
double=SimpleName: {Checked=185, Analyzed=0, Unsolved=185, Incorrect=0, Correct=0}
double=SingleVariableDeclaration: {Checked=21, Analyzed=0, Unsolved=21, Incorrect=0, Correct=0}
double=VariableDeclarationFragment: {Checked=31, Analyzed=0, Unsolved=31, Incorrect=0, Correct=0}
int=InfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=58, Analyzed=7, Unsolved=51, Incorrect=7, Correct=0}
int=ParenthesizedExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PostfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=2, Correct=0}
int=SimpleName: {Checked=16, Analyzed=3, Unsolved=13, Incorrect=0, Correct=3}
int=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=CastExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=8, Analyzed=7, Unsolved=1, Incorrect=0, Correct=7}
java=MarkerAnnotation: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
java=MethodInvocation: {Checked=23, Analyzed=16, Unsolved=7, Incorrect=13, Correct=3}
java=ParameterizedType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=11, Correct=0}
java=SimpleName: {Checked=153, Analyzed=117, Unsolved=36, Incorrect=25, Correct=92}
java=SimpleType: {Checked=36, Analyzed=22, Unsolved=14, Incorrect=1, Correct=21}
java=SingleVariableDeclaration: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
java=StringLiteral: {Checked=19, Analyzed=19, Unsolved=0, Incorrect=0, Correct=19}
java=VariableDeclarationFragment: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
null=NullLiteral: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=2, Correct=0}
void=MethodInvocation: {Checked=34, Analyzed=20, Unsolved=14, Incorrect=0, Correct=20}
void=PrimitiveType: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
void=SimpleName: {Checked=37, Analyzed=21, Unsolved=16, Incorrect=1, Correct=20}
Total stats
{Checked=906, Analyzed=292, Unsolved=614, Incorrect=63, Correct=229}
=ClassInstanceCreation: {Checked=6, Analyzed=1, Unsolved=5, Incorrect=1, Correct=0}
=SimpleName: {Checked=18, Analyzed=0, Unsolved=18, Incorrect=0, Correct=0}
=SimpleType: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
=ThisExpression: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
=VariableDeclarationFragment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
boolean=InfixExpression: {Checked=6, Analyzed=6, Unsolved=0, Incorrect=0, Correct=6}
boolean=MethodInvocation: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
boolean=SimpleName: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
double=Assignment: {Checked=28, Analyzed=0, Unsolved=28, Incorrect=0, Correct=0}
double=InfixExpression: {Checked=54, Analyzed=0, Unsolved=54, Incorrect=0, Correct=0}
double=MethodInvocation: {Checked=12, Analyzed=0, Unsolved=12, Incorrect=0, Correct=0}
double=ParenthesizedExpression: {Checked=10, Analyzed=0, Unsolved=10, Incorrect=0, Correct=0}
double=PrimitiveType: {Checked=44, Analyzed=0, Unsolved=44, Incorrect=0, Correct=0}
double=SimpleName: {Checked=185, Analyzed=0, Unsolved=185, Incorrect=0, Correct=0}
double=SingleVariableDeclaration: {Checked=21, Analyzed=0, Unsolved=21, Incorrect=0, Correct=0}
double=VariableDeclarationFragment: {Checked=31, Analyzed=0, Unsolved=31, Incorrect=0, Correct=0}
int=InfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=58, Analyzed=7, Unsolved=51, Incorrect=7, Correct=0}
int=ParenthesizedExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PostfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=5, Analyzed=0, Unsolved=5, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=2, Correct=0}
int=SimpleName: {Checked=16, Analyzed=3, Unsolved=13, Incorrect=0, Correct=3}
int=SingleVariableDeclaration: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
java=ArrayType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=Assignment: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
java=CastExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=8, Analyzed=7, Unsolved=1, Incorrect=0, Correct=7}
java=MarkerAnnotation: {Checked=7, Analyzed=7, Unsolved=0, Incorrect=0, Correct=7}
java=MethodInvocation: {Checked=23, Analyzed=16, Unsolved=7, Incorrect=13, Correct=3}
java=ParameterizedType: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=11, Correct=0}
java=SimpleName: {Checked=153, Analyzed=117, Unsolved=36, Incorrect=25, Correct=92}
java=SimpleType: {Checked=36, Analyzed=22, Unsolved=14, Incorrect=1, Correct=21}
java=SingleVariableDeclaration: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=0, Correct=2}
java=StringLiteral: {Checked=19, Analyzed=19, Unsolved=0, Incorrect=0, Correct=19}
java=VariableDeclarationFragment: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
null=NullLiteral: {Checked=4, Analyzed=2, Unsolved=2, Incorrect=2, Correct=0}
void=MethodInvocation: {Checked=34, Analyzed=20, Unsolved=14, Incorrect=0, Correct=20}
void=PrimitiveType: {Checked=9, Analyzed=9, Unsolved=0, Incorrect=0, Correct=9}
void=SimpleName: {Checked=37, Analyzed=21, Unsolved=16, Incorrect=1, Correct=20}
,ClassInstanceCreation,1,6,0,1,5
,SimpleName,0,18,0,0,18
,SimpleType,0,6,0,0,6
,ThisExpression,0,8,0,0,8
,VariableDeclarationFragment,0,3,0,0,3
boolean,BooleanLiteral,8,8,8,0,0
boolean,InfixExpression,6,6,6,0,0
boolean,MethodInvocation,0,2,0,0,2
boolean,SimpleName,0,2,0,0,2
double,Assignment,0,28,0,0,28
double,InfixExpression,0,54,0,0,54
double,MethodInvocation,0,12,0,0,12
double,ParenthesizedExpression,0,10,0,0,10
double,PrimitiveType,0,44,0,0,44
double,SimpleName,0,185,0,0,185
double,SingleVariableDeclaration,0,21,0,0,21
double,VariableDeclarationFragment,0,31,0,0,31
int,InfixExpression,0,2,0,0,2
int,NumberLiteral,7,58,0,7,51
int,ParenthesizedExpression,0,1,0,0,1
int,PostfixExpression,0,2,0,0,2
int,PrefixExpression,0,6,0,0,6
int,PrimitiveType,0,5,0,0,5
int,QualifiedName,2,3,0,2,1
int,SimpleName,3,16,3,0,13
int,SingleVariableDeclaration,0,1,0,0,1
int,VariableDeclarationExpression,0,1,0,0,1
int,VariableDeclarationFragment,0,4,0,0,4
java,ArrayType,0,1,0,0,1
java,Assignment,4,4,4,0,0
java,CastExpression,0,2,0,0,2
java,ClassInstanceCreation,7,8,7,0,1
java,MarkerAnnotation,7,7,7,0,0
java,MethodInvocation,16,23,3,13,7
java,ParameterizedType,0,3,0,0,3
java,QualifiedName,11,11,0,11,0
java,SimpleName,117,153,92,25,36
java,SimpleType,22,36,21,1,14
java,SingleVariableDeclaration,2,4,2,0,2
java,StringLiteral,19,19,19,0,0
java,VariableDeclarationFragment,8,8,8,0,0
null,NullLiteral,2,4,0,2,2
void,MethodInvocation,20,34,20,0,14
void,PrimitiveType,9,9,9,0,0
void,SimpleName,21,37,20,1,16
