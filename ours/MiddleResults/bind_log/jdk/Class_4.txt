echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/Class_4.java
Expect check=191
Cannot find matching typeVariable for: class Class_4 {
  private static Pattern twopart=Pattern.compile("(\\d+)-(\\d+)");
  public static void checkString(  String s){
    Matcher m=twopart.matcher(s);
    if (m.matches()) {
      System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
    }
 else {
      System.out.println(s + " does not match.");
    }
  }
  public static void main(  String[] args){
    checkString("123-4567");
    checkString("foo-bar");
    checkString("123-");
    checkString("-4567");
    checkString("123-4567-890");
  }
  public static String[] mySplit(  String text,  String delimiter){
    List<String> parts=new ArrayList<String>();
    text+=delimiter;
    for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
      String temp=text.substring(j,i);
      if (temp.trim().length() != 0) {
        parts.add(temp);
      }
      j=i + delimiter.length();
      i=text.indexOf(delimiter,j);
    }
    return parts.toArray(new String[0]);
  }
  public static void main_2(){
    String str="004-034556";
    String delimiter="-";
    String result[]=mySplit(str,delimiter);
    for (    String s : result)     System.out.println(s);
  }
}

Did not find solution for node: Class_4 with type Type1
Did not find solution for node: Pattern with type Type5
Did not find solution for node: Pattern with type Type5
Cannot find matching typeVariable for: twopart=Pattern.compile("(\\d+)-(\\d+)")
Did not find solution for node: twopart=Pattern.compile("(\\d+)-(\\d+)") with type Type5
Did not find solution for node: twopart with type Type5
Did not find solution for node: Pattern.compile("(\\d+)-(\\d+)") with type Type7
Did not find solution for node: Pattern with type Type5
Cannot find matching typeVariable for: compile
Did not find solution for node: compile with type Type7
Did not find solution for node: "(\\d+)-(\\d+)" with type Type6
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: checkString
Cannot find matching typeVariable for: public static void checkString(String s){
  Matcher m=twopart.matcher(s);
  if (m.matches()) {
    System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
  }
 else {
    System.out.println(s + " does not match.");
  }
}

Cannot find matching typeVariable for: class Class_4 {
  private static Pattern twopart=Pattern.compile("(\\d+)-(\\d+)");
  public static void checkString(  String s){
    Matcher m=twopart.matcher(s);
    if (m.matches()) {
      System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
    }
 else {
      System.out.println(s + " does not match.");
    }
  }
  public static void main(  String[] args){
    checkString("123-4567");
    checkString("foo-bar");
    checkString("123-");
    checkString("-4567");
    checkString("123-4567-890");
  }
  public static String[] mySplit(  String text,  String delimiter){
    List<String> parts=new ArrayList<String>();
    text+=delimiter;
    for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
      String temp=text.substring(j,i);
      if (temp.trim().length() != 0) {
        parts.add(temp);
      }
      j=i + delimiter.length();
      i=text.indexOf(delimiter,j);
    }
    return parts.toArray(new String[0]);
  }
  public static void main_2(){
    String str="004-034556";
    String delimiter="-";
    String result[]=mySplit(str,delimiter);
    for (    String s : result)     System.out.println(s);
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
class Class_4 {
  private static Pattern twopart=Pattern.compile("(\\d+)-(\\d+)");
  public static void checkString(  String s){
    Matcher m=twopart.matcher(s);
    if (m.matches()) {
      System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
    }
 else {
      System.out.println(s + " does not match.");
    }
  }
  public static void main(  String[] args){
    checkString("123-4567");
    checkString("foo-bar");
    checkString("123-");
    checkString("-4567");
    checkString("123-4567-890");
  }
  public static String[] mySplit(  String text,  String delimiter){
    List<String> parts=new ArrayList<String>();
    text+=delimiter;
    for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
      String temp=text.substring(j,i);
      if (temp.trim().length() != 0) {
        parts.add(temp);
      }
      j=i + delimiter.length();
      i=text.indexOf(delimiter,j);
    }
    return parts.toArray(new String[0]);
  }
  public static void main_2(){
    String str="004-034556";
    String delimiter="-";
    String result[]=mySplit(str,delimiter);
    for (    String s : result)     System.out.println(s);
  }
}

Cannot find matching typeVariable for: String s
Did not find solution for node: String s with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: s with type Type6
For node: Matcher expected fqn: java.util.regex.Matcher with type: Type10 got: java.util.regex.Matcher
For node: Matcher expected fqn: java.util.regex.Matcher with type: Type10 got: java.util.regex.Matcher
Cannot find matching typeVariable for: m=twopart.matcher(s)
For node: m=twopart.matcher(s) expected fqn: java.util.regex.Matcher with type: Type10 got: java.util.regex.Matcher
For node: m expected fqn: java.util.regex.Matcher with type: Type10 got: java.util.regex.Matcher
For node: twopart.matcher(s) expected fqn: java.util.regex.Matcher with type: Type11 got: java.util.regex.Matcher
Did not find solution for node: twopart with type Type5
Cannot find matching typeVariable for: matcher
For node: matcher expected fqn: java.util.regex.Matcher with type: Type11 got: java.util.regex.Matcher
Did not find solution for node: s with type Type6
For node: m.matches() expected fqn: boolean with type: Type14 got: boolean
For node: m expected fqn: java.util.regex.Matcher with type: Type10 got: java.util.regex.Matcher
Cannot find matching typeVariable for: matches
For node: matches expected fqn: boolean with type: Type14 got: boolean
For node: System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".") expected fqn: void with type: Type22 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type22 got: void
For node: System expected fqn: java.lang.System with type: Type20 got: java.lang.System
Did not find solution for node: out with type Type21
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type22 got: void
Did not find solution for node: s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ "." with type Type6
Did not find solution for node: s with type Type6
Did not find solution for node: " matches; first part is " with type Type6
For node: m.group(0) expected fqn: java.lang.String with type: Type17 got: java.lang.String
For node: m expected fqn: java.util.regex.Matcher with type: Type10 got: java.util.regex.Matcher
Cannot find matching typeVariable for: group
For node: group expected fqn: java.lang.String with type: Type17 got: java.lang.String
Did not find solution for node: 0 with type Type16
Did not find solution for node: ", second part is " with type Type6
For node: m.group(1) expected fqn: java.lang.String with type: Type19 got: java.lang.String
For node: m expected fqn: java.util.regex.Matcher with type: Type10 got: java.util.regex.Matcher
Cannot find matching typeVariable for: group
For node: group expected fqn: java.lang.String with type: Type19 got: java.lang.String
Did not find solution for node: 1 with type Type16
Did not find solution for node: "." with type Type6
For node: System.out.println(s + " does not match.") expected fqn: void with type: Type27 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type27 got: void
For node: System expected fqn: java.lang.System with type: Type25 got: java.lang.System
Did not find solution for node: out with type Type26
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type27 got: void
Did not find solution for node: s + " does not match." with type Type6
Did not find solution for node: s with type Type6
Did not find solution for node: " does not match." with type Type6
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static void main(String[] args){
  checkString("123-4567");
  checkString("foo-bar");
  checkString("123-");
  checkString("-4567");
  checkString("123-4567-890");
}

Cannot find matching typeVariable for: class Class_4 {
  private static Pattern twopart=Pattern.compile("(\\d+)-(\\d+)");
  public static void checkString(  String s){
    Matcher m=twopart.matcher(s);
    if (m.matches()) {
      System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
    }
 else {
      System.out.println(s + " does not match.");
    }
  }
  public static void main(  String[] args){
    checkString("123-4567");
    checkString("foo-bar");
    checkString("123-");
    checkString("-4567");
    checkString("123-4567-890");
  }
  public static String[] mySplit(  String text,  String delimiter){
    List<String> parts=new ArrayList<String>();
    text+=delimiter;
    for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
      String temp=text.substring(j,i);
      if (temp.trim().length() != 0) {
        parts.add(temp);
      }
      j=i + delimiter.length();
      i=text.indexOf(delimiter,j);
    }
    return parts.toArray(new String[0]);
  }
  public static void main_2(){
    String str="004-034556";
    String delimiter="-";
    String result[]=mySplit(str,delimiter);
    for (    String s : result)     System.out.println(s);
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
class Class_4 {
  private static Pattern twopart=Pattern.compile("(\\d+)-(\\d+)");
  public static void checkString(  String s){
    Matcher m=twopart.matcher(s);
    if (m.matches()) {
      System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
    }
 else {
      System.out.println(s + " does not match.");
    }
  }
  public static void main(  String[] args){
    checkString("123-4567");
    checkString("foo-bar");
    checkString("123-");
    checkString("-4567");
    checkString("123-4567-890");
  }
  public static String[] mySplit(  String text,  String delimiter){
    List<String> parts=new ArrayList<String>();
    text+=delimiter;
    for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
      String temp=text.substring(j,i);
      if (temp.trim().length() != 0) {
        parts.add(temp);
      }
      j=i + delimiter.length();
      i=text.indexOf(delimiter,j);
    }
    return parts.toArray(new String[0]);
  }
  public static void main_2(){
    String str="004-034556";
    String delimiter="-";
    String result[]=mySplit(str,delimiter);
    for (    String s : result)     System.out.println(s);
  }
}

Cannot find matching typeVariable for: String[] args
For node: String[] args expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
For node: args expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: checkString("123-4567") expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: checkString
For node: checkString expected fqn: void with type: Type2 got: void
Did not find solution for node: "123-4567" with type Type6
For node: checkString("foo-bar") expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: checkString
For node: checkString expected fqn: void with type: Type2 got: void
Did not find solution for node: "foo-bar" with type Type6
For node: checkString("123-") expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: checkString
For node: checkString expected fqn: void with type: Type2 got: void
Did not find solution for node: "123-" with type Type6
For node: checkString("-4567") expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: checkString
For node: checkString expected fqn: void with type: Type2 got: void
Did not find solution for node: "-4567" with type Type6
For node: checkString("123-4567-890") expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: checkString
For node: checkString expected fqn: void with type: Type2 got: void
Did not find solution for node: "123-4567-890" with type Type6
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type3 got: java.lang.String
Cannot find matching typeVariable for: mySplit
Cannot find matching typeVariable for: public static String[] mySplit(String text,String delimiter){
  List<String> parts=new ArrayList<String>();
  text+=delimiter;
  for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
    String temp=text.substring(j,i);
    if (temp.trim().length() != 0) {
      parts.add(temp);
    }
    j=i + delimiter.length();
    i=text.indexOf(delimiter,j);
  }
  return parts.toArray(new String[0]);
}

Cannot find matching typeVariable for: class Class_4 {
  private static Pattern twopart=Pattern.compile("(\\d+)-(\\d+)");
  public static void checkString(  String s){
    Matcher m=twopart.matcher(s);
    if (m.matches()) {
      System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
    }
 else {
      System.out.println(s + " does not match.");
    }
  }
  public static void main(  String[] args){
    checkString("123-4567");
    checkString("foo-bar");
    checkString("123-");
    checkString("-4567");
    checkString("123-4567-890");
  }
  public static String[] mySplit(  String text,  String delimiter){
    List<String> parts=new ArrayList<String>();
    text+=delimiter;
    for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
      String temp=text.substring(j,i);
      if (temp.trim().length() != 0) {
        parts.add(temp);
      }
      j=i + delimiter.length();
      i=text.indexOf(delimiter,j);
    }
    return parts.toArray(new String[0]);
  }
  public static void main_2(){
    String str="004-034556";
    String delimiter="-";
    String result[]=mySplit(str,delimiter);
    for (    String s : result)     System.out.println(s);
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
class Class_4 {
  private static Pattern twopart=Pattern.compile("(\\d+)-(\\d+)");
  public static void checkString(  String s){
    Matcher m=twopart.matcher(s);
    if (m.matches()) {
      System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
    }
 else {
      System.out.println(s + " does not match.");
    }
  }
  public static void main(  String[] args){
    checkString("123-4567");
    checkString("foo-bar");
    checkString("123-");
    checkString("-4567");
    checkString("123-4567-890");
  }
  public static String[] mySplit(  String text,  String delimiter){
    List<String> parts=new ArrayList<String>();
    text+=delimiter;
    for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
      String temp=text.substring(j,i);
      if (temp.trim().length() != 0) {
        parts.add(temp);
      }
      j=i + delimiter.length();
      i=text.indexOf(delimiter,j);
    }
    return parts.toArray(new String[0]);
  }
  public static void main_2(){
    String str="004-034556";
    String delimiter="-";
    String result[]=mySplit(str,delimiter);
    for (    String s : result)     System.out.println(s);
  }
}

Cannot find matching typeVariable for: String text
Did not find solution for node: String text with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: text with type Type6
Cannot find matching typeVariable for: String delimiter
Did not find solution for node: String delimiter with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: delimiter with type Type6
Did not find solution for node: List<String> with type Type31=Type30<Type6>
For node: List expected fqn: java.util.List<java.lang.String> with type: Type30 got: java.util.List
For node: List expected fqn: java.util.List<java.lang.String> with type: Type30 got: java.util.List
Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
Cannot find matching typeVariable for: parts=new ArrayList<String>()
Did not find solution for node: parts=new ArrayList<String>() with type Type31=Type30<Type6>
Did not find solution for node: parts with type Type31=Type30<Type6>
Did not find solution for node: new ArrayList<String>() with type Type33=Type32<Type6>
Did not find solution for node: ArrayList<String> with type Type33=Type32<Type6>
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.String> with type: Type32 got: java.util.ArrayList
For node: ArrayList expected fqn: java.util.ArrayList<java.lang.String> with type: Type32 got: java.util.ArrayList
Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: text+=delimiter with type Type6
Did not find solution for node: text with type Type6
Did not find solution for node: delimiter with type Type6
Cannot find matching typeVariable for: int i=text.indexOf(delimiter), j=0
Did not find solution for node: int i=text.indexOf(delimiter), j=0 with type Type37
Did not find solution for node: int with type Type37
Cannot find matching typeVariable for: i=text.indexOf(delimiter)
Did not find solution for node: i=text.indexOf(delimiter) with type Type37
Did not find solution for node: i with type Type37
Did not find solution for node: text.indexOf(delimiter) with type Type38
Did not find solution for node: text with type Type6
Cannot find matching typeVariable for: indexOf
Did not find solution for node: indexOf with type Type38
Did not find solution for node: delimiter with type Type6
Cannot find matching typeVariable for: j=0
Did not find solution for node: j=0 with type Type37
Did not find solution for node: j with type Type37
Did not find solution for node: 0 with type Type16
For node: i != -1 expected fqn: boolean with type: Type42 got: boolean
Did not find solution for node: i with type Type37
Did not find solution for node: -1 with type Type16
Did not find solution for node: 1 with type Type16
Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
Cannot find matching typeVariable for: temp=text.substring(j,i)
Did not find solution for node: temp=text.substring(j,i) with type Type6
Did not find solution for node: temp with type Type6
For node: text.substring(j,i) expected fqn: java.lang.String with type: Type43 got: java.lang.Object
Did not find solution for node: text with type Type6
Cannot find matching typeVariable for: substring
For node: substring expected fqn: java.lang.String with type: Type43 got: java.lang.Object
Did not find solution for node: j with type Type37
Did not find solution for node: i with type Type37
For node: temp.trim().length() != 0 expected fqn: boolean with type: Type42 got: boolean
Did not find solution for node: temp.trim().length() with type Type49
Did not find solution for node: temp.trim() with type Type47
Did not find solution for node: temp with type Type6
Cannot find matching typeVariable for: trim
Did not find solution for node: trim with type Type47
Cannot find matching typeVariable for: length
Did not find solution for node: length with type Type49
Did not find solution for node: 0 with type Type16
Did not find solution for node: parts.add(temp) with type Type51
Did not find solution for node: parts with type Type31=Type30<Type6>
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type51
Did not find solution for node: temp with type Type6
Did not find solution for node: j=i + delimiter.length() with type Type37
Did not find solution for node: j with type Type37
Did not find solution for node: i + delimiter.length() with type Type37
Did not find solution for node: i with type Type37
Did not find solution for node: delimiter.length() with type Type57
Did not find solution for node: delimiter with type Type6
Cannot find matching typeVariable for: length
Did not find solution for node: length with type Type57
Did not find solution for node: i=text.indexOf(delimiter,j) with type Type37
Did not find solution for node: i with type Type37
Did not find solution for node: text.indexOf(delimiter,j) with type Type59
Did not find solution for node: text with type Type6
Cannot find matching typeVariable for: indexOf
Did not find solution for node: indexOf with type Type59
Did not find solution for node: delimiter with type Type6
Did not find solution for node: j with type Type37
For node: parts.toArray(new String[0]) expected fqn: java.lang.String[] with type: Type63 got: java.lang.String[]
Did not find solution for node: parts with type Type31=Type30<Type6>
Cannot find matching typeVariable for: toArray
For node: toArray expected fqn: java.lang.String[] with type: Type63 got: java.lang.String[]
For node: new String[0] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: 0 with type Type16
For node: void expected fqn: void with type: Type2 got: void
Cannot find matching typeVariable for: main_2
Cannot find matching typeVariable for: public static void main_2(){
  String str="004-034556";
  String delimiter="-";
  String result[]=mySplit(str,delimiter);
  for (  String s : result)   System.out.println(s);
}

Cannot find matching typeVariable for: class Class_4 {
  private static Pattern twopart=Pattern.compile("(\\d+)-(\\d+)");
  public static void checkString(  String s){
    Matcher m=twopart.matcher(s);
    if (m.matches()) {
      System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
    }
 else {
      System.out.println(s + " does not match.");
    }
  }
  public static void main(  String[] args){
    checkString("123-4567");
    checkString("foo-bar");
    checkString("123-");
    checkString("-4567");
    checkString("123-4567-890");
  }
  public static String[] mySplit(  String text,  String delimiter){
    List<String> parts=new ArrayList<String>();
    text+=delimiter;
    for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
      String temp=text.substring(j,i);
      if (temp.trim().length() != 0) {
        parts.add(temp);
      }
      j=i + delimiter.length();
      i=text.indexOf(delimiter,j);
    }
    return parts.toArray(new String[0]);
  }
  public static void main_2(){
    String str="004-034556";
    String delimiter="-";
    String result[]=mySplit(str,delimiter);
    for (    String s : result)     System.out.println(s);
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
class Class_4 {
  private static Pattern twopart=Pattern.compile("(\\d+)-(\\d+)");
  public static void checkString(  String s){
    Matcher m=twopart.matcher(s);
    if (m.matches()) {
      System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
    }
 else {
      System.out.println(s + " does not match.");
    }
  }
  public static void main(  String[] args){
    checkString("123-4567");
    checkString("foo-bar");
    checkString("123-");
    checkString("-4567");
    checkString("123-4567-890");
  }
  public static String[] mySplit(  String text,  String delimiter){
    List<String> parts=new ArrayList<String>();
    text+=delimiter;
    for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
      String temp=text.substring(j,i);
      if (temp.trim().length() != 0) {
        parts.add(temp);
      }
      j=i + delimiter.length();
      i=text.indexOf(delimiter,j);
    }
    return parts.toArray(new String[0]);
  }
  public static void main_2(){
    String str="004-034556";
    String delimiter="-";
    String result[]=mySplit(str,delimiter);
    for (    String s : result)     System.out.println(s);
  }
}

Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
Cannot find matching typeVariable for: str="004-034556"
Did not find solution for node: str="004-034556" with type Type6
Did not find solution for node: str with type Type6
Did not find solution for node: "004-034556" with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
Cannot find matching typeVariable for: delimiter="-"
Did not find solution for node: delimiter="-" with type Type6
Did not find solution for node: delimiter with type Type6
Did not find solution for node: "-" with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
Cannot find matching typeVariable for: result[]=mySplit(str,delimiter)
For node: result[]=mySplit(str,delimiter) expected fqn: java.lang.String[] with type: Type69 got: java.lang.Object[]
For node: result expected fqn: java.lang.String[] with type: Type69 got: java.lang.Object[]
For node: mySplit(str,delimiter) expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Cannot find matching typeVariable for: mySplit
For node: mySplit expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Cannot find matching typeVariable for: str
For node: str expected fqn: java.lang.String with type: Type4 got: java.lang.String[]
Cannot find matching typeVariable for: delimiter
For node: delimiter expected fqn: java.lang.String with type: Type4 got: java.lang.String[]
Cannot find matching typeVariable for: String s
Did not find solution for node: String s with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: String with type Type6
Did not find solution for node: s with type Type6
Cannot find matching typeVariable for: result
Cannot find matching typeVariable for: for (String s : result) System.out.println(s);

Cannot find matching typeVariable for: {
  String str="004-034556";
  String delimiter="-";
  String result[]=mySplit(str,delimiter);
  for (  String s : result)   System.out.println(s);
}

Cannot find matching typeVariable for: public static void main_2(){
  String str="004-034556";
  String delimiter="-";
  String result[]=mySplit(str,delimiter);
  for (  String s : result)   System.out.println(s);
}

Cannot find matching typeVariable for: class Class_4 {
  private static Pattern twopart=Pattern.compile("(\\d+)-(\\d+)");
  public static void checkString(  String s){
    Matcher m=twopart.matcher(s);
    if (m.matches()) {
      System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
    }
 else {
      System.out.println(s + " does not match.");
    }
  }
  public static void main(  String[] args){
    checkString("123-4567");
    checkString("foo-bar");
    checkString("123-");
    checkString("-4567");
    checkString("123-4567-890");
  }
  public static String[] mySplit(  String text,  String delimiter){
    List<String> parts=new ArrayList<String>();
    text+=delimiter;
    for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
      String temp=text.substring(j,i);
      if (temp.trim().length() != 0) {
        parts.add(temp);
      }
      j=i + delimiter.length();
      i=text.indexOf(delimiter,j);
    }
    return parts.toArray(new String[0]);
  }
  public static void main_2(){
    String str="004-034556";
    String delimiter="-";
    String result[]=mySplit(str,delimiter);
    for (    String s : result)     System.out.println(s);
  }
}

Cannot find matching typeVariable for: package Class_;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
class Class_4 {
  private static Pattern twopart=Pattern.compile("(\\d+)-(\\d+)");
  public static void checkString(  String s){
    Matcher m=twopart.matcher(s);
    if (m.matches()) {
      System.out.println(s + " matches; first part is " + m.group(0)+ ", second part is "+ m.group(1)+ ".");
    }
 else {
      System.out.println(s + " does not match.");
    }
  }
  public static void main(  String[] args){
    checkString("123-4567");
    checkString("foo-bar");
    checkString("123-");
    checkString("-4567");
    checkString("123-4567-890");
  }
  public static String[] mySplit(  String text,  String delimiter){
    List<String> parts=new ArrayList<String>();
    text+=delimiter;
    for (int i=text.indexOf(delimiter), j=0; i != -1; ) {
      String temp=text.substring(j,i);
      if (temp.trim().length() != 0) {
        parts.add(temp);
      }
      j=i + delimiter.length();
      i=text.indexOf(delimiter,j);
    }
    return parts.toArray(new String[0]);
  }
  public static void main_2(){
    String str="004-034556";
    String delimiter="-";
    String result[]=mySplit(str,delimiter);
    for (    String s : result)     System.out.println(s);
  }
}

For node: System.out.println(s) expected fqn: void with type: Type72 got: void
Cannot find matching typeVariable for: System.out
For node: System.out expected fqn: java.io.PrintStream with type: Type72 got: void
For node: System expected fqn: java.lang.System with type: Type70 got: java.lang.System
Did not find solution for node: out with type Type71
Cannot find matching typeVariable for: println
For node: println expected fqn: void with type: Type72 got: void
Did not find solution for node: s with type Type6
{Checked=185, Analyzed=64, Unsolved=121, Incorrect=13, Correct=51}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
int=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=InfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=SimpleName: {Checked=13, Analyzed=0, Unsolved=13, Incorrect=0, Correct=0}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ArrayCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=InfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=8, Analyzed=6, Unsolved=2, Incorrect=1, Correct=5}
java=ParameterizedType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=3, Correct=0}
java=SimpleName: {Checked=66, Analyzed=21, Unsolved=45, Incorrect=6, Correct=15}
java=SimpleType: {Checked=17, Analyzed=4, Unsolved=13, Incorrect=2, Correct=2}
java=SingleVariableDeclaration: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=12, Analyzed=0, Unsolved=12, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=7, Analyzed=2, Unsolved=5, Incorrect=1, Correct=1}
void=MethodInvocation: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
void=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
Total stats
{Checked=185, Analyzed=64, Unsolved=121, Incorrect=13, Correct=51}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=2, Analyzed=1, Unsolved=1, Incorrect=0, Correct=1}
int=Assignment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=InfixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=MethodInvocation: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
int=NumberLiteral: {Checked=6, Analyzed=0, Unsolved=6, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=SimpleName: {Checked=13, Analyzed=0, Unsolved=13, Incorrect=0, Correct=0}
int=VariableDeclarationExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=ArrayCreation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
java=Assignment: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
java=InfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=MethodInvocation: {Checked=8, Analyzed=6, Unsolved=2, Incorrect=1, Correct=5}
java=ParameterizedType: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
java=QualifiedName: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=3, Correct=0}
java=SimpleName: {Checked=66, Analyzed=21, Unsolved=45, Incorrect=6, Correct=15}
java=SimpleType: {Checked=17, Analyzed=4, Unsolved=13, Incorrect=2, Correct=2}
java=SingleVariableDeclaration: {Checked=5, Analyzed=1, Unsolved=4, Incorrect=0, Correct=1}
java=StringLiteral: {Checked=12, Analyzed=0, Unsolved=12, Incorrect=0, Correct=0}
java=VariableDeclarationFragment: {Checked=7, Analyzed=2, Unsolved=5, Incorrect=1, Correct=1}
void=MethodInvocation: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
void=PrimitiveType: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=0, Correct=3}
void=SimpleName: {Checked=8, Analyzed=8, Unsolved=0, Incorrect=0, Correct=8}
,SimpleName,0,1,0,0,1
boolean,InfixExpression,2,2,2,0,0
boolean,MethodInvocation,1,2,1,0,1
boolean,SimpleName,1,2,1,0,1
int,Assignment,0,2,0,0,2
int,InfixExpression,0,1,0,0,1
int,MethodInvocation,0,4,0,0,4
int,NumberLiteral,0,6,0,0,6
int,PrefixExpression,0,1,0,0,1
int,PrimitiveType,0,1,0,0,1
int,SimpleName,0,13,0,0,13
int,VariableDeclarationExpression,0,1,0,0,1
int,VariableDeclarationFragment,0,2,0,0,2
java,ArrayCreation,1,1,1,0,0
java,ArrayType,3,3,3,0,0
java,Assignment,0,1,0,0,1
java,ClassInstanceCreation,0,1,0,0,1
java,InfixExpression,0,2,0,0,2
java,MethodInvocation,6,8,5,1,2
java,ParameterizedType,0,2,0,0,2
java,QualifiedName,3,3,0,3,0
java,SimpleName,21,66,15,6,45
java,SimpleType,4,17,2,2,13
java,SingleVariableDeclaration,1,5,1,0,4
java,StringLiteral,0,12,0,0,12
java,VariableDeclarationFragment,2,7,1,1,5
void,MethodInvocation,8,8,8,0,0
void,PrimitiveType,3,3,3,0,0
void,SimpleName,8,8,8,0,0
