echo package -Dmaven.test.skip=True
package -Dmaven.test.skip=True
echo 'java ${java_d_options} -cp ./target/snr-server-0.0.1-SNAPSHOT.jar:lib/*:target/lib/* org.javelus.snr.toy.CompareBindingAnalysisAndEclipseJDT "${snr_snippets_folder}" "${snr_library_external}" true false' | ./benchmark/set_env.bash
Processing snippet: /iJTyper/Baseline/SnR/benchmark/../src/test/resources/snippets/so/Class_2.java
Expect check=572
Cannot find matching typeVariable for: class Class_2 {
  public static void main(  String[] args){
    Runnable r=new Runnable(){
      public void run(){
        final JFrame frame=new JFrame("Nested Layout Example");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        final JPanel gui=new JPanel(new BorderLayout(5,5));
        gui.setBorder(new TitledBorder("BorderLayout(5,5)"));
        JPanel plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3));
        plafComponents.setBorder(new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)"));
        final UIManager.LookAndFeelInfo[] plafInfos=UIManager.getInstalledLookAndFeels();
        String[] plafNames=new String[plafInfos.length];
        for (int ii=0; ii < plafInfos.length; ii++) {
          plafNames[ii]=plafInfos[ii].getName();
        }
        final JComboBox plafChooser=new JComboBox(plafNames);
        plafComponents.add(plafChooser);
        final JCheckBox pack=new JCheckBox("Pack on PLAF change",true);
        plafComponents.add(pack);
        plafChooser.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent ae){
            int index=plafChooser.getSelectedIndex();
            try {
              UIManager.setLookAndFeel(plafInfos[index].getClassName());
              SwingUtilities.updateComponentTreeUI(frame);
              if (pack.isSelected()) {
                frame.pack();
                frame.setMinimumSize(frame.getSize());
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
);
        gui.add(plafComponents,BorderLayout.NORTH);
        JPanel dynamicLabels=new JPanel(new BorderLayout(4,4));
        dynamicLabels.setBorder(new TitledBorder("BorderLayout(4,4)"));
        gui.add(dynamicLabels,BorderLayout.WEST);
        final JPanel labels=new JPanel(new GridLayout(0,2,3,3));
        labels.setBorder(new TitledBorder("GridLayout(0,2,3,3)"));
        JButton addNew=new JButton("Add Another Label");
        dynamicLabels.add(addNew,BorderLayout.NORTH);
        addNew.addActionListener(new ActionListener(){
          private int labelCount=0;
          public void actionPerformed(          ActionEvent ae){
            labels.add(new JLabel("Label " + ++labelCount));
            frame.validate();
          }
        }
);
        dynamicLabels.add(new JScrollPane(labels),BorderLayout.CENTER);
        String[] header={"Name","Value"};
        String[] a=new String[0];
        String[] names=System.getProperties().stringPropertyNames().toArray(a);
        String[][] data=new String[names.length][2];
        for (int ii=0; ii < names.length; ii++) {
          data[ii][0]=names[ii];
          data[ii][1]=System.getProperty(names[ii]);
        }
        DefaultTableModel model=new DefaultTableModel(data,header);
        JTable table=new JTable(model);
        try {
          table.setAutoCreateRowSorter(true);
        }
 catch (        Exception continuewithNoSort) {
        }
        JScrollPane tableScroll=new JScrollPane(table);
        Dimension tablePreferred=tableScroll.getPreferredSize();
        tableScroll.setPreferredSize(new Dimension(tablePreferred.width,tablePreferred.height / 3));
        JPanel imagePanel=new JPanel(new GridBagLayout());
        imagePanel.setBorder(new TitledBorder("GridBagLayout()"));
        BufferedImage bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB);
        Graphics2D g=bi.createGraphics();
        GradientPaint gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow);
        g.setPaint(gp);
        g.fillRect(0,0,200,200);
        ImageIcon ii=new ImageIcon(bi);
        JLabel imageLabel=new JLabel(ii);
        imagePanel.add(imageLabel,null);
        JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel));
        gui.add(splitPane,BorderLayout.CENTER);
        frame.setContentPane(gui);
        frame.pack();
        frame.setLocationRelativeTo(null);
        try {
          frame.setLocationByPlatform(true);
          frame.setMinimumSize(frame.getSize());
        }
 catch (        Throwable ignoreAndContinue) {
        }
        frame.setVisible(true);
      }
    }
;
    SwingUtilities.invokeLater(r);
  }
}

Did not find solution for node: Class_2 with type Type1
Did not find solution for node: void with type Type2
Cannot find matching typeVariable for: main
Cannot find matching typeVariable for: public static void main(String[] args){
  Runnable r=new Runnable(){
    public void run(){
      final JFrame frame=new JFrame("Nested Layout Example");
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      final JPanel gui=new JPanel(new BorderLayout(5,5));
      gui.setBorder(new TitledBorder("BorderLayout(5,5)"));
      JPanel plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3));
      plafComponents.setBorder(new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)"));
      final UIManager.LookAndFeelInfo[] plafInfos=UIManager.getInstalledLookAndFeels();
      String[] plafNames=new String[plafInfos.length];
      for (int ii=0; ii < plafInfos.length; ii++) {
        plafNames[ii]=plafInfos[ii].getName();
      }
      final JComboBox plafChooser=new JComboBox(plafNames);
      plafComponents.add(plafChooser);
      final JCheckBox pack=new JCheckBox("Pack on PLAF change",true);
      plafComponents.add(pack);
      plafChooser.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent ae){
          int index=plafChooser.getSelectedIndex();
          try {
            UIManager.setLookAndFeel(plafInfos[index].getClassName());
            SwingUtilities.updateComponentTreeUI(frame);
            if (pack.isSelected()) {
              frame.pack();
              frame.setMinimumSize(frame.getSize());
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
);
      gui.add(plafComponents,BorderLayout.NORTH);
      JPanel dynamicLabels=new JPanel(new BorderLayout(4,4));
      dynamicLabels.setBorder(new TitledBorder("BorderLayout(4,4)"));
      gui.add(dynamicLabels,BorderLayout.WEST);
      final JPanel labels=new JPanel(new GridLayout(0,2,3,3));
      labels.setBorder(new TitledBorder("GridLayout(0,2,3,3)"));
      JButton addNew=new JButton("Add Another Label");
      dynamicLabels.add(addNew,BorderLayout.NORTH);
      addNew.addActionListener(new ActionListener(){
        private int labelCount=0;
        public void actionPerformed(        ActionEvent ae){
          labels.add(new JLabel("Label " + ++labelCount));
          frame.validate();
        }
      }
);
      dynamicLabels.add(new JScrollPane(labels),BorderLayout.CENTER);
      String[] header={"Name","Value"};
      String[] a=new String[0];
      String[] names=System.getProperties().stringPropertyNames().toArray(a);
      String[][] data=new String[names.length][2];
      for (int ii=0; ii < names.length; ii++) {
        data[ii][0]=names[ii];
        data[ii][1]=System.getProperty(names[ii]);
      }
      DefaultTableModel model=new DefaultTableModel(data,header);
      JTable table=new JTable(model);
      try {
        table.setAutoCreateRowSorter(true);
      }
 catch (      Exception continuewithNoSort) {
      }
      JScrollPane tableScroll=new JScrollPane(table);
      Dimension tablePreferred=tableScroll.getPreferredSize();
      tableScroll.setPreferredSize(new Dimension(tablePreferred.width,tablePreferred.height / 3));
      JPanel imagePanel=new JPanel(new GridBagLayout());
      imagePanel.setBorder(new TitledBorder("GridBagLayout()"));
      BufferedImage bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB);
      Graphics2D g=bi.createGraphics();
      GradientPaint gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow);
      g.setPaint(gp);
      g.fillRect(0,0,200,200);
      ImageIcon ii=new ImageIcon(bi);
      JLabel imageLabel=new JLabel(ii);
      imagePanel.add(imageLabel,null);
      JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel));
      gui.add(splitPane,BorderLayout.CENTER);
      frame.setContentPane(gui);
      frame.pack();
      frame.setLocationRelativeTo(null);
      try {
        frame.setLocationByPlatform(true);
        frame.setMinimumSize(frame.getSize());
      }
 catch (      Throwable ignoreAndContinue) {
      }
      frame.setVisible(true);
    }
  }
;
  SwingUtilities.invokeLater(r);
}

Cannot find matching typeVariable for: class Class_2 {
  public static void main(  String[] args){
    Runnable r=new Runnable(){
      public void run(){
        final JFrame frame=new JFrame("Nested Layout Example");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        final JPanel gui=new JPanel(new BorderLayout(5,5));
        gui.setBorder(new TitledBorder("BorderLayout(5,5)"));
        JPanel plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3));
        plafComponents.setBorder(new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)"));
        final UIManager.LookAndFeelInfo[] plafInfos=UIManager.getInstalledLookAndFeels();
        String[] plafNames=new String[plafInfos.length];
        for (int ii=0; ii < plafInfos.length; ii++) {
          plafNames[ii]=plafInfos[ii].getName();
        }
        final JComboBox plafChooser=new JComboBox(plafNames);
        plafComponents.add(plafChooser);
        final JCheckBox pack=new JCheckBox("Pack on PLAF change",true);
        plafComponents.add(pack);
        plafChooser.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent ae){
            int index=plafChooser.getSelectedIndex();
            try {
              UIManager.setLookAndFeel(plafInfos[index].getClassName());
              SwingUtilities.updateComponentTreeUI(frame);
              if (pack.isSelected()) {
                frame.pack();
                frame.setMinimumSize(frame.getSize());
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
);
        gui.add(plafComponents,BorderLayout.NORTH);
        JPanel dynamicLabels=new JPanel(new BorderLayout(4,4));
        dynamicLabels.setBorder(new TitledBorder("BorderLayout(4,4)"));
        gui.add(dynamicLabels,BorderLayout.WEST);
        final JPanel labels=new JPanel(new GridLayout(0,2,3,3));
        labels.setBorder(new TitledBorder("GridLayout(0,2,3,3)"));
        JButton addNew=new JButton("Add Another Label");
        dynamicLabels.add(addNew,BorderLayout.NORTH);
        addNew.addActionListener(new ActionListener(){
          private int labelCount=0;
          public void actionPerformed(          ActionEvent ae){
            labels.add(new JLabel("Label " + ++labelCount));
            frame.validate();
          }
        }
);
        dynamicLabels.add(new JScrollPane(labels),BorderLayout.CENTER);
        String[] header={"Name","Value"};
        String[] a=new String[0];
        String[] names=System.getProperties().stringPropertyNames().toArray(a);
        String[][] data=new String[names.length][2];
        for (int ii=0; ii < names.length; ii++) {
          data[ii][0]=names[ii];
          data[ii][1]=System.getProperty(names[ii]);
        }
        DefaultTableModel model=new DefaultTableModel(data,header);
        JTable table=new JTable(model);
        try {
          table.setAutoCreateRowSorter(true);
        }
 catch (        Exception continuewithNoSort) {
        }
        JScrollPane tableScroll=new JScrollPane(table);
        Dimension tablePreferred=tableScroll.getPreferredSize();
        tableScroll.setPreferredSize(new Dimension(tablePreferred.width,tablePreferred.height / 3));
        JPanel imagePanel=new JPanel(new GridBagLayout());
        imagePanel.setBorder(new TitledBorder("GridBagLayout()"));
        BufferedImage bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB);
        Graphics2D g=bi.createGraphics();
        GradientPaint gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow);
        g.setPaint(gp);
        g.fillRect(0,0,200,200);
        ImageIcon ii=new ImageIcon(bi);
        JLabel imageLabel=new JLabel(ii);
        imagePanel.add(imageLabel,null);
        JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel));
        gui.add(splitPane,BorderLayout.CENTER);
        frame.setContentPane(gui);
        frame.pack();
        frame.setLocationRelativeTo(null);
        try {
          frame.setLocationByPlatform(true);
          frame.setMinimumSize(frame.getSize());
        }
 catch (        Throwable ignoreAndContinue) {
        }
        frame.setVisible(true);
      }
    }
;
    SwingUtilities.invokeLater(r);
  }
}

Cannot find matching typeVariable for: package Class_;
import javax.swing.table.DefaultTableModel;
import java.awt.GridBagLayout;
import javax.swing.JButton;
import java.awt.image.BufferedImage;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import javax.swing.JScrollPane;
import java.awt.Dimension;
import javax.swing.JLabel;
import javax.swing.JCheckBox;
import java.awt.GradientPaint;
import javax.swing.JSplitPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.UIManager;
import java.awt.event.ActionListener;
import java.awt.Color;
import java.awt.Graphics2D;
import javax.swing.SwingUtilities;
import java.awt.GridLayout;
import javax.swing.border.TitledBorder;
import javax.swing.JFrame;
import javax.swing.JComboBox;
import javax.swing.ImageIcon;
import java.awt.BorderLayout;
class Class_2 {
  public static void main(  String[] args){
    Runnable r=new Runnable(){
      public void run(){
        final JFrame frame=new JFrame("Nested Layout Example");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        final JPanel gui=new JPanel(new BorderLayout(5,5));
        gui.setBorder(new TitledBorder("BorderLayout(5,5)"));
        JPanel plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3));
        plafComponents.setBorder(new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)"));
        final UIManager.LookAndFeelInfo[] plafInfos=UIManager.getInstalledLookAndFeels();
        String[] plafNames=new String[plafInfos.length];
        for (int ii=0; ii < plafInfos.length; ii++) {
          plafNames[ii]=plafInfos[ii].getName();
        }
        final JComboBox plafChooser=new JComboBox(plafNames);
        plafComponents.add(plafChooser);
        final JCheckBox pack=new JCheckBox("Pack on PLAF change",true);
        plafComponents.add(pack);
        plafChooser.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent ae){
            int index=plafChooser.getSelectedIndex();
            try {
              UIManager.setLookAndFeel(plafInfos[index].getClassName());
              SwingUtilities.updateComponentTreeUI(frame);
              if (pack.isSelected()) {
                frame.pack();
                frame.setMinimumSize(frame.getSize());
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
);
        gui.add(plafComponents,BorderLayout.NORTH);
        JPanel dynamicLabels=new JPanel(new BorderLayout(4,4));
        dynamicLabels.setBorder(new TitledBorder("BorderLayout(4,4)"));
        gui.add(dynamicLabels,BorderLayout.WEST);
        final JPanel labels=new JPanel(new GridLayout(0,2,3,3));
        labels.setBorder(new TitledBorder("GridLayout(0,2,3,3)"));
        JButton addNew=new JButton("Add Another Label");
        dynamicLabels.add(addNew,BorderLayout.NORTH);
        addNew.addActionListener(new ActionListener(){
          private int labelCount=0;
          public void actionPerformed(          ActionEvent ae){
            labels.add(new JLabel("Label " + ++labelCount));
            frame.validate();
          }
        }
);
        dynamicLabels.add(new JScrollPane(labels),BorderLayout.CENTER);
        String[] header={"Name","Value"};
        String[] a=new String[0];
        String[] names=System.getProperties().stringPropertyNames().toArray(a);
        String[][] data=new String[names.length][2];
        for (int ii=0; ii < names.length; ii++) {
          data[ii][0]=names[ii];
          data[ii][1]=System.getProperty(names[ii]);
        }
        DefaultTableModel model=new DefaultTableModel(data,header);
        JTable table=new JTable(model);
        try {
          table.setAutoCreateRowSorter(true);
        }
 catch (        Exception continuewithNoSort) {
        }
        JScrollPane tableScroll=new JScrollPane(table);
        Dimension tablePreferred=tableScroll.getPreferredSize();
        tableScroll.setPreferredSize(new Dimension(tablePreferred.width,tablePreferred.height / 3));
        JPanel imagePanel=new JPanel(new GridBagLayout());
        imagePanel.setBorder(new TitledBorder("GridBagLayout()"));
        BufferedImage bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB);
        Graphics2D g=bi.createGraphics();
        GradientPaint gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow);
        g.setPaint(gp);
        g.fillRect(0,0,200,200);
        ImageIcon ii=new ImageIcon(bi);
        JLabel imageLabel=new JLabel(ii);
        imagePanel.add(imageLabel,null);
        JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel));
        gui.add(splitPane,BorderLayout.CENTER);
        frame.setContentPane(gui);
        frame.pack();
        frame.setLocationRelativeTo(null);
        try {
          frame.setLocationByPlatform(true);
          frame.setMinimumSize(frame.getSize());
        }
 catch (        Throwable ignoreAndContinue) {
        }
        frame.setVisible(true);
      }
    }
;
    SwingUtilities.invokeLater(r);
  }
}

Cannot find matching typeVariable for: String[] args
For node: String[] args expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Did not find solution for node: String with type Type3
Did not find solution for node: String with type Type3
For node: args expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: Runnable expected fqn: java.lang.Runnable with type: Type5 got: java.lang.Runnable
For node: Runnable expected fqn: java.lang.Runnable with type: Type5 got: java.lang.Runnable
Cannot find matching typeVariable for: r=new Runnable(){
  public void run(){
    final JFrame frame=new JFrame("Nested Layout Example");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    final JPanel gui=new JPanel(new BorderLayout(5,5));
    gui.setBorder(new TitledBorder("BorderLayout(5,5)"));
    JPanel plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3));
    plafComponents.setBorder(new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)"));
    final UIManager.LookAndFeelInfo[] plafInfos=UIManager.getInstalledLookAndFeels();
    String[] plafNames=new String[plafInfos.length];
    for (int ii=0; ii < plafInfos.length; ii++) {
      plafNames[ii]=plafInfos[ii].getName();
    }
    final JComboBox plafChooser=new JComboBox(plafNames);
    plafComponents.add(plafChooser);
    final JCheckBox pack=new JCheckBox("Pack on PLAF change",true);
    plafComponents.add(pack);
    plafChooser.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ae){
        int index=plafChooser.getSelectedIndex();
        try {
          UIManager.setLookAndFeel(plafInfos[index].getClassName());
          SwingUtilities.updateComponentTreeUI(frame);
          if (pack.isSelected()) {
            frame.pack();
            frame.setMinimumSize(frame.getSize());
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    gui.add(plafComponents,BorderLayout.NORTH);
    JPanel dynamicLabels=new JPanel(new BorderLayout(4,4));
    dynamicLabels.setBorder(new TitledBorder("BorderLayout(4,4)"));
    gui.add(dynamicLabels,BorderLayout.WEST);
    final JPanel labels=new JPanel(new GridLayout(0,2,3,3));
    labels.setBorder(new TitledBorder("GridLayout(0,2,3,3)"));
    JButton addNew=new JButton("Add Another Label");
    dynamicLabels.add(addNew,BorderLayout.NORTH);
    addNew.addActionListener(new ActionListener(){
      private int labelCount=0;
      public void actionPerformed(      ActionEvent ae){
        labels.add(new JLabel("Label " + ++labelCount));
        frame.validate();
      }
    }
);
    dynamicLabels.add(new JScrollPane(labels),BorderLayout.CENTER);
    String[] header={"Name","Value"};
    String[] a=new String[0];
    String[] names=System.getProperties().stringPropertyNames().toArray(a);
    String[][] data=new String[names.length][2];
    for (int ii=0; ii < names.length; ii++) {
      data[ii][0]=names[ii];
      data[ii][1]=System.getProperty(names[ii]);
    }
    DefaultTableModel model=new DefaultTableModel(data,header);
    JTable table=new JTable(model);
    try {
      table.setAutoCreateRowSorter(true);
    }
 catch (    Exception continuewithNoSort) {
    }
    JScrollPane tableScroll=new JScrollPane(table);
    Dimension tablePreferred=tableScroll.getPreferredSize();
    tableScroll.setPreferredSize(new Dimension(tablePreferred.width,tablePreferred.height / 3));
    JPanel imagePanel=new JPanel(new GridBagLayout());
    imagePanel.setBorder(new TitledBorder("GridBagLayout()"));
    BufferedImage bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g=bi.createGraphics();
    GradientPaint gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow);
    g.setPaint(gp);
    g.fillRect(0,0,200,200);
    ImageIcon ii=new ImageIcon(bi);
    JLabel imageLabel=new JLabel(ii);
    imagePanel.add(imageLabel,null);
    JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel));
    gui.add(splitPane,BorderLayout.CENTER);
    frame.setContentPane(gui);
    frame.pack();
    frame.setLocationRelativeTo(null);
    try {
      frame.setLocationByPlatform(true);
      frame.setMinimumSize(frame.getSize());
    }
 catch (    Throwable ignoreAndContinue) {
    }
    frame.setVisible(true);
  }
}

For node: r=new Runnable(){
  public void run(){
    final JFrame frame=new JFrame("Nested Layout Example");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    final JPanel gui=new JPanel(new BorderLayout(5,5));
    gui.setBorder(new TitledBorder("BorderLayout(5,5)"));
    JPanel plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3));
    plafComponents.setBorder(new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)"));
    final UIManager.LookAndFeelInfo[] plafInfos=UIManager.getInstalledLookAndFeels();
    String[] plafNames=new String[plafInfos.length];
    for (int ii=0; ii < plafInfos.length; ii++) {
      plafNames[ii]=plafInfos[ii].getName();
    }
    final JComboBox plafChooser=new JComboBox(plafNames);
    plafComponents.add(plafChooser);
    final JCheckBox pack=new JCheckBox("Pack on PLAF change",true);
    plafComponents.add(pack);
    plafChooser.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ae){
        int index=plafChooser.getSelectedIndex();
        try {
          UIManager.setLookAndFeel(plafInfos[index].getClassName());
          SwingUtilities.updateComponentTreeUI(frame);
          if (pack.isSelected()) {
            frame.pack();
            frame.setMinimumSize(frame.getSize());
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    gui.add(plafComponents,BorderLayout.NORTH);
    JPanel dynamicLabels=new JPanel(new BorderLayout(4,4));
    dynamicLabels.setBorder(new TitledBorder("BorderLayout(4,4)"));
    gui.add(dynamicLabels,BorderLayout.WEST);
    final JPanel labels=new JPanel(new GridLayout(0,2,3,3));
    labels.setBorder(new TitledBorder("GridLayout(0,2,3,3)"));
    JButton addNew=new JButton("Add Another Label");
    dynamicLabels.add(addNew,BorderLayout.NORTH);
    addNew.addActionListener(new ActionListener(){
      private int labelCount=0;
      public void actionPerformed(      ActionEvent ae){
        labels.add(new JLabel("Label " + ++labelCount));
        frame.validate();
      }
    }
);
    dynamicLabels.add(new JScrollPane(labels),BorderLayout.CENTER);
    String[] header={"Name","Value"};
    String[] a=new String[0];
    String[] names=System.getProperties().stringPropertyNames().toArray(a);
    String[][] data=new String[names.length][2];
    for (int ii=0; ii < names.length; ii++) {
      data[ii][0]=names[ii];
      data[ii][1]=System.getProperty(names[ii]);
    }
    DefaultTableModel model=new DefaultTableModel(data,header);
    JTable table=new JTable(model);
    try {
      table.setAutoCreateRowSorter(true);
    }
 catch (    Exception continuewithNoSort) {
    }
    JScrollPane tableScroll=new JScrollPane(table);
    Dimension tablePreferred=tableScroll.getPreferredSize();
    tableScroll.setPreferredSize(new Dimension(tablePreferred.width,tablePreferred.height / 3));
    JPanel imagePanel=new JPanel(new GridBagLayout());
    imagePanel.setBorder(new TitledBorder("GridBagLayout()"));
    BufferedImage bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g=bi.createGraphics();
    GradientPaint gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow);
    g.setPaint(gp);
    g.fillRect(0,0,200,200);
    ImageIcon ii=new ImageIcon(bi);
    JLabel imageLabel=new JLabel(ii);
    imagePanel.add(imageLabel,null);
    JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel));
    gui.add(splitPane,BorderLayout.CENTER);
    frame.setContentPane(gui);
    frame.pack();
    frame.setLocationRelativeTo(null);
    try {
      frame.setLocationByPlatform(true);
      frame.setMinimumSize(frame.getSize());
    }
 catch (    Throwable ignoreAndContinue) {
    }
    frame.setVisible(true);
  }
}
 expected fqn: java.lang.Runnable with type: Type5 got: java.lang.Runnable
For node: r expected fqn: java.lang.Runnable with type: Type5 got: java.lang.Runnable
For node: new Runnable(){
  public void run(){
    final JFrame frame=new JFrame("Nested Layout Example");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    final JPanel gui=new JPanel(new BorderLayout(5,5));
    gui.setBorder(new TitledBorder("BorderLayout(5,5)"));
    JPanel plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3));
    plafComponents.setBorder(new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)"));
    final UIManager.LookAndFeelInfo[] plafInfos=UIManager.getInstalledLookAndFeels();
    String[] plafNames=new String[plafInfos.length];
    for (int ii=0; ii < plafInfos.length; ii++) {
      plafNames[ii]=plafInfos[ii].getName();
    }
    final JComboBox plafChooser=new JComboBox(plafNames);
    plafComponents.add(plafChooser);
    final JCheckBox pack=new JCheckBox("Pack on PLAF change",true);
    plafComponents.add(pack);
    plafChooser.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ae){
        int index=plafChooser.getSelectedIndex();
        try {
          UIManager.setLookAndFeel(plafInfos[index].getClassName());
          SwingUtilities.updateComponentTreeUI(frame);
          if (pack.isSelected()) {
            frame.pack();
            frame.setMinimumSize(frame.getSize());
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    gui.add(plafComponents,BorderLayout.NORTH);
    JPanel dynamicLabels=new JPanel(new BorderLayout(4,4));
    dynamicLabels.setBorder(new TitledBorder("BorderLayout(4,4)"));
    gui.add(dynamicLabels,BorderLayout.WEST);
    final JPanel labels=new JPanel(new GridLayout(0,2,3,3));
    labels.setBorder(new TitledBorder("GridLayout(0,2,3,3)"));
    JButton addNew=new JButton("Add Another Label");
    dynamicLabels.add(addNew,BorderLayout.NORTH);
    addNew.addActionListener(new ActionListener(){
      private int labelCount=0;
      public void actionPerformed(      ActionEvent ae){
        labels.add(new JLabel("Label " + ++labelCount));
        frame.validate();
      }
    }
);
    dynamicLabels.add(new JScrollPane(labels),BorderLayout.CENTER);
    String[] header={"Name","Value"};
    String[] a=new String[0];
    String[] names=System.getProperties().stringPropertyNames().toArray(a);
    String[][] data=new String[names.length][2];
    for (int ii=0; ii < names.length; ii++) {
      data[ii][0]=names[ii];
      data[ii][1]=System.getProperty(names[ii]);
    }
    DefaultTableModel model=new DefaultTableModel(data,header);
    JTable table=new JTable(model);
    try {
      table.setAutoCreateRowSorter(true);
    }
 catch (    Exception continuewithNoSort) {
    }
    JScrollPane tableScroll=new JScrollPane(table);
    Dimension tablePreferred=tableScroll.getPreferredSize();
    tableScroll.setPreferredSize(new Dimension(tablePreferred.width,tablePreferred.height / 3));
    JPanel imagePanel=new JPanel(new GridBagLayout());
    imagePanel.setBorder(new TitledBorder("GridBagLayout()"));
    BufferedImage bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g=bi.createGraphics();
    GradientPaint gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow);
    g.setPaint(gp);
    g.fillRect(0,0,200,200);
    ImageIcon ii=new ImageIcon(bi);
    JLabel imageLabel=new JLabel(ii);
    imagePanel.add(imageLabel,null);
    JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel));
    gui.add(splitPane,BorderLayout.CENTER);
    frame.setContentPane(gui);
    frame.pack();
    frame.setLocationRelativeTo(null);
    try {
      frame.setLocationByPlatform(true);
      frame.setMinimumSize(frame.getSize());
    }
 catch (    Throwable ignoreAndContinue) {
    }
    frame.setVisible(true);
  }
}
 expected fqn:  with type: Type5 got: java.lang.Runnable
For node: Runnable expected fqn: java.lang.Runnable with type: Type5 got: java.lang.Runnable
For node: Runnable expected fqn: java.lang.Runnable with type: Type5 got: java.lang.Runnable
Cannot find matching typeVariable for: {
  public void run(){
    final JFrame frame=new JFrame("Nested Layout Example");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    final JPanel gui=new JPanel(new BorderLayout(5,5));
    gui.setBorder(new TitledBorder("BorderLayout(5,5)"));
    JPanel plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3));
    plafComponents.setBorder(new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)"));
    final UIManager.LookAndFeelInfo[] plafInfos=UIManager.getInstalledLookAndFeels();
    String[] plafNames=new String[plafInfos.length];
    for (int ii=0; ii < plafInfos.length; ii++) {
      plafNames[ii]=plafInfos[ii].getName();
    }
    final JComboBox plafChooser=new JComboBox(plafNames);
    plafComponents.add(plafChooser);
    final JCheckBox pack=new JCheckBox("Pack on PLAF change",true);
    plafComponents.add(pack);
    plafChooser.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ae){
        int index=plafChooser.getSelectedIndex();
        try {
          UIManager.setLookAndFeel(plafInfos[index].getClassName());
          SwingUtilities.updateComponentTreeUI(frame);
          if (pack.isSelected()) {
            frame.pack();
            frame.setMinimumSize(frame.getSize());
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    gui.add(plafComponents,BorderLayout.NORTH);
    JPanel dynamicLabels=new JPanel(new BorderLayout(4,4));
    dynamicLabels.setBorder(new TitledBorder("BorderLayout(4,4)"));
    gui.add(dynamicLabels,BorderLayout.WEST);
    final JPanel labels=new JPanel(new GridLayout(0,2,3,3));
    labels.setBorder(new TitledBorder("GridLayout(0,2,3,3)"));
    JButton addNew=new JButton("Add Another Label");
    dynamicLabels.add(addNew,BorderLayout.NORTH);
    addNew.addActionListener(new ActionListener(){
      private int labelCount=0;
      public void actionPerformed(      ActionEvent ae){
        labels.add(new JLabel("Label " + ++labelCount));
        frame.validate();
      }
    }
);
    dynamicLabels.add(new JScrollPane(labels),BorderLayout.CENTER);
    String[] header={"Name","Value"};
    String[] a=new String[0];
    String[] names=System.getProperties().stringPropertyNames().toArray(a);
    String[][] data=new String[names.length][2];
    for (int ii=0; ii < names.length; ii++) {
      data[ii][0]=names[ii];
      data[ii][1]=System.getProperty(names[ii]);
    }
    DefaultTableModel model=new DefaultTableModel(data,header);
    JTable table=new JTable(model);
    try {
      table.setAutoCreateRowSorter(true);
    }
 catch (    Exception continuewithNoSort) {
    }
    JScrollPane tableScroll=new JScrollPane(table);
    Dimension tablePreferred=tableScroll.getPreferredSize();
    tableScroll.setPreferredSize(new Dimension(tablePreferred.width,tablePreferred.height / 3));
    JPanel imagePanel=new JPanel(new GridBagLayout());
    imagePanel.setBorder(new TitledBorder("GridBagLayout()"));
    BufferedImage bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g=bi.createGraphics();
    GradientPaint gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow);
    g.setPaint(gp);
    g.fillRect(0,0,200,200);
    ImageIcon ii=new ImageIcon(bi);
    JLabel imageLabel=new JLabel(ii);
    imagePanel.add(imageLabel,null);
    JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel));
    gui.add(splitPane,BorderLayout.CENTER);
    frame.setContentPane(gui);
    frame.pack();
    frame.setLocationRelativeTo(null);
    try {
      frame.setLocationByPlatform(true);
      frame.setMinimumSize(frame.getSize());
    }
 catch (    Throwable ignoreAndContinue) {
    }
    frame.setVisible(true);
  }
}

Did not find solution for node: void with type Type2
Cannot find matching typeVariable for: run
Cannot find matching typeVariable for: public void run(){
  final JFrame frame=new JFrame("Nested Layout Example");
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  final JPanel gui=new JPanel(new BorderLayout(5,5));
  gui.setBorder(new TitledBorder("BorderLayout(5,5)"));
  JPanel plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3));
  plafComponents.setBorder(new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)"));
  final UIManager.LookAndFeelInfo[] plafInfos=UIManager.getInstalledLookAndFeels();
  String[] plafNames=new String[plafInfos.length];
  for (int ii=0; ii < plafInfos.length; ii++) {
    plafNames[ii]=plafInfos[ii].getName();
  }
  final JComboBox plafChooser=new JComboBox(plafNames);
  plafComponents.add(plafChooser);
  final JCheckBox pack=new JCheckBox("Pack on PLAF change",true);
  plafComponents.add(pack);
  plafChooser.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      int index=plafChooser.getSelectedIndex();
      try {
        UIManager.setLookAndFeel(plafInfos[index].getClassName());
        SwingUtilities.updateComponentTreeUI(frame);
        if (pack.isSelected()) {
          frame.pack();
          frame.setMinimumSize(frame.getSize());
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  gui.add(plafComponents,BorderLayout.NORTH);
  JPanel dynamicLabels=new JPanel(new BorderLayout(4,4));
  dynamicLabels.setBorder(new TitledBorder("BorderLayout(4,4)"));
  gui.add(dynamicLabels,BorderLayout.WEST);
  final JPanel labels=new JPanel(new GridLayout(0,2,3,3));
  labels.setBorder(new TitledBorder("GridLayout(0,2,3,3)"));
  JButton addNew=new JButton("Add Another Label");
  dynamicLabels.add(addNew,BorderLayout.NORTH);
  addNew.addActionListener(new ActionListener(){
    private int labelCount=0;
    public void actionPerformed(    ActionEvent ae){
      labels.add(new JLabel("Label " + ++labelCount));
      frame.validate();
    }
  }
);
  dynamicLabels.add(new JScrollPane(labels),BorderLayout.CENTER);
  String[] header={"Name","Value"};
  String[] a=new String[0];
  String[] names=System.getProperties().stringPropertyNames().toArray(a);
  String[][] data=new String[names.length][2];
  for (int ii=0; ii < names.length; ii++) {
    data[ii][0]=names[ii];
    data[ii][1]=System.getProperty(names[ii]);
  }
  DefaultTableModel model=new DefaultTableModel(data,header);
  JTable table=new JTable(model);
  try {
    table.setAutoCreateRowSorter(true);
  }
 catch (  Exception continuewithNoSort) {
  }
  JScrollPane tableScroll=new JScrollPane(table);
  Dimension tablePreferred=tableScroll.getPreferredSize();
  tableScroll.setPreferredSize(new Dimension(tablePreferred.width,tablePreferred.height / 3));
  JPanel imagePanel=new JPanel(new GridBagLayout());
  imagePanel.setBorder(new TitledBorder("GridBagLayout()"));
  BufferedImage bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g=bi.createGraphics();
  GradientPaint gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow);
  g.setPaint(gp);
  g.fillRect(0,0,200,200);
  ImageIcon ii=new ImageIcon(bi);
  JLabel imageLabel=new JLabel(ii);
  imagePanel.add(imageLabel,null);
  JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel));
  gui.add(splitPane,BorderLayout.CENTER);
  frame.setContentPane(gui);
  frame.pack();
  frame.setLocationRelativeTo(null);
  try {
    frame.setLocationByPlatform(true);
    frame.setMinimumSize(frame.getSize());
  }
 catch (  Throwable ignoreAndContinue) {
  }
  frame.setVisible(true);
}

Cannot find matching typeVariable for: {
  public void run(){
    final JFrame frame=new JFrame("Nested Layout Example");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    final JPanel gui=new JPanel(new BorderLayout(5,5));
    gui.setBorder(new TitledBorder("BorderLayout(5,5)"));
    JPanel plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3));
    plafComponents.setBorder(new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)"));
    final UIManager.LookAndFeelInfo[] plafInfos=UIManager.getInstalledLookAndFeels();
    String[] plafNames=new String[plafInfos.length];
    for (int ii=0; ii < plafInfos.length; ii++) {
      plafNames[ii]=plafInfos[ii].getName();
    }
    final JComboBox plafChooser=new JComboBox(plafNames);
    plafComponents.add(plafChooser);
    final JCheckBox pack=new JCheckBox("Pack on PLAF change",true);
    plafComponents.add(pack);
    plafChooser.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ae){
        int index=plafChooser.getSelectedIndex();
        try {
          UIManager.setLookAndFeel(plafInfos[index].getClassName());
          SwingUtilities.updateComponentTreeUI(frame);
          if (pack.isSelected()) {
            frame.pack();
            frame.setMinimumSize(frame.getSize());
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    gui.add(plafComponents,BorderLayout.NORTH);
    JPanel dynamicLabels=new JPanel(new BorderLayout(4,4));
    dynamicLabels.setBorder(new TitledBorder("BorderLayout(4,4)"));
    gui.add(dynamicLabels,BorderLayout.WEST);
    final JPanel labels=new JPanel(new GridLayout(0,2,3,3));
    labels.setBorder(new TitledBorder("GridLayout(0,2,3,3)"));
    JButton addNew=new JButton("Add Another Label");
    dynamicLabels.add(addNew,BorderLayout.NORTH);
    addNew.addActionListener(new ActionListener(){
      private int labelCount=0;
      public void actionPerformed(      ActionEvent ae){
        labels.add(new JLabel("Label " + ++labelCount));
        frame.validate();
      }
    }
);
    dynamicLabels.add(new JScrollPane(labels),BorderLayout.CENTER);
    String[] header={"Name","Value"};
    String[] a=new String[0];
    String[] names=System.getProperties().stringPropertyNames().toArray(a);
    String[][] data=new String[names.length][2];
    for (int ii=0; ii < names.length; ii++) {
      data[ii][0]=names[ii];
      data[ii][1]=System.getProperty(names[ii]);
    }
    DefaultTableModel model=new DefaultTableModel(data,header);
    JTable table=new JTable(model);
    try {
      table.setAutoCreateRowSorter(true);
    }
 catch (    Exception continuewithNoSort) {
    }
    JScrollPane tableScroll=new JScrollPane(table);
    Dimension tablePreferred=tableScroll.getPreferredSize();
    tableScroll.setPreferredSize(new Dimension(tablePreferred.width,tablePreferred.height / 3));
    JPanel imagePanel=new JPanel(new GridBagLayout());
    imagePanel.setBorder(new TitledBorder("GridBagLayout()"));
    BufferedImage bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g=bi.createGraphics();
    GradientPaint gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow);
    g.setPaint(gp);
    g.fillRect(0,0,200,200);
    ImageIcon ii=new ImageIcon(bi);
    JLabel imageLabel=new JLabel(ii);
    imagePanel.add(imageLabel,null);
    JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel));
    gui.add(splitPane,BorderLayout.CENTER);
    frame.setContentPane(gui);
    frame.pack();
    frame.setLocationRelativeTo(null);
    try {
      frame.setLocationByPlatform(true);
      frame.setMinimumSize(frame.getSize());
    }
 catch (    Throwable ignoreAndContinue) {
    }
    frame.setVisible(true);
  }
}

For node: run expected fqn: void with type: Type5 got: java.lang.Runnable
Did not find solution for node: JFrame with type Type6
Did not find solution for node: JFrame with type Type6
Cannot find matching typeVariable for: frame=new JFrame("Nested Layout Example")
Did not find solution for node: frame=new JFrame("Nested Layout Example") with type Type6
Did not find solution for node: frame with type Type6
Did not find solution for node: new JFrame("Nested Layout Example") with type Type6
Did not find solution for node: JFrame with type Type6
Did not find solution for node: JFrame with type Type6
For node: "Nested Layout Example" expected fqn: java.lang.String with type: Type7 got: java.lang.String
Did not find solution for node: frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) with type Type11
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: setDefaultCloseOperation
Did not find solution for node: setDefaultCloseOperation with type Type11
Cannot find matching typeVariable for: JFrame.EXIT_ON_CLOSE
Did not find solution for node: JFrame.EXIT_ON_CLOSE with type Type11
Did not find solution for node: JFrame with type Type6
Did not find solution for node: EXIT_ON_CLOSE with type Type10
Did not find solution for node: JPanel with type Type14
Did not find solution for node: JPanel with type Type14
Cannot find matching typeVariable for: gui=new JPanel(new BorderLayout(5,5))
Did not find solution for node: gui=new JPanel(new BorderLayout(5,5)) with type Type14
Did not find solution for node: gui with type Type14
Did not find solution for node: new JPanel(new BorderLayout(5,5)) with type Type14
Did not find solution for node: JPanel with type Type14
Did not find solution for node: JPanel with type Type14
Did not find solution for node: new BorderLayout(5,5) with type Type15
Did not find solution for node: BorderLayout with type Type15
Did not find solution for node: BorderLayout with type Type15
For node: 5 expected fqn: int with type: Type16 got: byte
For node: 5 expected fqn: int with type: Type16 got: byte
Did not find solution for node: gui.setBorder(new TitledBorder("BorderLayout(5,5)")) with type Type25
Did not find solution for node: gui with type Type14
Cannot find matching typeVariable for: setBorder
Did not find solution for node: setBorder with type Type25
Did not find solution for node: new TitledBorder("BorderLayout(5,5)") with type Type22
Did not find solution for node: TitledBorder with type Type22
Did not find solution for node: TitledBorder with type Type22
For node: "BorderLayout(5,5)" expected fqn: java.lang.String with type: Type7 got: java.lang.String
Did not find solution for node: JPanel with type Type14
Did not find solution for node: JPanel with type Type14
Cannot find matching typeVariable for: plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3))
Did not find solution for node: plafComponents=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3)) with type Type14
Did not find solution for node: plafComponents with type Type14
Did not find solution for node: new JPanel(new FlowLayout(FlowLayout.RIGHT,3,3)) with type Type14
Did not find solution for node: JPanel with type Type14
Did not find solution for node: JPanel with type Type14
Did not find solution for node: new FlowLayout(FlowLayout.RIGHT,3,3) with type Type28
Did not find solution for node: FlowLayout with type Type28
Did not find solution for node: FlowLayout with type Type28
Cannot find matching typeVariable for: FlowLayout.RIGHT
Did not find solution for node: FlowLayout.RIGHT with type Type28
Did not find solution for node: FlowLayout with type Type28
For node: RIGHT expected fqn: int with type: Type29 got: int
For node: 3 expected fqn: int with type: Type16 got: byte
For node: 3 expected fqn: int with type: Type16 got: byte
Did not find solution for node: plafComponents.setBorder(new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)")) with type Type27
Did not find solution for node: plafComponents with type Type14
Cannot find matching typeVariable for: setBorder
Did not find solution for node: setBorder with type Type27
Did not find solution for node: new TitledBorder("FlowLayout(FlowLayout.RIGHT, 3,3)") with type Type22
Did not find solution for node: TitledBorder with type Type22
Did not find solution for node: TitledBorder with type Type22
For node: "FlowLayout(FlowLayout.RIGHT, 3,3)" expected fqn: java.lang.String with type: Type7 got: java.lang.String
Did not find solution for node: UIManager.LookAndFeelInfo[] with type Type38
Did not find solution for node: UIManager.LookAndFeelInfo with type Type36
Did not find solution for node: UIManager.LookAndFeelInfo with type Type36
Did not find solution for node: UIManager with type Type37
Cannot find matching typeVariable for: LookAndFeelInfo
Did not find solution for node: LookAndFeelInfo with type Type36
Cannot find matching typeVariable for: plafInfos=UIManager.getInstalledLookAndFeels()
Did not find solution for node: plafInfos=UIManager.getInstalledLookAndFeels() with type Type38
Did not find solution for node: plafInfos with type Type38
Did not find solution for node: UIManager.getInstalledLookAndFeels() with type Type39
Did not find solution for node: UIManager with type Type37
Cannot find matching typeVariable for: getInstalledLookAndFeels
Did not find solution for node: getInstalledLookAndFeels with type Type39
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
Cannot find matching typeVariable for: plafNames=new String[plafInfos.length]
For node: plafNames=new String[plafInfos.length] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: plafNames expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: new String[plafInfos.length] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
Cannot find matching typeVariable for: plafInfos.length
For node: plafInfos.length expected fqn: int with type: Type4 got: java.lang.String[]
Did not find solution for node: plafInfos with type Type38
For node: length expected fqn: int with type: Type42 got: int
Cannot find matching typeVariable for: int ii=0
Did not find solution for node: int ii=0 with type Type41
Did not find solution for node: int with type Type41
Cannot find matching typeVariable for: ii=0
Did not find solution for node: ii=0 with type Type41
Did not find solution for node: ii with type Type41
For node: 0 expected fqn: int with type: Type16 got: byte
For node: ii < plafInfos.length expected fqn: boolean with type: Type43 got: boolean
Did not find solution for node: ii with type Type41
Cannot find matching typeVariable for: plafInfos.length
For node: plafInfos.length expected fqn: int with type: Type43 got: boolean
Did not find solution for node: plafInfos with type Type38
For node: length expected fqn: int with type: Type42 got: int
Did not find solution for node: ii++ with type Type41
Did not find solution for node: ii with type Type41
Did not find solution for node: plafNames[ii]=plafInfos[ii].getName() with type Type3
Did not find solution for node: plafNames[ii] with type Type3
For node: plafNames expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Cannot find matching typeVariable for: ii
Did not find solution for node: ii with type Type3
Did not find solution for node: plafInfos[ii].getName() with type Type45
Did not find solution for node: plafInfos[ii] with type Type36
Did not find solution for node: plafInfos with type Type38
Cannot find matching typeVariable for: ii
Did not find solution for node: ii with type Type36
Cannot find matching typeVariable for: getName
Did not find solution for node: getName with type Type45
Did not find solution for node: JComboBox with type Type47
Did not find solution for node: JComboBox with type Type47
Cannot find matching typeVariable for: plafChooser=new JComboBox(plafNames)
Did not find solution for node: plafChooser=new JComboBox(plafNames) with type Type47
Did not find solution for node: plafChooser with type Type47
Did not find solution for node: new JComboBox(plafNames) with type Type47
Did not find solution for node: JComboBox with type Type47
Did not find solution for node: JComboBox with type Type47
For node: plafNames expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Did not find solution for node: plafComponents.add(plafChooser) with type Type50
Did not find solution for node: plafComponents with type Type14
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type50
Did not find solution for node: plafChooser with type Type47
Did not find solution for node: JCheckBox with type Type53
Did not find solution for node: JCheckBox with type Type53
Cannot find matching typeVariable for: pack=new JCheckBox("Pack on PLAF change",true)
Did not find solution for node: pack=new JCheckBox("Pack on PLAF change",true) with type Type53
Did not find solution for node: pack with type Type53
Did not find solution for node: new JCheckBox("Pack on PLAF change",true) with type Type53
Did not find solution for node: JCheckBox with type Type53
Did not find solution for node: JCheckBox with type Type53
For node: "Pack on PLAF change" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: true expected fqn: boolean with type: Type43 got: boolean
Did not find solution for node: plafComponents.add(pack) with type Type57
Did not find solution for node: plafComponents with type Type14
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type57
Did not find solution for node: pack with type Type53
For node: plafChooser.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    int index=plafChooser.getSelectedIndex();
    try {
      UIManager.setLookAndFeel(plafInfos[index].getClassName());
      SwingUtilities.updateComponentTreeUI(frame);
      if (pack.isSelected()) {
        frame.pack();
        frame.setMinimumSize(frame.getSize());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}
) expected fqn: void with type: Type86 got: void
Did not find solution for node: plafChooser with type Type47
Cannot find matching typeVariable for: addActionListener
For node: addActionListener expected fqn: void with type: Type86 got: void
For node: new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    int index=plafChooser.getSelectedIndex();
    try {
      UIManager.setLookAndFeel(plafInfos[index].getClassName());
      SwingUtilities.updateComponentTreeUI(frame);
      if (pack.isSelected()) {
        frame.pack();
        frame.setMinimumSize(frame.getSize());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}
 expected fqn:  with type: Type60 got: java.awt.event.ActionListener
For node: ActionListener expected fqn: java.awt.event.ActionListener with type: Type60 got: java.awt.event.ActionListener
For node: ActionListener expected fqn: java.awt.event.ActionListener with type: Type60 got: java.awt.event.ActionListener
Cannot find matching typeVariable for: {
  public void actionPerformed(  ActionEvent ae){
    int index=plafChooser.getSelectedIndex();
    try {
      UIManager.setLookAndFeel(plafInfos[index].getClassName());
      SwingUtilities.updateComponentTreeUI(frame);
      if (pack.isSelected()) {
        frame.pack();
        frame.setMinimumSize(frame.getSize());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}

Did not find solution for node: void with type Type2
Cannot find matching typeVariable for: actionPerformed
Cannot find matching typeVariable for: public void actionPerformed(ActionEvent ae){
  int index=plafChooser.getSelectedIndex();
  try {
    UIManager.setLookAndFeel(plafInfos[index].getClassName());
    SwingUtilities.updateComponentTreeUI(frame);
    if (pack.isSelected()) {
      frame.pack();
      frame.setMinimumSize(frame.getSize());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}

Cannot find matching typeVariable for: {
  public void actionPerformed(  ActionEvent ae){
    int index=plafChooser.getSelectedIndex();
    try {
      UIManager.setLookAndFeel(plafInfos[index].getClassName());
      SwingUtilities.updateComponentTreeUI(frame);
      if (pack.isSelected()) {
        frame.pack();
        frame.setMinimumSize(frame.getSize());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}

For node: actionPerformed expected fqn: void with type: Type60 got: java.awt.event.ActionListener
Cannot find matching typeVariable for: ActionEvent ae
Did not find solution for node: ActionEvent ae with type Type61
Did not find solution for node: ActionEvent with type Type61
Did not find solution for node: ActionEvent with type Type61
Did not find solution for node: ae with type Type61
Did not find solution for node: int with type Type41
Cannot find matching typeVariable for: index=plafChooser.getSelectedIndex()
Did not find solution for node: index=plafChooser.getSelectedIndex() with type Type41
Did not find solution for node: index with type Type41
For node: plafChooser.getSelectedIndex() expected fqn: int with type: Type62 got: int
Did not find solution for node: plafChooser with type Type47
Cannot find matching typeVariable for: getSelectedIndex
For node: getSelectedIndex expected fqn: int with type: Type62 got: int
Did not find solution for node: UIManager.setLookAndFeel(plafInfos[index].getClassName()) with type Type66
Did not find solution for node: UIManager with type Type37
Cannot find matching typeVariable for: setLookAndFeel
Did not find solution for node: setLookAndFeel with type Type66
Did not find solution for node: plafInfos[index].getClassName() with type Type64
Did not find solution for node: plafInfos[index] with type Type36
Did not find solution for node: plafInfos with type Type38
Cannot find matching typeVariable for: index
Did not find solution for node: index with type Type36
Cannot find matching typeVariable for: getClassName
Did not find solution for node: getClassName with type Type64
Did not find solution for node: SwingUtilities.updateComponentTreeUI(frame) with type Type70
Did not find solution for node: SwingUtilities with type Type69
Cannot find matching typeVariable for: updateComponentTreeUI
Did not find solution for node: updateComponentTreeUI with type Type70
Did not find solution for node: frame with type Type6
For node: pack.isSelected() expected fqn: boolean with type: Type73 got: boolean
Did not find solution for node: pack with type Type53
Cannot find matching typeVariable for: isSelected
For node: isSelected expected fqn: boolean with type: Type73 got: boolean
Did not find solution for node: frame.pack() with type Type75
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: pack
Did not find solution for node: pack with type Type75
Did not find solution for node: frame.setMinimumSize(frame.getSize()) with type Type79
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: setMinimumSize
Did not find solution for node: setMinimumSize with type Type79
Did not find solution for node: frame.getSize() with type Type77
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: getSize
Did not find solution for node: getSize with type Type77
Cannot find matching typeVariable for: Exception e
For node: Exception e expected fqn: java.lang.Exception with type: Type82 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type82 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type82 got: java.lang.Exception
For node: e expected fqn: java.lang.Exception with type: Type82 got: java.lang.Exception
For node: e.printStackTrace() expected fqn: void with type: Type83 got: void
For node: e expected fqn: java.lang.Exception with type: Type82 got: java.lang.Exception
Cannot find matching typeVariable for: printStackTrace
For node: printStackTrace expected fqn: void with type: Type83 got: void
Did not find solution for node: gui.add(plafComponents,BorderLayout.NORTH) with type Type90
Did not find solution for node: gui with type Type14
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type90
Did not find solution for node: plafComponents with type Type14
Cannot find matching typeVariable for: BorderLayout.NORTH
Did not find solution for node: BorderLayout.NORTH with type Type90
Did not find solution for node: BorderLayout with type Type15
Did not find solution for node: NORTH with type Type89
Did not find solution for node: JPanel with type Type14
Did not find solution for node: JPanel with type Type14
Cannot find matching typeVariable for: dynamicLabels=new JPanel(new BorderLayout(4,4))
Did not find solution for node: dynamicLabels=new JPanel(new BorderLayout(4,4)) with type Type14
Did not find solution for node: dynamicLabels with type Type14
Did not find solution for node: new JPanel(new BorderLayout(4,4)) with type Type14
Did not find solution for node: JPanel with type Type14
Did not find solution for node: JPanel with type Type14
Did not find solution for node: new BorderLayout(4,4) with type Type15
Did not find solution for node: BorderLayout with type Type15
Did not find solution for node: BorderLayout with type Type15
For node: 4 expected fqn: int with type: Type16 got: byte
For node: 4 expected fqn: int with type: Type16 got: byte
Did not find solution for node: dynamicLabels.setBorder(new TitledBorder("BorderLayout(4,4)")) with type Type27
Did not find solution for node: dynamicLabels with type Type14
Cannot find matching typeVariable for: setBorder
Did not find solution for node: setBorder with type Type27
Did not find solution for node: new TitledBorder("BorderLayout(4,4)") with type Type22
Did not find solution for node: TitledBorder with type Type22
Did not find solution for node: TitledBorder with type Type22
For node: "BorderLayout(4,4)" expected fqn: java.lang.String with type: Type7 got: java.lang.String
Did not find solution for node: gui.add(dynamicLabels,BorderLayout.WEST) with type Type95
Did not find solution for node: gui with type Type14
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type95
Did not find solution for node: dynamicLabels with type Type14
Cannot find matching typeVariable for: BorderLayout.WEST
Did not find solution for node: BorderLayout.WEST with type Type95
Did not find solution for node: BorderLayout with type Type15
Did not find solution for node: WEST with type Type94
Did not find solution for node: JPanel with type Type14
Did not find solution for node: JPanel with type Type14
Cannot find matching typeVariable for: labels=new JPanel(new GridLayout(0,2,3,3))
Did not find solution for node: labels=new JPanel(new GridLayout(0,2,3,3)) with type Type14
Did not find solution for node: labels with type Type14
Did not find solution for node: new JPanel(new GridLayout(0,2,3,3)) with type Type14
Did not find solution for node: JPanel with type Type14
Did not find solution for node: JPanel with type Type14
Did not find solution for node: new GridLayout(0,2,3,3) with type Type99
Did not find solution for node: GridLayout with type Type99
Did not find solution for node: GridLayout with type Type99
For node: 0 expected fqn: int with type: Type16 got: byte
For node: 2 expected fqn: int with type: Type16 got: byte
For node: 3 expected fqn: int with type: Type16 got: byte
For node: 3 expected fqn: int with type: Type16 got: byte
Did not find solution for node: labels.setBorder(new TitledBorder("GridLayout(0,2,3,3)")) with type Type27
Did not find solution for node: labels with type Type14
Cannot find matching typeVariable for: setBorder
Did not find solution for node: setBorder with type Type27
Did not find solution for node: new TitledBorder("GridLayout(0,2,3,3)") with type Type22
Did not find solution for node: TitledBorder with type Type22
Did not find solution for node: TitledBorder with type Type22
For node: "GridLayout(0,2,3,3)" expected fqn: java.lang.String with type: Type7 got: java.lang.String
Did not find solution for node: JButton with type Type107
Did not find solution for node: JButton with type Type107
Cannot find matching typeVariable for: addNew=new JButton("Add Another Label")
Did not find solution for node: addNew=new JButton("Add Another Label") with type Type107
Did not find solution for node: addNew with type Type107
Did not find solution for node: new JButton("Add Another Label") with type Type107
Did not find solution for node: JButton with type Type107
Did not find solution for node: JButton with type Type107
For node: "Add Another Label" expected fqn: java.lang.String with type: Type7 got: java.lang.String
Did not find solution for node: dynamicLabels.add(addNew,BorderLayout.NORTH) with type Type110
Did not find solution for node: dynamicLabels with type Type14
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type110
Did not find solution for node: addNew with type Type107
Cannot find matching typeVariable for: BorderLayout.NORTH
Did not find solution for node: BorderLayout.NORTH with type Type110
Did not find solution for node: BorderLayout with type Type15
Did not find solution for node: NORTH with type Type89
For node: addNew.addActionListener(new ActionListener(){
  private int labelCount=0;
  public void actionPerformed(  ActionEvent ae){
    labels.add(new JLabel("Label " + ++labelCount));
    frame.validate();
  }
}
) expected fqn: void with type: Type122 got: void
Did not find solution for node: addNew with type Type107
Cannot find matching typeVariable for: addActionListener
For node: addActionListener expected fqn: void with type: Type122 got: void
For node: new ActionListener(){
  private int labelCount=0;
  public void actionPerformed(  ActionEvent ae){
    labels.add(new JLabel("Label " + ++labelCount));
    frame.validate();
  }
}
 expected fqn:  with type: Type60 got: java.awt.event.ActionListener
For node: ActionListener expected fqn: java.awt.event.ActionListener with type: Type60 got: java.awt.event.ActionListener
For node: ActionListener expected fqn: java.awt.event.ActionListener with type: Type60 got: java.awt.event.ActionListener
Cannot find matching typeVariable for: {
  private int labelCount=0;
  public void actionPerformed(  ActionEvent ae){
    labels.add(new JLabel("Label " + ++labelCount));
    frame.validate();
  }
}

Did not find solution for node: int with type Type41
Cannot find matching typeVariable for: labelCount=0
Did not find solution for node: labelCount=0 with type Type41
Did not find solution for node: labelCount with type Type41
For node: 0 expected fqn: int with type: Type16 got: byte
Did not find solution for node: void with type Type2
Cannot find matching typeVariable for: actionPerformed
Cannot find matching typeVariable for: public void actionPerformed(ActionEvent ae){
  labels.add(new JLabel("Label " + ++labelCount));
  frame.validate();
}

Cannot find matching typeVariable for: {
  private int labelCount=0;
  public void actionPerformed(  ActionEvent ae){
    labels.add(new JLabel("Label " + ++labelCount));
    frame.validate();
  }
}

For node: actionPerformed expected fqn: void with type: Type60 got: java.awt.event.ActionListener
Cannot find matching typeVariable for: ActionEvent ae
Did not find solution for node: ActionEvent ae with type Type61
Did not find solution for node: ActionEvent with type Type61
Did not find solution for node: ActionEvent with type Type61
Did not find solution for node: ae with type Type61
Did not find solution for node: labels.add(new JLabel("Label " + ++labelCount)) with type Type117
Did not find solution for node: labels with type Type14
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type117
Did not find solution for node: new JLabel("Label " + ++labelCount) with type Type114
Did not find solution for node: JLabel with type Type114
Did not find solution for node: JLabel with type Type114
For node: "Label " + ++labelCount expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: "Label " expected fqn: java.lang.String with type: Type7 got: java.lang.String
Did not find solution for node: ++labelCount with type Type41
Did not find solution for node: labelCount with type Type41
Did not find solution for node: frame.validate() with type Type120
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: validate
Did not find solution for node: validate with type Type120
Did not find solution for node: dynamicLabels.add(new JScrollPane(labels),BorderLayout.CENTER) with type Type129
Did not find solution for node: dynamicLabels with type Type14
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type129
Did not find solution for node: new JScrollPane(labels) with type Type125
Did not find solution for node: JScrollPane with type Type125
Did not find solution for node: JScrollPane with type Type125
Did not find solution for node: labels with type Type14
Cannot find matching typeVariable for: BorderLayout.CENTER
Did not find solution for node: BorderLayout.CENTER with type Type129
Did not find solution for node: BorderLayout with type Type15
Did not find solution for node: CENTER with type Type128
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
Cannot find matching typeVariable for: header={"Name","Value"}
For node: header={"Name","Value"} expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: header expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: {"Name","Value"} expected fqn: java.lang.String[] with type: Type133 got: java.lang.String[]
For node: "Name" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: "Value" expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
Cannot find matching typeVariable for: a=new String[0]
For node: a=new String[0] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: a expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: new String[0] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: 0 expected fqn: int with type: Type16 got: byte
For node: String[] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
Cannot find matching typeVariable for: names=System.getProperties().stringPropertyNames().toArray(a)
For node: names=System.getProperties().stringPropertyNames().toArray(a) expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: names expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: System.getProperties().stringPropertyNames().toArray(a) expected fqn: java.lang.String[] with type: Type140 got: java.lang.String[]
Did not find solution for node: System.getProperties().stringPropertyNames() with type Type138
Did not find solution for node: System.getProperties() with type Type136
Did not find solution for node: System with type Type135
Cannot find matching typeVariable for: getProperties
Did not find solution for node: getProperties with type Type136
Cannot find matching typeVariable for: stringPropertyNames
Did not find solution for node: stringPropertyNames with type Type138
Cannot find matching typeVariable for: toArray
For node: toArray expected fqn: java.lang.String[] with type: Type140 got: java.lang.String[]
For node: a expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Did not find solution for node: String[][] with type Type143
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
Cannot find matching typeVariable for: data=new String[names.length][2]
Did not find solution for node: data=new String[names.length][2] with type Type143
Did not find solution for node: data with type Type143
Did not find solution for node: new String[names.length][2] with type Type143
Did not find solution for node: String[][] with type Type143
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
For node: String expected fqn: java.lang.String with type: Type7 got: java.lang.String
Cannot find matching typeVariable for: names.length
Did not find solution for node: names.length with type Type143
For node: names expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: length expected fqn: int with type: Type144 got: int
For node: 2 expected fqn: int with type: Type16 got: byte
Cannot find matching typeVariable for: int ii=0
Did not find solution for node: int ii=0 with type Type41
Did not find solution for node: int with type Type41
Cannot find matching typeVariable for: ii=0
Did not find solution for node: ii=0 with type Type41
Did not find solution for node: ii with type Type41
For node: 0 expected fqn: int with type: Type16 got: byte
For node: ii < names.length expected fqn: boolean with type: Type43 got: boolean
Did not find solution for node: ii with type Type41
Cannot find matching typeVariable for: names.length
For node: names.length expected fqn: int with type: Type43 got: boolean
For node: names expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
For node: length expected fqn: int with type: Type144 got: int
Did not find solution for node: ii++ with type Type41
Did not find solution for node: ii with type Type41
Did not find solution for node: data[ii][0]=names[ii] with type Type3
Did not find solution for node: data[ii][0] with type Type3
For node: data[ii] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Did not find solution for node: data with type Type143
Cannot find matching typeVariable for: ii
For node: ii expected fqn: int with type: Type4 got: java.lang.String[]
For node: 0 expected fqn: int with type: Type16 got: byte
Did not find solution for node: names[ii] with type Type3
For node: names expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Cannot find matching typeVariable for: ii
Did not find solution for node: ii with type Type3
Did not find solution for node: data[ii][1]=System.getProperty(names[ii]) with type Type3
Did not find solution for node: data[ii][1] with type Type3
For node: data[ii] expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Did not find solution for node: data with type Type143
Cannot find matching typeVariable for: ii
For node: ii expected fqn: int with type: Type4 got: java.lang.String[]
For node: 1 expected fqn: int with type: Type16 got: byte
Did not find solution for node: System.getProperty(names[ii]) with type Type145
Did not find solution for node: System with type Type135
Cannot find matching typeVariable for: getProperty
Did not find solution for node: getProperty with type Type145
Did not find solution for node: names[ii] with type Type3
For node: names expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Cannot find matching typeVariable for: ii
Did not find solution for node: ii with type Type3
Did not find solution for node: DefaultTableModel with type Type148
Did not find solution for node: DefaultTableModel with type Type148
Cannot find matching typeVariable for: model=new DefaultTableModel(data,header)
Did not find solution for node: model=new DefaultTableModel(data,header) with type Type148
Did not find solution for node: model with type Type148
Did not find solution for node: new DefaultTableModel(data,header) with type Type148
Did not find solution for node: DefaultTableModel with type Type148
Did not find solution for node: DefaultTableModel with type Type148
Did not find solution for node: data with type Type143
For node: header expected fqn: java.lang.String[] with type: Type4 got: java.lang.String[]
Did not find solution for node: JTable with type Type152
Did not find solution for node: JTable with type Type152
Cannot find matching typeVariable for: table=new JTable(model)
Did not find solution for node: table=new JTable(model) with type Type152
Did not find solution for node: table with type Type152
Did not find solution for node: new JTable(model) with type Type152
Did not find solution for node: JTable with type Type152
Did not find solution for node: JTable with type Type152
Did not find solution for node: model with type Type148
For node: table.setAutoCreateRowSorter(true) expected fqn: void with type: Type155 got: void
Did not find solution for node: table with type Type152
Cannot find matching typeVariable for: setAutoCreateRowSorter
For node: setAutoCreateRowSorter expected fqn: void with type: Type155 got: void
For node: true expected fqn: boolean with type: Type43 got: boolean
Cannot find matching typeVariable for: Exception continuewithNoSort
For node: Exception continuewithNoSort expected fqn: java.lang.Exception with type: Type82 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type82 got: java.lang.Exception
For node: Exception expected fqn: java.lang.Exception with type: Type82 got: java.lang.Exception
For node: continuewithNoSort expected fqn: java.lang.Exception with type: Type82 got: java.lang.Exception
Did not find solution for node: JScrollPane with type Type125
Did not find solution for node: JScrollPane with type Type125
Cannot find matching typeVariable for: tableScroll=new JScrollPane(table)
Did not find solution for node: tableScroll=new JScrollPane(table) with type Type125
Did not find solution for node: tableScroll with type Type125
Did not find solution for node: new JScrollPane(table) with type Type125
Did not find solution for node: JScrollPane with type Type125
Did not find solution for node: JScrollPane with type Type125
Did not find solution for node: table with type Type152
Did not find solution for node: Dimension with type Type160
Did not find solution for node: Dimension with type Type160
Cannot find matching typeVariable for: tablePreferred=tableScroll.getPreferredSize()
Did not find solution for node: tablePreferred=tableScroll.getPreferredSize() with type Type160
Did not find solution for node: tablePreferred with type Type160
Did not find solution for node: tableScroll.getPreferredSize() with type Type161
Did not find solution for node: tableScroll with type Type125
Cannot find matching typeVariable for: getPreferredSize
Did not find solution for node: getPreferredSize with type Type161
For node: tableScroll.setPreferredSize(new Dimension(tablePreferred.width,tablePreferred.height / 3)) expected fqn: void with type: Type168 got: void
Did not find solution for node: tableScroll with type Type125
Cannot find matching typeVariable for: setPreferredSize
For node: setPreferredSize expected fqn: void with type: Type168 got: void
Did not find solution for node: new Dimension(tablePreferred.width,tablePreferred.height / 3) with type Type160
Did not find solution for node: Dimension with type Type160
Did not find solution for node: Dimension with type Type160
Cannot find matching typeVariable for: tablePreferred.width
Did not find solution for node: tablePreferred.width with type Type160
Did not find solution for node: tablePreferred with type Type160
For node: width expected fqn: int with type: Type164 got: int
For node: tablePreferred.height / 3 expected fqn: int with type: Type163 got: int
Cannot find matching typeVariable for: tablePreferred.height
For node: tablePreferred.height expected fqn: int with type: Type163 got: int
Did not find solution for node: tablePreferred with type Type160
For node: height expected fqn: int with type: Type163 got: int
For node: 3 expected fqn: int with type: Type16 got: byte
Did not find solution for node: JPanel with type Type14
Did not find solution for node: JPanel with type Type14
Cannot find matching typeVariable for: imagePanel=new JPanel(new GridBagLayout())
Did not find solution for node: imagePanel=new JPanel(new GridBagLayout()) with type Type14
Did not find solution for node: imagePanel with type Type14
Did not find solution for node: new JPanel(new GridBagLayout()) with type Type14
Did not find solution for node: JPanel with type Type14
Did not find solution for node: JPanel with type Type14
Did not find solution for node: new GridBagLayout() with type Type171
Did not find solution for node: GridBagLayout with type Type171
Did not find solution for node: GridBagLayout with type Type171
Did not find solution for node: imagePanel.setBorder(new TitledBorder("GridBagLayout()")) with type Type27
Did not find solution for node: imagePanel with type Type14
Cannot find matching typeVariable for: setBorder
Did not find solution for node: setBorder with type Type27
Did not find solution for node: new TitledBorder("GridBagLayout()") with type Type22
Did not find solution for node: TitledBorder with type Type22
Did not find solution for node: TitledBorder with type Type22
For node: "GridBagLayout()" expected fqn: java.lang.String with type: Type7 got: java.lang.String
Did not find solution for node: BufferedImage with type Type175
Did not find solution for node: BufferedImage with type Type175
Cannot find matching typeVariable for: bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB)
Did not find solution for node: bi=new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB) with type Type175
Did not find solution for node: bi with type Type175
Did not find solution for node: new BufferedImage(200,200,BufferedImage.TYPE_INT_ARGB) with type Type175
Did not find solution for node: BufferedImage with type Type175
Did not find solution for node: BufferedImage with type Type175
Did not find solution for node: 200 with type Type176
Did not find solution for node: 200 with type Type176
Cannot find matching typeVariable for: BufferedImage.TYPE_INT_ARGB
Did not find solution for node: BufferedImage.TYPE_INT_ARGB with type Type175
Did not find solution for node: BufferedImage with type Type175
Did not find solution for node: TYPE_INT_ARGB with type Type177
Did not find solution for node: Graphics2D with type Type182
Did not find solution for node: Graphics2D with type Type182
Cannot find matching typeVariable for: g=bi.createGraphics()
Did not find solution for node: g=bi.createGraphics() with type Type182
Did not find solution for node: g with type Type182
Did not find solution for node: bi.createGraphics() with type Type183
Did not find solution for node: bi with type Type175
Cannot find matching typeVariable for: createGraphics
Did not find solution for node: createGraphics with type Type183
Did not find solution for node: GradientPaint with type Type185
Did not find solution for node: GradientPaint with type Type185
Cannot find matching typeVariable for: gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow)
Did not find solution for node: gp=new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow) with type Type185
Did not find solution for node: gp with type Type185
Did not find solution for node: new GradientPaint(20f,20f,Color.red,180f,180f,Color.yellow) with type Type185
Did not find solution for node: GradientPaint with type Type185
Did not find solution for node: GradientPaint with type Type185
For node: 20f expected fqn: float with type: Type186 got: float
For node: 20f expected fqn: float with type: Type186 got: float
Cannot find matching typeVariable for: Color.red
Did not find solution for node: Color.red with type Type185
For node: Color expected fqn: java.awt.Color with type: Type187 got: java.awt.Color
For node: red expected fqn: java.awt.Color with type: Type188 got: java.awt.Color
For node: 180f expected fqn: float with type: Type186 got: float
For node: 180f expected fqn: float with type: Type186 got: float
Cannot find matching typeVariable for: Color.yellow
Did not find solution for node: Color.yellow with type Type185
For node: Color expected fqn: java.awt.Color with type: Type187 got: java.awt.Color
For node: yellow expected fqn: java.awt.Color with type: Type189 got: java.awt.Color
Did not find solution for node: g.setPaint(gp) with type Type197
Did not find solution for node: g with type Type182
Cannot find matching typeVariable for: setPaint
Did not find solution for node: setPaint with type Type197
Did not find solution for node: gp with type Type185
Did not find solution for node: g.fillRect(0,0,200,200) with type Type200
Did not find solution for node: g with type Type182
Cannot find matching typeVariable for: fillRect
Did not find solution for node: fillRect with type Type200
For node: 0 expected fqn: int with type: Type16 got: byte
For node: 0 expected fqn: int with type: Type16 got: byte
Did not find solution for node: 200 with type Type176
Did not find solution for node: 200 with type Type176
For node: ImageIcon expected fqn: javax.swing.ImageIcon with type: Type206 got: javax.swing.ImageIcon
For node: ImageIcon expected fqn: javax.swing.ImageIcon with type: Type206 got: javax.swing.ImageIcon
Cannot find matching typeVariable for: ii=new ImageIcon(bi)
For node: ii=new ImageIcon(bi) expected fqn: javax.swing.ImageIcon with type: Type206 got: javax.swing.ImageIcon
For node: ii expected fqn: javax.swing.ImageIcon with type: Type206 got: javax.swing.ImageIcon
For node: new ImageIcon(bi) expected fqn: javax.swing.ImageIcon with type: Type206 got: javax.swing.ImageIcon
For node: ImageIcon expected fqn: javax.swing.ImageIcon with type: Type206 got: javax.swing.ImageIcon
For node: ImageIcon expected fqn: javax.swing.ImageIcon with type: Type206 got: javax.swing.ImageIcon
Did not find solution for node: bi with type Type175
Did not find solution for node: JLabel with type Type114
Did not find solution for node: JLabel with type Type114
Cannot find matching typeVariable for: imageLabel=new JLabel(ii)
Did not find solution for node: imageLabel=new JLabel(ii) with type Type114
Did not find solution for node: imageLabel with type Type114
Did not find solution for node: new JLabel(ii) with type Type114
Did not find solution for node: JLabel with type Type114
Did not find solution for node: JLabel with type Type114
For node: ii expected fqn: javax.swing.ImageIcon with type: Type206 got: javax.swing.ImageIcon
Did not find solution for node: imagePanel.add(imageLabel,null) with type Type212
Did not find solution for node: imagePanel with type Type14
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type212
Did not find solution for node: imageLabel with type Type114
Did not find solution for node: null with type Type211
Did not find solution for node: JSplitPane with type Type216
Did not find solution for node: JSplitPane with type Type216
Cannot find matching typeVariable for: splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel))
Did not find solution for node: splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel)) with type Type216
Did not find solution for node: splitPane with type Type216
Did not find solution for node: new JSplitPane(JSplitPane.VERTICAL_SPLIT,tableScroll,new JScrollPane(imagePanel)) with type Type216
Did not find solution for node: JSplitPane with type Type216
Did not find solution for node: JSplitPane with type Type216
Cannot find matching typeVariable for: JSplitPane.VERTICAL_SPLIT
Did not find solution for node: JSplitPane.VERTICAL_SPLIT with type Type216
Did not find solution for node: JSplitPane with type Type216
Did not find solution for node: VERTICAL_SPLIT with type Type217
Did not find solution for node: tableScroll with type Type125
Did not find solution for node: new JScrollPane(imagePanel) with type Type125
Did not find solution for node: JScrollPane with type Type125
Did not find solution for node: JScrollPane with type Type125
Did not find solution for node: imagePanel with type Type14
Did not find solution for node: gui.add(splitPane,BorderLayout.CENTER) with type Type222
Did not find solution for node: gui with type Type14
Cannot find matching typeVariable for: add
Did not find solution for node: add with type Type222
Did not find solution for node: splitPane with type Type216
Cannot find matching typeVariable for: BorderLayout.CENTER
Did not find solution for node: BorderLayout.CENTER with type Type222
Did not find solution for node: BorderLayout with type Type15
Did not find solution for node: CENTER with type Type128
Did not find solution for node: frame.setContentPane(gui) with type Type226
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: setContentPane
Did not find solution for node: setContentPane with type Type226
Did not find solution for node: gui with type Type14
Did not find solution for node: frame.pack() with type Type76
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: pack
Did not find solution for node: pack with type Type76
Did not find solution for node: frame.setLocationRelativeTo(null) with type Type230
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: setLocationRelativeTo
Did not find solution for node: setLocationRelativeTo with type Type230
Did not find solution for node: null with type Type229
Did not find solution for node: frame.setLocationByPlatform(true) with type Type233
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: setLocationByPlatform
Did not find solution for node: setLocationByPlatform with type Type233
For node: true expected fqn: boolean with type: Type43 got: boolean
Did not find solution for node: frame.setMinimumSize(frame.getSize()) with type Type236
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: setMinimumSize
Did not find solution for node: setMinimumSize with type Type236
Did not find solution for node: frame.getSize() with type Type78
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: getSize
Did not find solution for node: getSize with type Type78
Cannot find matching typeVariable for: Throwable ignoreAndContinue
For node: Throwable ignoreAndContinue expected fqn: java.lang.Throwable with type: Type239 got: java.lang.Throwable
For node: Throwable expected fqn: java.lang.Throwable with type: Type239 got: java.lang.Throwable
For node: Throwable expected fqn: java.lang.Throwable with type: Type239 got: java.lang.Throwable
For node: ignoreAndContinue expected fqn: java.lang.Throwable with type: Type239 got: java.lang.Throwable
Did not find solution for node: frame.setVisible(true) with type Type240
Did not find solution for node: frame with type Type6
Cannot find matching typeVariable for: setVisible
Did not find solution for node: setVisible with type Type240
For node: true expected fqn: boolean with type: Type43 got: boolean
For node: SwingUtilities.invokeLater(r) expected fqn: void with type: Type245 got: void
For node: SwingUtilities expected fqn: javax.swing.SwingUtilities with type: Type244 got: javax.swing.SwingUtilities
Cannot find matching typeVariable for: invokeLater
For node: invokeLater expected fqn: void with type: Type245 got: void
For node: r expected fqn: java.lang.Runnable with type: Type5 got: java.lang.Runnable
{Checked=567, Analyzed=163, Unsolved=404, Incorrect=31, Correct=132}
=ClassInstanceCreation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=3, Correct=0}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
float=NumberLiteral: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
int=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=24, Analyzed=20, Unsolved=4, Incorrect=20, Correct=0}
int=PostfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=10, Analyzed=4, Unsolved=6, Incorrect=3, Correct=1}
int=SimpleName: {Checked=27, Analyzed=10, Unsolved=17, Incorrect=2, Correct=8}
int=VariableDeclarationExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
java=ArrayAccess: {Checked=9, Analyzed=2, Unsolved=7, Incorrect=0, Correct=2}
java=ArrayCreation: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=ArrayInitializer: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=10, Analyzed=7, Unsolved=3, Incorrect=0, Correct=7}
java=Assignment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=31, Analyzed=1, Unsolved=30, Incorrect=0, Correct=1}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=14, Analyzed=1, Unsolved=13, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
java=SimpleName: {Checked=212, Analyzed=44, Unsolved=168, Incorrect=0, Correct=44}
java=SimpleType: {Checked=69, Analyzed=17, Unsolved=52, Incorrect=0, Correct=17}
java=SingleVariableDeclaration: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=0, Correct=4}
java=StringLiteral: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
java=VariableDeclarationFragment: {Checked=26, Analyzed=6, Unsolved=20, Incorrect=0, Correct=6}
null=NullLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=31, Analyzed=6, Unsolved=25, Incorrect=0, Correct=6}
void=PrimitiveType: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
void=SimpleName: {Checked=34, Analyzed=9, Unsolved=25, Incorrect=3, Correct=6}
Total stats
{Checked=567, Analyzed=163, Unsolved=404, Incorrect=31, Correct=132}
=ClassInstanceCreation: {Checked=3, Analyzed=3, Unsolved=0, Incorrect=3, Correct=0}
=SimpleName: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
boolean=BooleanLiteral: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
boolean=InfixExpression: {Checked=2, Analyzed=2, Unsolved=0, Incorrect=0, Correct=2}
boolean=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
boolean=SimpleName: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
float=NumberLiteral: {Checked=4, Analyzed=4, Unsolved=0, Incorrect=0, Correct=4}
int=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=MethodInvocation: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
int=NumberLiteral: {Checked=24, Analyzed=20, Unsolved=4, Incorrect=20, Correct=0}
int=PostfixExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=PrefixExpression: {Checked=1, Analyzed=0, Unsolved=1, Incorrect=0, Correct=0}
int=PrimitiveType: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
int=QualifiedName: {Checked=10, Analyzed=4, Unsolved=6, Incorrect=3, Correct=1}
int=SimpleName: {Checked=27, Analyzed=10, Unsolved=17, Incorrect=2, Correct=8}
int=VariableDeclarationExpression: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
int=VariableDeclarationFragment: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
java=ArrayAccess: {Checked=9, Analyzed=2, Unsolved=7, Incorrect=0, Correct=2}
java=ArrayCreation: {Checked=3, Analyzed=2, Unsolved=1, Incorrect=0, Correct=2}
java=ArrayInitializer: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=ArrayType: {Checked=10, Analyzed=7, Unsolved=3, Incorrect=0, Correct=7}
java=Assignment: {Checked=3, Analyzed=0, Unsolved=3, Incorrect=0, Correct=0}
java=ClassInstanceCreation: {Checked=31, Analyzed=1, Unsolved=30, Incorrect=0, Correct=1}
java=InfixExpression: {Checked=1, Analyzed=1, Unsolved=0, Incorrect=0, Correct=1}
java=MethodInvocation: {Checked=14, Analyzed=1, Unsolved=13, Incorrect=0, Correct=1}
java=QualifiedName: {Checked=8, Analyzed=0, Unsolved=8, Incorrect=0, Correct=0}
java=SimpleName: {Checked=212, Analyzed=44, Unsolved=168, Incorrect=0, Correct=44}
java=SimpleType: {Checked=69, Analyzed=17, Unsolved=52, Incorrect=0, Correct=17}
java=SingleVariableDeclaration: {Checked=6, Analyzed=4, Unsolved=2, Incorrect=0, Correct=4}
java=StringLiteral: {Checked=11, Analyzed=11, Unsolved=0, Incorrect=0, Correct=11}
java=VariableDeclarationFragment: {Checked=26, Analyzed=6, Unsolved=20, Incorrect=0, Correct=6}
null=NullLiteral: {Checked=2, Analyzed=0, Unsolved=2, Incorrect=0, Correct=0}
void=MethodInvocation: {Checked=31, Analyzed=6, Unsolved=25, Incorrect=0, Correct=6}
void=PrimitiveType: {Checked=4, Analyzed=0, Unsolved=4, Incorrect=0, Correct=0}
void=SimpleName: {Checked=34, Analyzed=9, Unsolved=25, Incorrect=3, Correct=6}
,ClassInstanceCreation,3,3,0,3,0
,SimpleName,0,1,0,0,1
boolean,BooleanLiteral,4,4,4,0,0
boolean,InfixExpression,2,2,2,0,0
boolean,MethodInvocation,1,1,1,0,0
boolean,SimpleName,1,1,1,0,0
float,NumberLiteral,4,4,4,0,0
int,InfixExpression,1,1,1,0,0
int,MethodInvocation,1,1,1,0,0
int,NumberLiteral,20,24,0,20,4
int,PostfixExpression,0,2,0,0,2
int,PrefixExpression,0,1,0,0,1
int,PrimitiveType,0,4,0,0,4
int,QualifiedName,4,10,1,3,6
int,SimpleName,10,27,8,2,17
int,VariableDeclarationExpression,0,2,0,0,2
int,VariableDeclarationFragment,0,4,0,0,4
java,ArrayAccess,2,9,2,0,7
java,ArrayCreation,2,3,2,0,1
java,ArrayInitializer,1,1,1,0,0
java,ArrayType,7,10,7,0,3
java,Assignment,0,3,0,0,3
java,ClassInstanceCreation,1,31,1,0,30
java,InfixExpression,1,1,1,0,0
java,MethodInvocation,1,14,1,0,13
java,QualifiedName,0,8,0,0,8
java,SimpleName,44,212,44,0,168
java,SimpleType,17,69,17,0,52
java,SingleVariableDeclaration,4,6,4,0,2
java,StringLiteral,11,11,11,0,0
java,VariableDeclarationFragment,6,26,6,0,20
null,NullLiteral,0,2,0,0,2
void,MethodInvocation,6,31,6,0,25
void,PrimitiveType,0,4,0,0,4
void,SimpleName,9,34,6,3,25
